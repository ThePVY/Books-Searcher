/*! For license information please see main.8fe8267b19c38a2795a5.js.LICENSE.txt */
(()=>{var e={2868:(e,t,n)=>{e.exports=n(1867)},3155:(e,t,n)=>{"use strict";var r=n(4030),o=n(8079),a=n(4687),i=n(7512),u=n(9791),l=n(924),c=n(5903),s=n(5971);e.exports=function(e){return new Promise((function(t,n){var f=e.data,d=e.headers;r.isFormData(f)&&delete d["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var h=e.auth.username||"",m=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";d.Authorization="Basic "+btoa(h+":"+m)}var v=u(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),i(v,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in p?l(p.getAllResponseHeaders()):null,a={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:r,config:e,request:p};o(t,n,a),p=null}},p.onabort=function(){p&&(n(s("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){n(s("Network Error",e,null,p)),p=null},p.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(s(t,e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var g=(e.withCredentials||c(v))&&e.xsrfCookieName?a.read(e.xsrfCookieName):void 0;g&&(d[e.xsrfHeaderName]=g)}if("setRequestHeader"in p&&r.forEach(d,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete d[t]:p.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),n(e),p=null)})),f||(f=null),p.send(f)}))}},1867:(e,t,n)=>{"use strict";var r=n(4030),o=n(3843),a=n(5891),i=n(3316);function u(e){var t=new a(e),n=o(a.prototype.request,t);return r.extend(n,a.prototype,t),r.extend(n,t),n}var l=u(n(457));l.Axios=a,l.create=function(e){return u(i(l.defaults,e))},l.Cancel=n(6266),l.CancelToken=n(9747),l.isCancel=n(9416),l.all=function(e){return Promise.all(e)},l.spread=n(1545),l.isAxiosError=n(232),e.exports=l,e.exports.default=l},6266:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},9747:(e,t,n)=>{"use strict";var r=n(6266);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},9416:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},5891:(e,t,n)=>{"use strict";var r=n(4030),o=n(7512),a=n(8036),i=n(884),u=n(3316);function l(e){this.defaults=e,this.interceptors={request:new a,response:new a}}l.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=u(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[i,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},l.prototype.getUri=function(e){return e=u(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){l.prototype[e]=function(t,n){return this.request(u(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){l.prototype[e]=function(t,n,r){return this.request(u(r||{},{method:e,url:t,data:n}))}})),e.exports=l},8036:(e,t,n)=>{"use strict";var r=n(4030);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},9791:(e,t,n)=>{"use strict";var r=n(957),o=n(7050);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},5971:(e,t,n)=>{"use strict";var r=n(3136);e.exports=function(e,t,n,o,a){var i=new Error(e);return r(i,t,n,o,a)}},884:(e,t,n)=>{"use strict";var r=n(4030),o=n(8630),a=n(9416),i=n(457);function u(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return u(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return u(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return a(t)||(u(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},3136:e=>{"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},3316:(e,t,n)=>{"use strict";var r=n(4030);e.exports=function(e,t){t=t||{};var n={},o=["url","method","data"],a=["headers","auth","proxy","params"],i=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],u=["validateStatus"];function l(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function c(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=l(void 0,e[o])):n[o]=l(e[o],t[o])}r.forEach(o,(function(e){r.isUndefined(t[e])||(n[e]=l(void 0,t[e]))})),r.forEach(a,c),r.forEach(i,(function(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=l(void 0,e[o])):n[o]=l(void 0,t[o])})),r.forEach(u,(function(r){r in t?n[r]=l(e[r],t[r]):r in e&&(n[r]=l(void 0,e[r]))}));var s=o.concat(a).concat(i).concat(u),f=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===s.indexOf(e)}));return r.forEach(f,c),n}},8079:(e,t,n)=>{"use strict";var r=n(5971);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},8630:(e,t,n)=>{"use strict";var r=n(4030);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},457:(e,t,n)=>{"use strict";var r=n(4030),o=n(7122),a={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,l={adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(u=n(3155)),u),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){l.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){l.headers[e]=r.merge(a)})),e.exports=l},3843:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},7512:(e,t,n)=>{"use strict";var r=n(4030);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(r.isURLSearchParams(t))a=t.toString();else{var i=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))})))})),a=i.join("&")}if(a){var u=e.indexOf("#");-1!==u&&(e=e.slice(0,u)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},7050:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4687:(e,t,n)=>{"use strict";var r=n(4030);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,a,i){var u=[];u.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&u.push("expires="+new Date(n).toGMTString()),r.isString(o)&&u.push("path="+o),r.isString(a)&&u.push("domain="+a),!0===i&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},957:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},232:e=>{"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},5903:(e,t,n)=>{"use strict";var r=n(4030);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},7122:(e,t,n)=>{"use strict";var r=n(4030);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},924:(e,t,n)=>{"use strict";var r=n(4030),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,i={};return e?(r.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),t=r.trim(e.substr(0,a)).toLowerCase(),n=r.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}})),i):i}},1545:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},4030:(e,t,n)=>{"use strict";var r=n(3843),o=Object.prototype.toString;function a(e){return"[object Array]"===o.call(e)}function i(e){return void 0===e}function u(e){return null!==e&&"object"==typeof e}function l(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function c(e){return"[object Function]"===o.call(e)}function s(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isPlainObject:l,isUndefined:i,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:c,isStream:function(e){return u(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:s,merge:function e(){var t={};function n(n,r){l(t[r])&&l(n)?t[r]=e(t[r],n):l(n)?t[r]=e({},n):a(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)s(arguments[r],n);return t},extend:function(e,t,n){return s(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},1281:(e,t,n)=>{"use strict";var r=n(1892),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?i:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=i;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=s(n);f&&(i=i.concat(f(n)));for(var u=l(t),m=l(n),v=0;v<i.length;++v){var g=i[v];if(!(a[g]||r&&r[g]||m&&m[g]||u&&u[g])){var y=d(n,g);try{c(t,g,y)}catch(e){}}}}return t}},7651:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,g=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case s:case f:case a:case u:case i:case p:return e;default:switch(e=e&&e.$$typeof){case c:case d:case v:case m:case l:return e;default:return t}}case o:return t}}}function S(e){return x(e)===f}t.AsyncMode=s,t.ConcurrentMode=f,t.ContextConsumer=c,t.ContextProvider=l,t.Element=r,t.ForwardRef=d,t.Fragment=a,t.Lazy=v,t.Memo=m,t.Portal=o,t.Profiler=u,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return S(e)||x(e)===s},t.isConcurrentMode=S,t.isContextConsumer=function(e){return x(e)===c},t.isContextProvider=function(e){return x(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return x(e)===d},t.isFragment=function(e){return x(e)===a},t.isLazy=function(e){return x(e)===v},t.isMemo=function(e){return x(e)===m},t.isPortal=function(e){return x(e)===o},t.isProfiler=function(e){return x(e)===u},t.isStrictMode=function(e){return x(e)===i},t.isSuspense=function(e){return x(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===u||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===l||e.$$typeof===c||e.$$typeof===d||e.$$typeof===y||e.$$typeof===b||e.$$typeof===w||e.$$typeof===g)},t.typeOf=x},1892:(e,t,n)=>{"use strict";e.exports=n(7651)},9813:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,u,l=o(e),c=1;c<arguments.length;c++){for(var s in i=Object(arguments[c]))n.call(i,s)&&(l[s]=i[s]);if(t){u=t(i);for(var f=0;f<u.length;f++)r.call(i,u[f])&&(l[u[f]]=i[u[f]])}}return l}},5372:(e,t,n)=>{"use strict";var r=n(9567);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},2652:(e,t,n)=>{e.exports=n(5372)()},9567:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},7799:(e,t,n)=>{"use strict";var r=n(9526),o=n(9813),a=n(2851);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var u=new Set,l={};function c(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)u.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function v(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var x=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=60103,k=60106,E=60107,C=60108,_=60114,O=60109,P=60110,j=60112,T=60113,A=60120,N=60115,R=60116,I=60121,L=60128,z=60129,M=60130,F=60131;if("function"==typeof Symbol&&Symbol.for){var D=Symbol.for;S=D("react.element"),k=D("react.portal"),E=D("react.fragment"),C=D("react.strict_mode"),_=D("react.profiler"),O=D("react.provider"),P=D("react.context"),j=D("react.forward_ref"),T=D("react.suspense"),A=D("react.suspense_list"),N=D("react.memo"),R=D("react.lazy"),I=D("react.block"),D("react.scope"),L=D("react.opaque.id"),z=D("react.debug_trace_mode"),M=D("react.offscreen"),F=D("react.legacy_hidden")}var U,B="function"==typeof Symbol&&Symbol.iterator;function $(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=B&&e[B]||e["@@iterator"])?e:null}function V(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);U=t&&t[1]||""}return"\n"+U+e}var W=!1;function H(e,t){if(!e||W)return"";W=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,u=a.length-1;1<=i&&0<=u&&o[i]!==a[u];)u--;for(;1<=i&&0<=u;i--,u--)if(o[i]!==a[u]){if(1!==i||1!==u)do{if(i--,0>--u||o[i]!==a[u])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=u);break}}}finally{W=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?V(e):""}function q(e){switch(e.tag){case 5:return V(e.type);case 16:return V("Lazy");case 13:return V("Suspense");case 19:return V("SuspenseList");case 0:case 2:case 15:return H(e.type,!1);case 11:return H(e.type.render,!1);case 22:return H(e.type._render,!1);case 1:return H(e.type,!0);default:return""}}function Q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case k:return"Portal";case _:return"Profiler";case C:return"StrictMode";case T:return"Suspense";case A:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case O:return(e._context.displayName||"Context")+".Provider";case j:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case N:return Q(e.type);case I:return Q(e._render);case R:t=e._payload,e=e._init;try{return Q(e(t))}catch(e){}}return null}function G(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function K(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=K(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=K(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function J(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=G(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=G(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,G(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&J(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+G(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function ue(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:G(n)}}function ce(e,t){var n=G(t.value),r=G(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function se(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ve=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function xe(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var Se=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ke(e,t){if(t){if(Se[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function Ee(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ce(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var _e=null,Oe=null,Pe=null;function je(e){if(e=Zr(e)){if("function"!=typeof _e)throw Error(i(280));var t=e.stateNode;t&&(t=to(t),_e(e.stateNode,e.type,t))}}function Te(e){Oe?Pe?Pe.push(e):Pe=[e]:Oe=e}function Ae(){if(Oe){var e=Oe,t=Pe;if(Pe=Oe=null,je(e),t)for(e=0;e<t.length;e++)je(t[e])}}function Ne(e,t){return e(t)}function Re(e,t,n,r,o){return e(t,n,r,o)}function Ie(){}var Le=Ne,ze=!1,Me=!1;function Fe(){null===Oe&&null===Pe||(Ie(),Ae())}function De(e,t){var n=e.stateNode;if(null===n)return null;var r=to(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Ue=!1;if(f)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){Ue=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(me){Ue=!1}function $e(e,t,n,r,o,a,i,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Ve=!1,We=null,He=!1,qe=null,Qe={onError:function(e){Ve=!0,We=e}};function Ge(e,t,n,r,o,a,i,u,l){Ve=!1,We=null,$e.apply(Qe,arguments)}function Ke(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ye(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Xe(e){if(Ke(e)!==e)throw Error(i(188))}function Je(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ke(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Xe(o),e;if(a===r)return Xe(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var u=!1,l=o.child;l;){if(l===n){u=!0,n=o,r=a;break}if(l===r){u=!0,r=o,n=a;break}l=l.sibling}if(!u){for(l=a.child;l;){if(l===n){u=!0,n=a,r=o;break}if(l===r){u=!0,r=a,n=o;break}l=l.sibling}if(!u)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Ze(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,at=[],it=null,ut=null,lt=null,ct=new Map,st=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":ut=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":ct.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":st.delete(t.pointerId)}}function mt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=pt(t,n,r,o,a),null!==t&&null!==(t=Zr(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function vt(e){var t=Jr(e.target);if(null!==t){var n=Ke(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ye(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Zr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){gt(e)&&n.delete(t)}function bt(){for(ot=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=Zr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==it&&gt(it)&&(it=null),null!==ut&&gt(ut)&&(ut=null),null!==lt&&gt(lt)&&(lt=null),ct.forEach(yt),st.forEach(yt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,bt)))}function xt(e){function t(t){return wt(t,e)}if(0<at.length){wt(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==it&&wt(it,e),null!==ut&&wt(ut,e),null!==lt&&wt(lt,e),ct.forEach(t),st.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)vt(n),null===n.blockedOn&&ft.shift()}function St(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:St("Animation","AnimationEnd"),animationiteration:St("Animation","AnimationIteration"),animationstart:St("Animation","AnimationStart"),transitionend:St("Transition","TransitionEnd")},Et={},Ct={};function _t(e){if(Et[e])return Et[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ct)return Et[e]=n[t];return e}f&&(Ct=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var Ot=_t("animationend"),Pt=_t("animationiteration"),jt=_t("animationstart"),Tt=_t("transitionend"),At=new Map,Nt=new Map,Rt=["abort","abort",Ot,"animationEnd",Pt,"animationIteration",jt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Tt,"transitionEnd","waiting","waiting"];function It(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Nt.set(r,t),At.set(r,o),c(o,[r])}}(0,a.unstable_now)();var Lt=8;function zt(e){if(0!=(1&e))return Lt=15,1;if(0!=(2&e))return Lt=14,2;if(0!=(4&e))return Lt=13,4;var t=24&e;return 0!==t?(Lt=12,t):0!=(32&e)?(Lt=11,32):0!=(t=192&e)?(Lt=10,t):0!=(256&e)?(Lt=9,256):0!=(t=3584&e)?(Lt=8,t):0!=(4096&e)?(Lt=7,4096):0!=(t=4186112&e)?(Lt=6,t):0!=(t=62914560&e)?(Lt=5,t):67108864&e?(Lt=4,67108864):0!=(134217728&e)?(Lt=3,134217728):0!=(t=805306368&e)?(Lt=2,t):0!=(1073741824&e)?(Lt=1,1073741824):(Lt=8,e)}function Mt(e,t){var n=e.pendingLanes;if(0===n)return Lt=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,u=e.pingedLanes;if(0!==a)r=a,o=Lt=15;else if(0!=(a=134217727&n)){var l=a&~i;0!==l?(r=zt(l),o=Lt):0!=(u&=a)&&(r=zt(u),o=Lt)}else 0!=(a=n&~i)?(r=zt(a),o=Lt):0!==u&&(r=zt(u),o=Lt);if(0===r)return 0;if(r=n&((0>(r=31-Vt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(zt(t),o<=Lt)return t;Lt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Vt(t)),r|=e[n],t&=~o;return r}function Ft(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Dt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ut(24&~t))?Dt(10,t):e;case 10:return 0===(e=Ut(192&~t))?Dt(8,t):e;case 8:return 0===(e=Ut(3584&~t))&&0===(e=Ut(4186112&~t))&&(e=512),e;case 2:return 0===(t=Ut(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Ut(e){return e&-e}function Bt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function $t(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Vt(t)]=n}var Vt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/Ht|0)|0},Wt=Math.log,Ht=Math.LN2,qt=a.unstable_UserBlockingPriority,Qt=a.unstable_runWithPriority,Gt=!0;function Kt(e,t,n,r){ze||Ie();var o=Xt,a=ze;ze=!0;try{Re(o,e,t,n,r)}finally{(ze=a)||Fe()}}function Yt(e,t,n,r){Qt(qt,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){var o;if(Gt)if((o=0==(4&t))&&0<at.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),at.push(e);else{var a=Jt(e,t,n,r);if(null===a)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(a,e,t,n,r),void at.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return it=mt(it,e,t,n,r,o),!0;case"dragenter":return ut=mt(ut,e,t,n,r,o),!0;case"mouseover":return lt=mt(lt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return ct.set(a,mt(ct.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,st.set(a,mt(st.get(a)||null,e,t,n,r,o)),!0}return!1}(a,e,t,n,r))return;ht(e,r)}Ar(e,t,r,null,n)}}}function Jt(e,t,n,r){var o=Ce(r);if(null!==(o=Jr(o))){var a=Ke(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Ye(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Ar(e,t,r,o,n),null}var Zt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Zt?Zt.value:Zt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function un(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var ln,cn,sn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=un(fn),pn=o({},fn,{view:0,detail:0}),hn=un(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:_n,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sn&&(sn&&"mousemove"===e.type?(ln=e.screenX-sn.screenX,cn=e.screenY-sn.screenY):cn=ln=0,sn=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:cn}}),vn=un(mn),gn=un(o({},mn,{dataTransfer:0})),yn=un(o({},pn,{relatedTarget:0})),bn=un(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=un(o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),xn=un(o({},fn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function _n(){return Cn}var On=un(o({},pn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:_n,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Pn=un(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),jn=un(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:_n})),Tn=un(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),An=un(o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Nn=[9,13,27,32],Rn=f&&"CompositionEvent"in window,In=null;f&&"documentMode"in document&&(In=document.documentMode);var Ln=f&&"TextEvent"in window&&!In,zn=f&&(!Rn||In&&8<In&&11>=In),Mn=String.fromCharCode(32),Fn=!1;function Dn(e,t){switch(e){case"keyup":return-1!==Nn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Bn=!1,$n={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!$n[e.type]:"textarea"===t}function Wn(e,t,n,r){Te(r),0<(t=Rr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,qn=null;function Qn(e){Cr(e,0)}function Gn(e){if(X(eo(e)))return e}function Kn(e,t){if("change"===e)return t}var Yn=!1;if(f){var Xn;if(f){var Jn="oninput"in document;if(!Jn){var Zn=document.createElement("div");Zn.setAttribute("oninput","return;"),Jn="function"==typeof Zn.oninput}Xn=Jn}else Xn=!1;Yn=Xn&&(!document.documentMode||9<document.documentMode)}function er(){Hn&&(Hn.detachEvent("onpropertychange",tr),qn=Hn=null)}function tr(e){if("value"===e.propertyName&&Gn(qn)){var t=[];if(Wn(t,qn,e,Ce(e)),e=Qn,ze)e(t);else{ze=!0;try{Ne(e,t)}finally{ze=!1,Fe()}}}}function nr(e,t,n){"focusin"===e?(er(),qn=n,(Hn=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(qn)}function or(e,t){if("click"===e)return Gn(t)}function ar(e,t){if("input"===e||"change"===e)return Gn(t)}var ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ur=Object.prototype.hasOwnProperty;function lr(e,t){if(ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ur.call(t,n[r])||!ir(e[n[r]],t[n[r]]))return!1;return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sr(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=J((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hr=f&&"documentMode"in document&&11>=document.documentMode,mr=null,vr=null,gr=null,yr=!1;function br(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==mr||mr!==J(r)||(r="selectionStart"in(r=mr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&lr(gr,r)||(gr=r,0<(r=Rr(vr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}It("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),It("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),It(Rt,2);for(var wr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),xr=0;xr<wr.length;xr++)Nt.set(wr[xr],0);s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Sr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),kr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Sr));function Er(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,u,l,c){if(Ge.apply(this,arguments),Ve){if(!Ve)throw Error(i(198));var s=We;Ve=!1,We=null,He||(He=!0,qe=s)}}(r,t,void 0,e),e.currentTarget=null}function Cr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var u=r[i],l=u.instance,c=u.currentTarget;if(u=u.listener,l!==a&&o.isPropagationStopped())break e;Er(o,u,c),a=l}else for(i=0;i<r.length;i++){if(l=(u=r[i]).instance,c=u.currentTarget,u=u.listener,l!==a&&o.isPropagationStopped())break e;Er(o,u,c),a=l}}}if(He)throw e=qe,He=!1,qe=null,e}function _r(e,t){var n=no(t),r=e+"__bubble";n.has(r)||(Tr(t,e,2,!1),n.add(r))}var Or="_reactListening"+Math.random().toString(36).slice(2);function Pr(e){e[Or]||(e[Or]=!0,u.forEach((function(t){kr.has(t)||jr(t,!1,e,null),jr(t,!0,e,null)})))}function jr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==r&&!t&&kr.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=no(a),u=e+"__"+(t?"capture":"bubble");i.has(u)||(t&&(o|=4),Tr(a,e,o,t),i.add(u))}function Tr(e,t,n,r){var o=Nt.get(t);switch(void 0===o?2:o){case 0:o=Kt;break;case 1:o=Yt;break;default:o=Xt}n=o.bind(null,t,n,e),o=void 0,!Ue||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Ar(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var u=r.stateNode.containerInfo;if(u===o||8===u.nodeType&&u.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var l=i.tag;if((3===l||4===l)&&((l=i.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;i=i.return}for(;null!==u;){if(null===(i=Jr(u)))return;if(5===(l=i.tag)||6===l){r=a=i;continue e}u=u.parentNode}}r=r.return}!function(e,t,n){if(Me)return e();Me=!0;try{Le(e,t,n)}finally{Me=!1,Fe()}}((function(){var r=a,o=Ce(n),i=[];e:{var u=At.get(e);if(void 0!==u){var l=dn,c=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":l=On;break;case"focusin":c="focus",l=yn;break;case"focusout":c="blur",l=yn;break;case"beforeblur":case"afterblur":l=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=jn;break;case Ot:case Pt:case jt:l=bn;break;case Tt:l=Tn;break;case"scroll":l=hn;break;case"wheel":l=An;break;case"copy":case"cut":case"paste":l=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Pn}var s=0!=(4&t),f=!s&&"scroll"===e,d=s?null!==u?u+"Capture":null:u;s=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=De(h,d))&&s.push(Nr(h,m,p))),f)break;h=h.return}0<s.length&&(u=new l(u,c,null,n,o),i.push({event:u,listeners:s}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(c=n.relatedTarget||n.fromElement)||!Jr(c)&&!c[Yr])&&(l||u)&&(u=o.window===o?o:(u=o.ownerDocument)?u.defaultView||u.parentWindow:window,l?(l=r,null!==(c=(c=n.relatedTarget||n.toElement)?Jr(c):null)&&(c!==(f=Ke(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(s=vn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=Pn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?u:eo(l),p=null==c?u:eo(c),(u=new s(m,h+"leave",l,n,o)).target=f,u.relatedTarget=p,m=null,Jr(o)===r&&((s=new s(d,h+"enter",c,n,o)).target=p,s.relatedTarget=f,m=s),f=m,l&&c)e:{for(d=c,h=0,p=s=l;p;p=Ir(p))h++;for(p=0,m=d;m;m=Ir(m))p++;for(;0<h-p;)s=Ir(s),h--;for(;0<p-h;)d=Ir(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=Ir(s),d=Ir(d)}s=null}else s=null;null!==l&&Lr(i,u,l,s,!1),null!==c&&null!==f&&Lr(i,f,c,s,!0)}if("select"===(l=(u=r?eo(r):window).nodeName&&u.nodeName.toLowerCase())||"input"===l&&"file"===u.type)var v=Kn;else if(Vn(u))if(Yn)v=ar;else{v=rr;var g=nr}else(l=u.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(v=or);switch(v&&(v=v(e,r))?Wn(i,v,n,o):(g&&g(e,u,r),"focusout"===e&&(g=u._wrapperState)&&g.controlled&&"number"===u.type&&oe(u,"number",u.value)),g=r?eo(r):window,e){case"focusin":(Vn(g)||"true"===g.contentEditable)&&(mr=g,vr=r,gr=null);break;case"focusout":gr=vr=mr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,br(i,n,o);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":br(i,n,o)}var y;if(Rn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Bn?Dn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(zn&&"ko"!==n.locale&&(Bn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Bn&&(y=nn()):(en="value"in(Zt=o)?Zt.value:Zt.textContent,Bn=!0)),0<(g=Rr(r,b)).length&&(b=new xn(b,e,null,n,o),i.push({event:b,listeners:g}),(y||null!==(y=Un(n)))&&(b.data=y))),(y=Ln?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(Fn=!0,Mn);case"textInput":return(e=t.data)===Mn&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Bn)return"compositionend"===e||!Rn&&Dn(e,t)?(e=nn(),tn=en=Zt=null,Bn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return zn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Rr(r,"onBeforeInput")).length&&(o=new xn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=y)}Cr(i,t)}))}function Nr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Rr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=De(e,n))&&r.unshift(Nr(e,a,o)),null!=(a=De(e,t))&&r.push(Nr(e,a,o))),e=e.return}return r}function Ir(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Lr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var u=n,l=u.alternate,c=u.stateNode;if(null!==l&&l===r)break;5===u.tag&&null!==c&&(u=c,o?null!=(l=De(n,a))&&i.unshift(Nr(n,l,u)):o||null!=(l=De(n,a))&&i.push(Nr(n,l,u))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function zr(){}var Mr=null,Fr=null;function Dr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Ur(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Br="function"==typeof setTimeout?setTimeout:void 0,$r="function"==typeof clearTimeout?clearTimeout:void 0;function Vr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Wr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Hr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var qr=0,Qr=Math.random().toString(36).slice(2),Gr="__reactFiber$"+Qr,Kr="__reactProps$"+Qr,Yr="__reactContainer$"+Qr,Xr="__reactEvents$"+Qr;function Jr(e){var t=e[Gr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Yr]||n[Gr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Hr(e);null!==e;){if(n=e[Gr])return n;e=Hr(e)}return t}n=(e=n).parentNode}return null}function Zr(e){return!(e=e[Gr]||e[Yr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function eo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function to(e){return e[Kr]||null}function no(e){var t=e[Xr];return void 0===t&&(t=e[Xr]=new Set),t}var ro=[],oo=-1;function ao(e){return{current:e}}function io(e){0>oo||(e.current=ro[oo],ro[oo]=null,oo--)}function uo(e,t){oo++,ro[oo]=e.current,e.current=t}var lo={},co=ao(lo),so=ao(!1),fo=lo;function po(e,t){var n=e.type.contextTypes;if(!n)return lo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function ho(e){return null!=e.childContextTypes}function mo(){io(so),io(co)}function vo(e,t,n){if(co.current!==lo)throw Error(i(168));uo(co,t),uo(so,n)}function go(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,Q(t)||"Unknown",a));return o({},n,r)}function yo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||lo,fo=co.current,uo(co,e),uo(so,so.current),!0}function bo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=go(e,t,fo),r.__reactInternalMemoizedMergedChildContext=e,io(so),io(co),uo(co,e)):io(so),uo(so,n)}var wo=null,xo=null,So=a.unstable_runWithPriority,ko=a.unstable_scheduleCallback,Eo=a.unstable_cancelCallback,Co=a.unstable_shouldYield,_o=a.unstable_requestPaint,Oo=a.unstable_now,Po=a.unstable_getCurrentPriorityLevel,jo=a.unstable_ImmediatePriority,To=a.unstable_UserBlockingPriority,Ao=a.unstable_NormalPriority,No=a.unstable_LowPriority,Ro=a.unstable_IdlePriority,Io={},Lo=void 0!==_o?_o:function(){},zo=null,Mo=null,Fo=!1,Do=Oo(),Uo=1e4>Do?Oo:function(){return Oo()-Do};function Bo(){switch(Po()){case jo:return 99;case To:return 98;case Ao:return 97;case No:return 96;case Ro:return 95;default:throw Error(i(332))}}function $o(e){switch(e){case 99:return jo;case 98:return To;case 97:return Ao;case 96:return No;case 95:return Ro;default:throw Error(i(332))}}function Vo(e,t){return e=$o(e),So(e,t)}function Wo(e,t,n){return e=$o(e),ko(e,t,n)}function Ho(){if(null!==Mo){var e=Mo;Mo=null,Eo(e)}qo()}function qo(){if(!Fo&&null!==zo){Fo=!0;var e=0;try{var t=zo;Vo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),zo=null}catch(t){throw null!==zo&&(zo=zo.slice(e+1)),ko(jo,Ho),t}finally{Fo=!1}}}var Qo=x.ReactCurrentBatchConfig;function Go(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ko=ao(null),Yo=null,Xo=null,Jo=null;function Zo(){Jo=Xo=Yo=null}function ea(e){var t=Ko.current;io(Ko),e.type._context._currentValue=t}function ta(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function na(e,t){Yo=e,Jo=Xo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ri=!0),e.firstContext=null)}function ra(e,t){if(Jo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Jo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Xo){if(null===Yo)throw Error(i(308));Xo=t,Yo.dependencies={lanes:0,firstContext:t,responders:null}}else Xo=Xo.next=t;return e._currentValue}var oa=!1;function aa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ia(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ua(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function la(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ca(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function sa(e,t,n,r){var a=e.updateQueue;oa=!1;var i=a.firstBaseUpdate,u=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var c=l,s=c.next;c.next=null,null===u?i=s:u.next=s,u=c;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==u&&(null===d?f.firstBaseUpdate=s:d.next=s,f.lastBaseUpdate=c)}}if(null!==i){for(d=a.baseState,u=0,f=s=c=null;;){l=i.lane;var p=i.eventTime;if((r&l)===l){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(l=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,l);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(l="function"==typeof(h=m.payload)?h.call(p,d,l):h))break e;d=o({},d,l);break e;case 2:oa=!0}}null!==i.callback&&(e.flags|=32,null===(l=a.effects)?a.effects=[i]:l.push(i))}else p={eventTime:p,lane:l,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(s=f=p,c=d):f=f.next=p,u|=l;if(null===(i=i.next)){if(null===(l=a.shared.pending))break;i=l.next,l.next=null,a.lastBaseUpdate=l,a.shared.pending=null}}null===f&&(c=d),a.baseState=c,a.firstBaseUpdate=s,a.lastBaseUpdate=f,Lu|=u,e.lanes=u,e.memoizedState=d}}function fa(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var da=(new r.Component).refs;function pa(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ha={isMounted:function(e){return!!(e=e._reactInternals)&&Ke(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=il(),o=ul(e),a=ua(r,o);a.payload=t,null!=n&&(a.callback=n),la(e,a),ll(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=il(),o=ul(e),a=ua(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),la(e,a),ll(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=il(),r=ul(e),o=ua(n,r);o.tag=2,null!=t&&(o.callback=t),la(e,o),ll(e,r,n)}};function ma(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(o,a))}function va(e,t,n){var r=!1,o=lo,a=t.contextType;return"object"==typeof a&&null!==a?a=ra(a):(o=ho(t)?fo:co.current,a=(r=null!=(r=t.contextTypes))?po(e,o):lo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ha,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ga(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ha.enqueueReplaceState(t,t.state,null)}function ya(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=da,aa(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=ra(a):(a=ho(t)?fo:co.current,o.context=po(e,a)),sa(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(pa(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ha.enqueueReplaceState(o,o.state,null),sa(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var ba=Array.isArray;function wa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===da&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function xa(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Sa(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Ul(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function u(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Wl(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=wa(e,t,n),r.return=e,r):((r=Bl(n.type,n.key,n.props,null,e.mode,r)).ref=wa(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Hl(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=$l(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Wl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return(n=Bl(t.type,t.key,t.props,null,e.mode,n)).ref=wa(e,null,t),n.return=e,n;case k:return(t=Hl(t,e.mode,n)).return=e,t}if(ba(t)||$(t))return(t=$l(t,e.mode,n,null)).return=e,t;xa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===o?n.type===E?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case k:return n.key===o?s(e,t,n,r):null}if(ba(n)||$(n))return null!==o?null:f(e,t,n,r,null);xa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case S:return e=e.get(null===r.key?n:r.key)||null,r.type===E?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case k:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(ba(r)||$(r))return f(t,e=e.get(n)||null,r,o,null);xa(t,r)}return null}function m(o,i,u,l){for(var c=null,s=null,f=i,m=i=0,v=null;null!==f&&m<u.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(o,f,u[m],l);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(o,f),i=a(g,i,m),null===s?c=g:s.sibling=g,s=g,f=v}if(m===u.length)return n(o,f),c;if(null===f){for(;m<u.length;m++)null!==(f=d(o,u[m],l))&&(i=a(f,i,m),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);m<u.length;m++)null!==(v=h(f,o,m,u[m],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),i=a(v,i,m),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(o,e)})),c}function v(o,u,l,c){var s=$(l);if("function"!=typeof s)throw Error(i(150));if(null==(l=s.call(l)))throw Error(i(151));for(var f=s=null,m=u,v=u=0,g=null,y=l.next();null!==m&&!y.done;v++,y=l.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(o,m,y.value,c);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(o,m),u=a(b,u,v),null===f?s=b:f.sibling=b,f=b,m=g}if(y.done)return n(o,m),s;if(null===m){for(;!y.done;v++,y=l.next())null!==(y=d(o,y.value,c))&&(u=a(y,u,v),null===f?s=y:f.sibling=y,f=y);return s}for(m=r(o,m);!y.done;v++,y=l.next())null!==(y=h(m,o,v,y.value,c))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),u=a(y,u,v),null===f?s=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(o,e)})),s}return function(e,r,a,l){var c="object"==typeof a&&null!==a&&a.type===E&&null===a.key;c&&(a=a.props.children);var s="object"==typeof a&&null!==a;if(s)switch(a.$$typeof){case S:e:{for(s=a.key,c=r;null!==c;){if(c.key===s){switch(c.tag){case 7:if(a.type===E){n(e,c.sibling),(r=o(c,a.props.children)).return=e,e=r;break e}break;default:if(c.elementType===a.type){n(e,c.sibling),(r=o(c,a.props)).ref=wa(e,c,a),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}a.type===E?((r=$l(a.props.children,e.mode,l,a.key)).return=e,e=r):((l=Bl(a.type,a.key,a.props,null,e.mode,l)).ref=wa(e,r,a),l.return=e,e=l)}return u(e);case k:e:{for(c=a.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Hl(a,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Wl(a,e.mode,l)).return=e,e=r),u(e);if(ba(a))return m(e,r,a,l);if($(a))return v(e,r,a,l);if(s&&xa(e,a),void 0===a&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,Q(e.type)||"Component"))}return n(e,r)}}var ka=Sa(!0),Ea=Sa(!1),Ca={},_a=ao(Ca),Oa=ao(Ca),Pa=ao(Ca);function ja(e){if(e===Ca)throw Error(i(174));return e}function Ta(e,t){switch(uo(Pa,t),uo(Oa,e),uo(_a,Ca),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}io(_a),uo(_a,t)}function Aa(){io(_a),io(Oa),io(Pa)}function Na(e){ja(Pa.current);var t=ja(_a.current),n=pe(t,e.type);t!==n&&(uo(Oa,e),uo(_a,n))}function Ra(e){Oa.current===e&&(io(_a),io(Oa))}var Ia=ao(0);function La(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var za=null,Ma=null,Fa=!1;function Da(e,t){var n=Fl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ua(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ba(e){if(Fa){var t=Ma;if(t){var n=t;if(!Ua(e,t)){if(!(t=Wr(n.nextSibling))||!Ua(e,t))return e.flags=-1025&e.flags|2,Fa=!1,void(za=e);Da(za,n)}za=e,Ma=Wr(t.firstChild)}else e.flags=-1025&e.flags|2,Fa=!1,za=e}}function $a(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;za=e}function Va(e){if(e!==za)return!1;if(!Fa)return $a(e),Fa=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Ur(t,e.memoizedProps))for(t=Ma;t;)Da(e,t),t=Wr(t.nextSibling);if($a(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ma=Wr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ma=null}}else Ma=za?Wr(e.stateNode.nextSibling):null;return!0}function Wa(){Ma=za=null,Fa=!1}var Ha=[];function qa(){for(var e=0;e<Ha.length;e++)Ha[e]._workInProgressVersionPrimary=null;Ha.length=0}var Qa=x.ReactCurrentDispatcher,Ga=x.ReactCurrentBatchConfig,Ka=0,Ya=null,Xa=null,Ja=null,Za=!1,ei=!1;function ti(){throw Error(i(321))}function ni(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ir(e[n],t[n]))return!1;return!0}function ri(e,t,n,r,o,a){if(Ka=a,Ya=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Qa.current=null===e||null===e.memoizedState?ji:Ti,e=n(r,o),ei){a=0;do{if(ei=!1,!(25>a))throw Error(i(301));a+=1,Ja=Xa=null,t.updateQueue=null,Qa.current=Ai,e=n(r,o)}while(ei)}if(Qa.current=Pi,t=null!==Xa&&null!==Xa.next,Ka=0,Ja=Xa=Ya=null,Za=!1,t)throw Error(i(300));return e}function oi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ja?Ya.memoizedState=Ja=e:Ja=Ja.next=e,Ja}function ai(){if(null===Xa){var e=Ya.alternate;e=null!==e?e.memoizedState:null}else e=Xa.next;var t=null===Ja?Ya.memoizedState:Ja.next;if(null!==t)Ja=t,Xa=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Xa=e).memoizedState,baseState:Xa.baseState,baseQueue:Xa.baseQueue,queue:Xa.queue,next:null},null===Ja?Ya.memoizedState=Ja=e:Ja=Ja.next=e}return Ja}function ii(e,t){return"function"==typeof t?t(e):t}function ui(e){var t=ai(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Xa,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var u=o.next;o.next=a.next,a.next=u}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var l=u=a=null,c=o;do{var s=c.lane;if((Ka&s)===s)null!==l&&(l=l.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),r=c.eagerReducer===e?c.eagerState:e(r,c.action);else{var f={lane:s,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(u=l=f,a=r):l=l.next=f,Ya.lanes|=s,Lu|=s}c=c.next}while(null!==c&&c!==o);null===l?a=r:l.next=u,ir(r,t.memoizedState)||(Ri=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function li(e){var t=ai(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var u=o=o.next;do{a=e(a,u.action),u=u.next}while(u!==o);ir(a,t.memoizedState)||(Ri=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function ci(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ka&e)===e)&&(t._workInProgressVersionPrimary=r,Ha.push(t))),e)return n(t._source);throw Ha.push(t),Error(i(350))}function si(e,t,n,r){var o=Ou;if(null===o)throw Error(i(349));var a=t._getVersion,u=a(t._source),l=Qa.current,c=l.useState((function(){return ci(o,t,n)})),s=c[1],f=c[0];c=Ja;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var v=Ya;return e.memoizedState={refs:p,source:t,subscribe:r},l.useEffect((function(){p.getSnapshot=n,p.setSnapshot=s;var e=a(t._source);if(!ir(u,e)){e=n(t._source),ir(f,e)||(s(e),e=ul(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,i=e;0<i;){var l=31-Vt(i),c=1<<l;r[l]|=e,i&=~c}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=ul(v);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ir(h,n)&&ir(m,t)&&ir(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ii,lastRenderedState:f}).dispatch=s=Oi.bind(null,Ya,e),c.queue=e,c.baseQueue=null,f=ci(o,t,n),c.memoizedState=c.baseState=f),f}function fi(e,t,n){return si(ai(),e,t,n)}function di(e){var t=oi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ii,lastRenderedState:e}).dispatch=Oi.bind(null,Ya,e),[t.memoizedState,e]}function pi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ya.updateQueue)?(t={lastEffect:null},Ya.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function hi(e){return e={current:e},oi().memoizedState=e}function mi(){return ai().memoizedState}function vi(e,t,n,r){var o=oi();Ya.flags|=e,o.memoizedState=pi(1|t,n,void 0,void 0===r?null:r)}function gi(e,t,n,r){var o=ai();r=void 0===r?null:r;var a=void 0;if(null!==Xa){var i=Xa.memoizedState;if(a=i.destroy,null!==r&&ni(r,i.deps))return void pi(t,n,a,r)}Ya.flags|=e,o.memoizedState=pi(1|t,n,a,r)}function yi(e,t){return vi(516,4,e,t)}function bi(e,t){return gi(516,4,e,t)}function wi(e,t){return gi(4,2,e,t)}function xi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Si(e,t,n){return n=null!=n?n.concat([e]):null,gi(4,2,xi.bind(null,t,e),n)}function ki(){}function Ei(e,t){var n=ai();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ni(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ci(e,t){var n=ai();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ni(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function _i(e,t){var n=Bo();Vo(98>n?98:n,(function(){e(!0)})),Vo(97<n?97:n,(function(){var n=Ga.transition;Ga.transition=1;try{e(!1),t()}finally{Ga.transition=n}}))}function Oi(e,t,n){var r=il(),o=ul(e),a={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Ya||null!==i&&i===Ya)ei=Za=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var u=t.lastRenderedState,l=i(u,n);if(a.eagerReducer=i,a.eagerState=l,ir(l,u))return}catch(e){}ll(e,o,r)}}var Pi={readContext:ra,useCallback:ti,useContext:ti,useEffect:ti,useImperativeHandle:ti,useLayoutEffect:ti,useMemo:ti,useReducer:ti,useRef:ti,useState:ti,useDebugValue:ti,useDeferredValue:ti,useTransition:ti,useMutableSource:ti,useOpaqueIdentifier:ti,unstable_isNewReconciler:!1},ji={readContext:ra,useCallback:function(e,t){return oi().memoizedState=[e,void 0===t?null:t],e},useContext:ra,useEffect:yi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,vi(4,2,xi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return vi(4,2,e,t)},useMemo:function(e,t){var n=oi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=oi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Oi.bind(null,Ya,e),[r.memoizedState,e]},useRef:hi,useState:di,useDebugValue:ki,useDeferredValue:function(e){var t=di(e),n=t[0],r=t[1];return yi((function(){var t=Ga.transition;Ga.transition=1;try{r(e)}finally{Ga.transition=t}}),[e]),n},useTransition:function(){var e=di(!1),t=e[0];return hi(e=_i.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=oi();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},si(r,e,t,n)},useOpaqueIdentifier:function(){if(Fa){var e=!1,t=function(e){return{$$typeof:L,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(qr++).toString(36))),Error(i(355))})),n=di(t)[1];return 0==(2&Ya.mode)&&(Ya.flags|=516,pi(5,(function(){n("r:"+(qr++).toString(36))}),void 0,null)),t}return di(t="r:"+(qr++).toString(36)),t},unstable_isNewReconciler:!1},Ti={readContext:ra,useCallback:Ei,useContext:ra,useEffect:bi,useImperativeHandle:Si,useLayoutEffect:wi,useMemo:Ci,useReducer:ui,useRef:mi,useState:function(){return ui(ii)},useDebugValue:ki,useDeferredValue:function(e){var t=ui(ii),n=t[0],r=t[1];return bi((function(){var t=Ga.transition;Ga.transition=1;try{r(e)}finally{Ga.transition=t}}),[e]),n},useTransition:function(){var e=ui(ii)[0];return[mi().current,e]},useMutableSource:fi,useOpaqueIdentifier:function(){return ui(ii)[0]},unstable_isNewReconciler:!1},Ai={readContext:ra,useCallback:Ei,useContext:ra,useEffect:bi,useImperativeHandle:Si,useLayoutEffect:wi,useMemo:Ci,useReducer:li,useRef:mi,useState:function(){return li(ii)},useDebugValue:ki,useDeferredValue:function(e){var t=li(ii),n=t[0],r=t[1];return bi((function(){var t=Ga.transition;Ga.transition=1;try{r(e)}finally{Ga.transition=t}}),[e]),n},useTransition:function(){var e=li(ii)[0];return[mi().current,e]},useMutableSource:fi,useOpaqueIdentifier:function(){return li(ii)[0]},unstable_isNewReconciler:!1},Ni=x.ReactCurrentOwner,Ri=!1;function Ii(e,t,n,r){t.child=null===e?Ea(t,null,n,r):ka(t,e.child,n,r)}function Li(e,t,n,r,o){n=n.render;var a=t.ref;return na(t,o),r=ri(e,t,n,r,a,o),null===e||Ri?(t.flags|=1,Ii(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Zi(e,t,o))}function zi(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||Dl(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Bl(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Mi(e,t,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:lr)(o,r)&&e.ref===t.ref)?Zi(e,t,a):(t.flags|=1,(e=Ul(i,r)).ref=t.ref,e.return=t,t.child=e)}function Mi(e,t,n,r,o,a){if(null!==e&&lr(e.memoizedProps,r)&&e.ref===t.ref){if(Ri=!1,0==(a&o))return t.lanes=e.lanes,Zi(e,t,a);0!=(16384&e.flags)&&(Ri=!0)}return Ui(e,t,n,r,a)}function Fi(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},vl(0,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},vl(0,e),null;t.memoizedState={baseLanes:0},vl(0,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,vl(0,r);return Ii(e,t,o,n),t.child}function Di(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ui(e,t,n,r,o){var a=ho(n)?fo:co.current;return a=po(t,a),na(t,o),n=ri(e,t,n,r,a,o),null===e||Ri?(t.flags|=1,Ii(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Zi(e,t,o))}function Bi(e,t,n,r,o){if(ho(n)){var a=!0;yo(t)}else a=!1;if(na(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),va(t,n,r),ya(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,u=t.memoizedProps;i.props=u;var l=i.context,c=n.contextType;c="object"==typeof c&&null!==c?ra(c):po(t,c=ho(n)?fo:co.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==r||l!==c)&&ga(t,i,r,c),oa=!1;var d=t.memoizedState;i.state=d,sa(t,r,i,o),l=t.memoizedState,u!==r||d!==l||so.current||oa?("function"==typeof s&&(pa(t,n,s,r),l=t.memoizedState),(u=oa||ma(t,n,u,r,d,l,c))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=l),i.props=r,i.state=l,i.context=c,r=u):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,ia(e,t),u=t.memoizedProps,c=t.type===t.elementType?u:Go(t.type,u),i.props=c,f=t.pendingProps,d=i.context,l="object"==typeof(l=n.contextType)&&null!==l?ra(l):po(t,l=ho(n)?fo:co.current);var p=n.getDerivedStateFromProps;(s="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==f||d!==l)&&ga(t,i,r,l),oa=!1,d=t.memoizedState,i.state=d,sa(t,r,i,o);var h=t.memoizedState;u!==f||d!==h||so.current||oa?("function"==typeof p&&(pa(t,n,p,r),h=t.memoizedState),(c=oa||ma(t,n,c,r,d,h,l))?(s||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,l),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=l,r=c):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return $i(e,t,n,r,a,o)}function $i(e,t,n,r,o,a){Di(e,t);var i=0!=(64&t.flags);if(!r&&!i)return o&&bo(t,n,!1),Zi(e,t,a);r=t.stateNode,Ni.current=t;var u=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=ka(t,e.child,null,a),t.child=ka(t,null,u,a)):Ii(e,t,u,a),t.memoizedState=r.state,o&&bo(t,n,!0),t.child}function Vi(e){var t=e.stateNode;t.pendingContext?vo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&vo(0,t.context,!1),Ta(e,t.containerInfo)}var Wi,Hi,qi,Qi={dehydrated:null,retryLane:0};function Gi(e,t,n){var r,o=t.pendingProps,a=Ia.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),uo(Ia,1&a),null===e?(void 0!==o.fallback&&Ba(t),e=o.children,a=o.fallback,i?(e=Ki(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qi,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ki(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qi,t.lanes=33554432,e):((n=Vl({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(o=function(e,t,n,r,o){var a=t.mode,i=e.child;e=i.sibling;var u={mode:"hidden",children:n};return 0==(2&a)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=u,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Ul(i,u),null!==e?r=Ul(e,r):(r=$l(r,a,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=Qi,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Ul(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Ki(e,t,n,r){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=Vl(t,o,0,null),n=$l(n,o,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function Yi(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ta(e.return,t)}function Xi(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o,i.lastEffect=a)}function Ji(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Ii(e,t,r.children,n),0!=(2&(r=Ia.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Yi(e,n);else if(19===e.tag)Yi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(uo(Ia,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===La(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Xi(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===La(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Xi(t,!0,n,null,a,t.lastEffect);break;case"together":Xi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Zi(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Lu|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Ul(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ul(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function eu(e,t){if(!Fa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function tu(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return ho(t.type)&&mo(),null;case 3:return Aa(),io(so),io(co),qa(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Va(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ra(t);var a=ja(Pa.current);if(n=t.type,null!==e&&null!=t.stateNode)Hi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=ja(_a.current),Va(t)){r=t.stateNode,n=t.type;var u=t.memoizedProps;switch(r[Gr]=t,r[Kr]=u,n){case"dialog":_r("cancel",r),_r("close",r);break;case"iframe":case"object":case"embed":_r("load",r);break;case"video":case"audio":for(e=0;e<Sr.length;e++)_r(Sr[e],r);break;case"source":_r("error",r);break;case"img":case"image":case"link":_r("error",r),_r("load",r);break;case"details":_r("toggle",r);break;case"input":ee(r,u),_r("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!u.multiple},_r("invalid",r);break;case"textarea":le(r,u),_r("invalid",r)}for(var c in ke(n,u),e=null,u)u.hasOwnProperty(c)&&(a=u[c],"children"===c?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):l.hasOwnProperty(c)&&null!=a&&"onScroll"===c&&_r("scroll",r));switch(n){case"input":Y(r),re(r,u,!0);break;case"textarea":Y(r),se(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=zr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(c=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(n,{is:r.is}):(e=c.createElement(n),"select"===n&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,n),e[Gr]=t,e[Kr]=r,Wi(e,t),t.stateNode=e,c=Ee(n,r),n){case"dialog":_r("cancel",e),_r("close",e),a=r;break;case"iframe":case"object":case"embed":_r("load",e),a=r;break;case"video":case"audio":for(a=0;a<Sr.length;a++)_r(Sr[a],e);a=r;break;case"source":_r("error",e),a=r;break;case"img":case"image":case"link":_r("error",e),_r("load",e),a=r;break;case"details":_r("toggle",e),a=r;break;case"input":ee(e,r),a=Z(e,r),_r("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=o({},r,{value:void 0}),_r("invalid",e);break;case"textarea":le(e,r),a=ue(e,r),_r("invalid",e);break;default:a=r}ke(n,a);var s=a;for(u in s)if(s.hasOwnProperty(u)){var f=s[u];"style"===u?xe(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&ve(e,f):"children"===u?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(l.hasOwnProperty(u)?null!=f&&"onScroll"===u&&_r("scroll",e):null!=f&&w(e,u,f,c))}switch(n){case"input":Y(e),re(e,r,!1);break;case"textarea":Y(e),se(e);break;case"option":null!=r.value&&e.setAttribute("value",""+G(r.value));break;case"select":e.multiple=!!r.multiple,null!=(u=r.value)?ie(e,!!r.multiple,u,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=zr)}Dr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)qi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=ja(Pa.current),ja(_a.current),Va(t)?(r=t.stateNode,n=t.memoizedProps,r[Gr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Gr]=t,t.stateNode=r)}return null;case 13:return io(Ia),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Va(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ia.current)?0===Nu&&(Nu=3):(0!==Nu&&3!==Nu||(Nu=4),null===Ou||0==(134217727&Lu)&&0==(134217727&zu)||dl(Ou,ju))),(r||n)&&(t.flags|=4),null);case 4:return Aa(),null===e&&Pr(t.stateNode.containerInfo),null;case 10:return ea(t),null;case 17:return ho(t.type)&&mo(),null;case 19:if(io(Ia),null===(r=t.memoizedState))return null;if(u=0!=(64&t.flags),null===(c=r.rendering))if(u)eu(r,!1);else{if(0!==Nu||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(c=La(e))){for(t.flags|=64,eu(r,!1),null!==(u=c.updateQueue)&&(t.updateQueue=u,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(u=n).flags&=2,u.nextEffect=null,u.firstEffect=null,u.lastEffect=null,null===(c=u.alternate)?(u.childLanes=0,u.lanes=e,u.child=null,u.memoizedProps=null,u.memoizedState=null,u.updateQueue=null,u.dependencies=null,u.stateNode=null):(u.childLanes=c.childLanes,u.lanes=c.lanes,u.child=c.child,u.memoizedProps=c.memoizedProps,u.memoizedState=c.memoizedState,u.updateQueue=c.updateQueue,u.type=c.type,e=c.dependencies,u.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return uo(Ia,1&Ia.current|2),t.child}e=e.sibling}null!==r.tail&&Uo()>Uu&&(t.flags|=64,u=!0,eu(r,!1),t.lanes=33554432)}else{if(!u)if(null!==(e=La(c))){if(t.flags|=64,u=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),eu(r,!0),null===r.tail&&"hidden"===r.tailMode&&!c.alternate&&!Fa)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Uo()-r.renderingStartTime>Uu&&1073741824!==n&&(t.flags|=64,u=!0,eu(r,!1),t.lanes=33554432);r.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=r.last)?n.sibling=c:t.child=c,r.last=c)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Uo(),n.sibling=null,t=Ia.current,uo(Ia,u?1&t|2:1&t),n):null;case 23:case 24:return gl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function nu(e){switch(e.tag){case 1:ho(e.type)&&mo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Aa(),io(so),io(co),qa(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Ra(e),null;case 13:return io(Ia),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return io(Ia),null;case 4:return Aa(),null;case 10:return ea(e),null;case 23:case 24:return gl(),null;default:return null}}function ru(e,t){try{var n="",r=t;do{n+=q(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ou(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Hi=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,ja(_a.current);var i,u=null;switch(n){case"input":a=Z(e,a),r=Z(e,r),u=[];break;case"option":a=ae(e,a),r=ae(e,r),u=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),u=[];break;case"textarea":a=ue(e,a),r=ue(e,r),u=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=zr)}for(f in ke(n,r),n=null,a)if(!r.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var c=a[f];for(i in c)c.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(l.hasOwnProperty(f)?u||(u=[]):(u=u||[]).push(f,null));for(f in r){var s=r[f];if(c=null!=a?a[f]:void 0,r.hasOwnProperty(f)&&s!==c&&(null!=s||null!=c))if("style"===f)if(c){for(i in c)!c.hasOwnProperty(i)||s&&s.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in s)s.hasOwnProperty(i)&&c[i]!==s[i]&&(n||(n={}),n[i]=s[i])}else n||(u||(u=[]),u.push(f,n)),n=s;else"dangerouslySetInnerHTML"===f?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(u=u||[]).push(f,s)):"children"===f?"string"!=typeof s&&"number"!=typeof s||(u=u||[]).push(f,""+s):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(l.hasOwnProperty(f)?(null!=s&&"onScroll"===f&&_r("scroll",e),u||c===s||(u=[])):"object"==typeof s&&null!==s&&s.$$typeof===L?s.toString():(u=u||[]).push(f,s))}n&&(u=u||[]).push("style",n);var f=u;(t.updateQueue=f)&&(t.flags|=4)}},qi=function(e,t,n,r){n!==r&&(t.flags|=4)};var au="function"==typeof WeakMap?WeakMap:Map;function iu(e,t,n){(n=ua(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wu||(Wu=!0,Hu=r),ou(0,t)},n}function uu(e,t,n){(n=ua(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ou(0,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===qu?qu=new Set([this]):qu.add(this),ou(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var lu="function"==typeof WeakSet?WeakSet:Set;function cu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Il(e,t)}else t.current=null}function su(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Go(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Vr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(i(163))}function fu(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Al(n,e),Tl(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Go(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&fa(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fa(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Dr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&xt(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(i(163))}function du(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function pu(e,t){if(xo&&"function"==typeof xo.onCommitFiberUnmount)try{xo.onCommitFiberUnmount(wo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Al(t,n);else{r=t;try{o()}catch(e){Il(r,e)}}n=n.next}while(n!==e)}break;case 1:if(cu(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Il(t,e)}break;case 5:cu(t);break;case 4:bu(e,t)}}function hu(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function mu(e){return 5===e.tag||3===e.tag||4===e.tag}function vu(e){e:{for(var t=e.return;null!==t;){if(mu(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||mu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?gu(e,n,t):yu(e,n,t)}function gu(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=zr));else if(4!==r&&null!==(e=e.child))for(gu(e,t,n),e=e.sibling;null!==e;)gu(e,t,n),e=e.sibling}function yu(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(yu(e,t,n),e=e.sibling;null!==e;)yu(e,t,n),e=e.sibling}function bu(e,t){for(var n,r,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var u=e,l=o,c=l;;)if(pu(u,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===l)break e;for(;null===c.sibling;){if(null===c.return||c.return===l)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}r?(u=n,l=o.stateNode,8===u.nodeType?u.parentNode.removeChild(l):u.removeChild(l)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(pu(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function wu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Kr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ee(e,o),t=Ee(e,r),o=0;o<a.length;o+=2){var u=a[o],l=a[o+1];"style"===u?xe(n,l):"dangerouslySetInnerHTML"===u?ve(n,l):"children"===u?ge(n,l):w(n,u,l,t)}switch(e){case"input":ne(n,r);break;case"textarea":ce(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ie(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,xt(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Du=Uo(),du(t.child,!0)),void xu(t);case 19:return void xu(t);case 17:return;case 23:case 24:return void du(t,null!==t.memoizedState)}throw Error(i(163))}function xu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new lu),t.forEach((function(t){var r=zl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Su(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var ku=Math.ceil,Eu=x.ReactCurrentDispatcher,Cu=x.ReactCurrentOwner,_u=0,Ou=null,Pu=null,ju=0,Tu=0,Au=ao(0),Nu=0,Ru=null,Iu=0,Lu=0,zu=0,Mu=0,Fu=null,Du=0,Uu=1/0;function Bu(){Uu=Uo()+500}var $u,Vu=null,Wu=!1,Hu=null,qu=null,Qu=!1,Gu=null,Ku=90,Yu=[],Xu=[],Ju=null,Zu=0,el=null,tl=-1,nl=0,rl=0,ol=null,al=!1;function il(){return 0!=(48&_u)?Uo():-1!==tl?tl:tl=Uo()}function ul(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Bo()?1:2;if(0===nl&&(nl=Iu),0!==Qo.transition){0!==rl&&(rl=null!==Fu?Fu.pendingLanes:0),e=nl;var t=4186112&~rl;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Bo(),e=Dt(0!=(4&_u)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),nl)}function ll(e,t,n){if(50<Zu)throw Zu=0,el=null,Error(i(185));if(null===(e=cl(e,t)))return null;$t(e,t,n),e===Ou&&(zu|=t,4===Nu&&dl(e,ju));var r=Bo();1===t?0!=(8&_u)&&0==(48&_u)?pl(e):(sl(e,n),0===_u&&(Bu(),Ho())):(0==(4&_u)||98!==r&&99!==r||(null===Ju?Ju=new Set([e]):Ju.add(e)),sl(e,n)),Fu=e}function cl(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function sl(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,u=e.pendingLanes;0<u;){var l=31-Vt(u),c=1<<l,s=a[l];if(-1===s){if(0==(c&r)||0!=(c&o)){s=t,zt(c);var f=Lt;a[l]=10<=f?s+250:6<=f?s+5e3:-1}}else s<=t&&(e.expiredLanes|=c);u&=~c}if(r=Mt(e,e===Ou?ju:0),t=Lt,0===r)null!==n&&(n!==Io&&Eo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Io&&Eo(n)}15===t?(n=pl.bind(null,e),null===zo?(zo=[n],Mo=ko(jo,qo)):zo.push(n),n=Io):n=14===t?Wo(99,pl.bind(null,e)):Wo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),fl.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function fl(e){if(tl=-1,rl=nl=0,0!=(48&_u))throw Error(i(327));var t=e.callbackNode;if(jl()&&e.callbackNode!==t)return null;var n=Mt(e,e===Ou?ju:0);if(0===n)return null;var r=n,o=_u;_u|=16;var a=wl();for(Ou===e&&ju===r||(Bu(),yl(e,r));;)try{kl();break}catch(t){bl(e,t)}if(Zo(),Eu.current=a,_u=o,null!==Pu?r=0:(Ou=null,ju=0,r=Nu),0!=(Iu&zu))yl(e,0);else if(0!==r){if(2===r&&(_u|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(n=Ft(e))&&(r=xl(e,n))),1===r)throw t=Ru,yl(e,0),dl(e,n),sl(e,Uo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:_l(e);break;case 3:if(dl(e,n),(62914560&n)===n&&10<(r=Du+500-Uo())){if(0!==Mt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){il(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Br(_l.bind(null,e),r);break}_l(e);break;case 4:if(dl(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var u=31-Vt(n);a=1<<u,(u=r[u])>o&&(o=u),n&=~a}if(n=o,10<(n=(120>(n=Uo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*ku(n/1960))-n)){e.timeoutHandle=Br(_l.bind(null,e),n);break}_l(e);break;case 5:_l(e);break;default:throw Error(i(329))}}return sl(e,Uo()),e.callbackNode===t?fl.bind(null,e):null}function dl(e,t){for(t&=~Mu,t&=~zu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Vt(t),r=1<<n;e[n]=-1,t&=~r}}function pl(e){if(0!=(48&_u))throw Error(i(327));if(jl(),e===Ou&&0!=(e.expiredLanes&ju)){var t=ju,n=xl(e,t);0!=(Iu&zu)&&(n=xl(e,t=Mt(e,t)))}else n=xl(e,t=Mt(e,0));if(0!==e.tag&&2===n&&(_u|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(t=Ft(e))&&(n=xl(e,t))),1===n)throw n=Ru,yl(e,0),dl(e,t),sl(e,Uo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,_l(e),sl(e,Uo()),null}function hl(e,t){var n=_u;_u|=1;try{return e(t)}finally{0===(_u=n)&&(Bu(),Ho())}}function ml(e,t){var n=_u;_u&=-2,_u|=8;try{return e(t)}finally{0===(_u=n)&&(Bu(),Ho())}}function vl(e,t){uo(Au,Tu),Tu|=t,Iu|=t}function gl(){Tu=Au.current,io(Au)}function yl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,$r(n)),null!==Pu)for(n=Pu.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&mo();break;case 3:Aa(),io(so),io(co),qa();break;case 5:Ra(r);break;case 4:Aa();break;case 13:case 19:io(Ia);break;case 10:ea(r);break;case 23:case 24:gl()}n=n.return}Ou=e,Pu=Ul(e.current,null),ju=Tu=Iu=t,Nu=0,Ru=null,Mu=zu=Lu=0}function bl(e,t){for(;;){var n=Pu;try{if(Zo(),Qa.current=Pi,Za){for(var r=Ya.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Za=!1}if(Ka=0,Ja=Xa=Ya=null,ei=!1,Cu.current=null,null===n||null===n.return){Nu=1,Ru=t,Pu=null;break}e:{var a=e,i=n.return,u=n,l=t;if(t=ju,u.flags|=2048,u.firstEffect=u.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var c=l;if(0==(2&u.mode)){var s=u.alternate;s?(u.updateQueue=s.updateQueue,u.memoizedState=s.memoizedState,u.lanes=s.lanes):(u.updateQueue=null,u.memoizedState=null)}var f=0!=(1&Ia.current),d=i;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var g=new Set;g.add(c),d.updateQueue=g}else v.add(c);if(0==(2&d.mode)){if(d.flags|=64,u.flags|=16384,u.flags&=-2981,1===u.tag)if(null===u.alternate)u.tag=17;else{var y=ua(-1,1);y.tag=2,la(u,y)}u.lanes|=1;break e}l=void 0,u=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new au,l=new Set,b.set(c,l)):void 0===(l=b.get(c))&&(l=new Set,b.set(c,l)),!l.has(u)){l.add(u);var w=Ll.bind(null,a,c,u);c.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);l=Error((Q(u.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Nu&&(Nu=2),l=ru(l,u),d=i;do{switch(d.tag){case 3:a=l,d.flags|=4096,t&=-t,d.lanes|=t,ca(d,iu(0,a,t));break e;case 1:a=l;var x=d.type,S=d.stateNode;if(0==(64&d.flags)&&("function"==typeof x.getDerivedStateFromError||null!==S&&"function"==typeof S.componentDidCatch&&(null===qu||!qu.has(S)))){d.flags|=4096,t&=-t,d.lanes|=t,ca(d,uu(d,a,t));break e}}d=d.return}while(null!==d)}Cl(n)}catch(e){t=e,Pu===n&&null!==n&&(Pu=n=n.return);continue}break}}function wl(){var e=Eu.current;return Eu.current=Pi,null===e?Pi:e}function xl(e,t){var n=_u;_u|=16;var r=wl();for(Ou===e&&ju===t||yl(e,t);;)try{Sl();break}catch(t){bl(e,t)}if(Zo(),_u=n,Eu.current=r,null!==Pu)throw Error(i(261));return Ou=null,ju=0,Nu}function Sl(){for(;null!==Pu;)El(Pu)}function kl(){for(;null!==Pu&&!Co();)El(Pu)}function El(e){var t=$u(e.alternate,e,Tu);e.memoizedProps=e.pendingProps,null===t?Cl(e):Pu=t,Cu.current=null}function Cl(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=tu(n,t,Tu)))return void(Pu=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Tu)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=nu(t)))return n.flags&=2047,void(Pu=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Pu=t);Pu=t=e}while(null!==t);0===Nu&&(Nu=5)}function _l(e){var t=Bo();return Vo(99,Ol.bind(null,e,t)),null}function Ol(e,t){do{jl()}while(null!==Gu);if(0!=(48&_u))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var u=e.eventTimes,l=e.expirationTimes;0<a;){var c=31-Vt(a),s=1<<c;o[c]=0,u[c]=-1,l[c]=-1,a&=~s}if(null!==Ju&&0==(24&r)&&Ju.has(e)&&Ju.delete(e),e===Ou&&(Pu=Ou=null,ju=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=_u,_u|=32,Cu.current=null,Mr=Gt,pr(u=dr())){if("selectionStart"in u)l={start:u.selectionStart,end:u.selectionEnd};else e:if(l=(l=u.ownerDocument)&&l.defaultView||window,(s=l.getSelection&&l.getSelection())&&0!==s.rangeCount){l=s.anchorNode,a=s.anchorOffset,c=s.focusNode,s=s.focusOffset;try{l.nodeType,c.nodeType}catch(e){l=null;break e}var f=0,d=-1,p=-1,h=0,m=0,v=u,g=null;t:for(;;){for(var y;v!==l||0!==a&&3!==v.nodeType||(d=f+a),v!==c||0!==s&&3!==v.nodeType||(p=f+s),3===v.nodeType&&(f+=v.nodeValue.length),null!==(y=v.firstChild);)g=v,v=y;for(;;){if(v===u)break t;if(g===l&&++h===a&&(d=f),g===c&&++m===s&&(p=f),null!==(y=v.nextSibling))break;g=(v=g).parentNode}v=y}l=-1===d||-1===p?null:{start:d,end:p}}else l=null;l=l||{start:0,end:0}}else l=null;Fr={focusedElem:u,selectionRange:l},Gt=!1,ol=null,al=!1,Vu=r;do{try{Pl()}catch(e){if(null===Vu)throw Error(i(330));Il(Vu,e),Vu=Vu.nextEffect}}while(null!==Vu);ol=null,Vu=r;do{try{for(u=e;null!==Vu;){var b=Vu.flags;if(16&b&&ge(Vu.stateNode,""),128&b){var w=Vu.alternate;if(null!==w){var x=w.ref;null!==x&&("function"==typeof x?x(null):x.current=null)}}switch(1038&b){case 2:vu(Vu),Vu.flags&=-3;break;case 6:vu(Vu),Vu.flags&=-3,wu(Vu.alternate,Vu);break;case 1024:Vu.flags&=-1025;break;case 1028:Vu.flags&=-1025,wu(Vu.alternate,Vu);break;case 4:wu(Vu.alternate,Vu);break;case 8:bu(u,l=Vu);var S=l.alternate;hu(l),null!==S&&hu(S)}Vu=Vu.nextEffect}}catch(e){if(null===Vu)throw Error(i(330));Il(Vu,e),Vu=Vu.nextEffect}}while(null!==Vu);if(x=Fr,w=dr(),b=x.focusedElem,u=x.selectionRange,w!==b&&b&&b.ownerDocument&&fr(b.ownerDocument.documentElement,b)){null!==u&&pr(b)&&(w=u.start,void 0===(x=u.end)&&(x=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(x,b.value.length)):(x=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(x=x.getSelection(),l=b.textContent.length,S=Math.min(u.start,l),u=void 0===u.end?S:Math.min(u.end,l),!x.extend&&S>u&&(l=u,u=S,S=l),l=sr(b,S),a=sr(b,u),l&&a&&(1!==x.rangeCount||x.anchorNode!==l.node||x.anchorOffset!==l.offset||x.focusNode!==a.node||x.focusOffset!==a.offset)&&((w=w.createRange()).setStart(l.node,l.offset),x.removeAllRanges(),S>u?(x.addRange(w),x.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),x.addRange(w))))),w=[];for(x=b;x=x.parentNode;)1===x.nodeType&&w.push({element:x,left:x.scrollLeft,top:x.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(x=w[b]).element.scrollLeft=x.left,x.element.scrollTop=x.top}Gt=!!Mr,Fr=Mr=null,e.current=n,Vu=r;do{try{for(b=e;null!==Vu;){var k=Vu.flags;if(36&k&&fu(b,Vu.alternate,Vu),128&k){w=void 0;var E=Vu.ref;if(null!==E){var C=Vu.stateNode;switch(Vu.tag){case 5:w=C;break;default:w=C}"function"==typeof E?E(w):E.current=w}}Vu=Vu.nextEffect}}catch(e){if(null===Vu)throw Error(i(330));Il(Vu,e),Vu=Vu.nextEffect}}while(null!==Vu);Vu=null,Lo(),_u=o}else e.current=n;if(Qu)Qu=!1,Gu=e,Ku=t;else for(Vu=r;null!==Vu;)t=Vu.nextEffect,Vu.nextEffect=null,8&Vu.flags&&((k=Vu).sibling=null,k.stateNode=null),Vu=t;if(0===(r=e.pendingLanes)&&(qu=null),1===r?e===el?Zu++:(Zu=0,el=e):Zu=0,n=n.stateNode,xo&&"function"==typeof xo.onCommitFiberRoot)try{xo.onCommitFiberRoot(wo,n,void 0,64==(64&n.current.flags))}catch(e){}if(sl(e,Uo()),Wu)throw Wu=!1,e=Hu,Hu=null,e;return 0!=(8&_u)||Ho(),null}function Pl(){for(;null!==Vu;){var e=Vu.alternate;al||null===ol||(0!=(8&Vu.flags)?Ze(Vu,ol)&&(al=!0):13===Vu.tag&&Su(e,Vu)&&Ze(Vu,ol)&&(al=!0));var t=Vu.flags;0!=(256&t)&&su(e,Vu),0==(512&t)||Qu||(Qu=!0,Wo(97,(function(){return jl(),null}))),Vu=Vu.nextEffect}}function jl(){if(90!==Ku){var e=97<Ku?97:Ku;return Ku=90,Vo(e,Nl)}return!1}function Tl(e,t){Yu.push(t,e),Qu||(Qu=!0,Wo(97,(function(){return jl(),null})))}function Al(e,t){Xu.push(t,e),Qu||(Qu=!0,Wo(97,(function(){return jl(),null})))}function Nl(){if(null===Gu)return!1;var e=Gu;if(Gu=null,0!=(48&_u))throw Error(i(331));var t=_u;_u|=32;var n=Xu;Xu=[];for(var r=0;r<n.length;r+=2){var o=n[r],a=n[r+1],u=o.destroy;if(o.destroy=void 0,"function"==typeof u)try{u()}catch(e){if(null===a)throw Error(i(330));Il(a,e)}}for(n=Yu,Yu=[],r=0;r<n.length;r+=2){o=n[r],a=n[r+1];try{var l=o.create;o.destroy=l()}catch(e){if(null===a)throw Error(i(330));Il(a,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return _u=t,Ho(),!0}function Rl(e,t,n){la(e,t=iu(0,t=ru(n,t),1)),t=il(),null!==(e=cl(e,1))&&($t(e,1,t),sl(e,t))}function Il(e,t){if(3===e.tag)Rl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Rl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===qu||!qu.has(r))){var o=uu(n,e=ru(t,e),1);if(la(n,o),o=il(),null!==(n=cl(n,1)))$t(n,1,o),sl(n,o);else if("function"==typeof r.componentDidCatch&&(null===qu||!qu.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Ll(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=il(),e.pingedLanes|=e.suspendedLanes&n,Ou===e&&(ju&n)===n&&(4===Nu||3===Nu&&(62914560&ju)===ju&&500>Uo()-Du?yl(e,0):Mu|=n),sl(e,t)}function zl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Bo()?1:2:(0===nl&&(nl=Iu),0===(t=Ut(62914560&~nl))&&(t=4194304))),n=il(),null!==(e=cl(e,t))&&($t(e,t,n),sl(e,n))}function Ml(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Fl(e,t,n,r){return new Ml(e,t,n,r)}function Dl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ul(e,t){var n=e.alternate;return null===n?((n=Fl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Bl(e,t,n,r,o,a){var u=2;if(r=e,"function"==typeof e)Dl(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case E:return $l(n.children,o,a,t);case z:u=8,o|=16;break;case C:u=8,o|=1;break;case _:return(e=Fl(12,n,t,8|o)).elementType=_,e.type=_,e.lanes=a,e;case T:return(e=Fl(13,n,t,o)).type=T,e.elementType=T,e.lanes=a,e;case A:return(e=Fl(19,n,t,o)).elementType=A,e.lanes=a,e;case M:return Vl(n,o,a,t);case F:return(e=Fl(24,n,t,o)).elementType=F,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case O:u=10;break e;case P:u=9;break e;case j:u=11;break e;case N:u=14;break e;case R:u=16,r=null;break e;case I:u=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Fl(u,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function $l(e,t,n,r){return(e=Fl(7,e,r,t)).lanes=n,e}function Vl(e,t,n,r){return(e=Fl(23,e,r,t)).elementType=M,e.lanes=n,e}function Wl(e,t,n){return(e=Fl(6,e,null,t)).lanes=n,e}function Hl(e,t,n){return(t=Fl(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function ql(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Bt(0),this.expirationTimes=Bt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Bt(0),this.mutableSourceEagerHydrationData=null}function Ql(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Gl(e,t,n,r){var o=t.current,a=il(),u=ul(o);e:if(n){t:{if(Ke(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(ho(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(i(171))}if(1===n.tag){var c=n.type;if(ho(c)){n=go(n,c,l);break e}}n=l}else n=lo;return null===t.context?t.context=n:t.pendingContext=n,(t=ua(a,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),la(o,t),ll(o,u,a),u}function Kl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Yl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Xl(e,t){Yl(e,t),(e=e.alternate)&&Yl(e,t)}function Jl(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new ql(e,t,null!=n&&!0===n.hydrate),t=Fl(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,aa(t),e[Yr]=n.current,Pr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Zl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ec(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var u=o;o=function(){var e=Kl(i);u.call(e)}}Gl(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Jl(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var l=o;o=function(){var e=Kl(i);l.call(e)}}ml((function(){Gl(t,i,e,o)}))}return Kl(i)}function tc(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Zl(t))throw Error(i(200));return Ql(e,t,null,n)}$u=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||so.current)Ri=!0;else{if(0==(n&r)){switch(Ri=!1,t.tag){case 3:Vi(t),Wa();break;case 5:Na(t);break;case 1:ho(t.type)&&yo(t);break;case 4:Ta(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;uo(Ko,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Gi(e,t,n):(uo(Ia,1&Ia.current),null!==(t=Zi(e,t,n))?t.sibling:null);uo(Ia,1&Ia.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Ji(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),uo(Ia,Ia.current),r)break;return null;case 23:case 24:return t.lanes=0,Fi(e,t,n)}return Zi(e,t,n)}Ri=0!=(16384&e.flags)}else Ri=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=po(t,co.current),na(t,n),o=ri(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ho(r)){var a=!0;yo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,aa(t);var u=r.getDerivedStateFromProps;"function"==typeof u&&pa(t,r,u,e),o.updater=ha,t.stateNode=o,o._reactInternals=t,ya(t,r,e,n),t=$i(null,t,r,!0,a,n)}else t.tag=0,Ii(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"==typeof e)return Dl(e)?1:0;if(null!=e){if((e=e.$$typeof)===j)return 11;if(e===N)return 14}return 2}(o),e=Go(o,e),a){case 0:t=Ui(null,t,o,e,n);break e;case 1:t=Bi(null,t,o,e,n);break e;case 11:t=Li(null,t,o,e,n);break e;case 14:t=zi(null,t,o,Go(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ui(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 1:return r=t.type,o=t.pendingProps,Bi(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 3:if(Vi(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ia(e,t),sa(t,r,null,n),(r=t.memoizedState.element)===o)Wa(),t=Zi(e,t,n);else{if((a=(o=t.stateNode).hydrate)&&(Ma=Wr(t.stateNode.containerInfo.firstChild),za=t,a=Fa=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Ha.push(a);for(n=Ea(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ii(e,t,r,n),Wa();t=t.child}return t;case 5:return Na(t),null===e&&Ba(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,u=o.children,Ur(r,o)?u=null:null!==a&&Ur(r,a)&&(t.flags|=16),Di(e,t),Ii(e,t,u,n),t.child;case 6:return null===e&&Ba(t),null;case 13:return Gi(e,t,n);case 4:return Ta(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ka(t,null,r,n):Ii(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Li(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 7:return Ii(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ii(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,u=t.memoizedProps,a=o.value;var l=t.type._context;if(uo(Ko,l._currentValue),l._currentValue=a,null!==u)if(l=u.value,0==(a=ir(l,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,a):1073741823))){if(u.children===o.children&&!so.current){t=Zi(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){u=l.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&a)){1===l.tag&&((s=ua(-1,n&-n)).tag=2,la(l,s)),l.lanes|=n,null!==(s=l.alternate)&&(s.lanes|=n),ta(l.return,n),c.lanes|=n;break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}Ii(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,na(t,n),r=r(o=ra(o,a.unstable_observedBits)),t.flags|=1,Ii(e,t,r,n),t.child;case 14:return a=Go(o=t.type,t.pendingProps),zi(e,t,o,a=Go(o.type,a),r,n);case 15:return Mi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Go(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,ho(r)?(e=!0,yo(t)):e=!1,na(t,n),va(t,r,o),ya(t,r,o,n),$i(null,t,r,!0,e,n);case 19:return Ji(e,t,n);case 23:case 24:return Fi(e,t,n)}throw Error(i(156,t.tag))},Jl.prototype.render=function(e){Gl(e,this._internalRoot,null,null)},Jl.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Gl(null,e,null,(function(){t[Yr]=null}))},et=function(e){13===e.tag&&(ll(e,4,il()),Xl(e,4))},tt=function(e){13===e.tag&&(ll(e,67108864,il()),Xl(e,67108864))},nt=function(e){if(13===e.tag){var t=il(),n=ul(e);ll(e,n,t),Xl(e,n)}},rt=function(e,t){return t()},_e=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=to(r);if(!o)throw Error(i(90));X(r),ne(r,o)}}}break;case"textarea":ce(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Ne=hl,Re=function(e,t,n,r,o){var a=_u;_u|=4;try{return Vo(98,e.bind(null,t,n,r,o))}finally{0===(_u=a)&&(Bu(),Ho())}},Ie=function(){0==(49&_u)&&(function(){if(null!==Ju){var e=Ju;Ju=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,sl(e,Uo())}))}Ho()}(),jl())},Le=function(e,t){var n=_u;_u|=2;try{return e(t)}finally{0===(_u=n)&&(Bu(),Ho())}};var nc={Events:[Zr,eo,to,Te,Ae,jl,{current:!1}]},rc={findFiberByHostInstance:Jr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},oc={bundleType:rc.bundleType,version:rc.version,rendererPackageName:rc.rendererPackageName,rendererConfig:rc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:x.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Je(e))?null:e.stateNode},findFiberByHostInstance:rc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ac=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ac.isDisabled&&ac.supportsFiber)try{wo=ac.inject(oc),xo=ac}catch(me){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nc,t.createPortal=tc,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return null===(e=Je(t))?null:e.stateNode},t.flushSync=function(e,t){var n=_u;if(0!=(48&n))return e(t);_u|=1;try{if(e)return Vo(99,e.bind(null,t))}finally{_u=n,Ho()}},t.hydrate=function(e,t,n){if(!Zl(t))throw Error(i(200));return ec(null,e,t,!0,n)},t.render=function(e,t,n){if(!Zl(t))throw Error(i(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zl(e))throw Error(i(40));return!!e._reactRootContainer&&(ml((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[Yr]=null}))})),!0)},t.unstable_batchedUpdates=hl,t.unstable_createPortal=function(e,t){return tc(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zl(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return ec(e,t,n,!1,r)},t.version="17.0.1"},3961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(7799)},5439:e=>{"use strict";var t=Array.isArray,n=Object.keys,r=Object.prototype.hasOwnProperty,o="undefined"!=typeof Element;function a(e,i){if(e===i)return!0;if(e&&i&&"object"==typeof e&&"object"==typeof i){var u,l,c,s=t(e),f=t(i);if(s&&f){if((l=e.length)!=i.length)return!1;for(u=l;0!=u--;)if(!a(e[u],i[u]))return!1;return!0}if(s!=f)return!1;var d=e instanceof Date,p=i instanceof Date;if(d!=p)return!1;if(d&&p)return e.getTime()==i.getTime();var h=e instanceof RegExp,m=i instanceof RegExp;if(h!=m)return!1;if(h&&m)return e.toString()==i.toString();var v=n(e);if((l=v.length)!==n(i).length)return!1;for(u=l;0!=u--;)if(!r.call(i,v[u]))return!1;if(o&&e instanceof Element&&i instanceof Element)return e===i;for(u=l;0!=u--;)if(!("_owner"===(c=v[u])&&e.$$typeof||a(e[c],i[c])))return!1;return!0}return e!=e&&i!=i}e.exports=function(e,t){try{return a(e,t)}catch(e){if(e.message&&e.message.match(/stack|recursion/i)||-2146828260===e.number)return console.warn("Warning: react-fast-compare does not handle circular references.",e.name,e.message),!1;throw e}}},7184:(e,t,n)=>{"use strict";var r,o=(r=n(9526))&&"object"==typeof r&&"default"in r?r.default:r;function a(e){return a.warnAboutHMRDisabled&&(a.warnAboutHMRDisabled=!0,console.error("React-Hot-Loader: misconfiguration detected, using production version in non-production environment."),console.error("React-Hot-Loader: Hot Module Replacement is not enabled.")),o.Children.only(e.children)}a.warnAboutHMRDisabled=!1},9213:(e,t,n)=>{"use strict";n(7184)},9275:(e,t)=>{t.w=function(e){return e}},4821:(e,t)=>{"use strict";var n=60103,r=60106,o=60107,a=60108,i=60114,u=60109,l=60110,c=60112,s=60113,f=60120,d=60115,p=60116,h=60121,m=60122,v=60117,g=60129,y=60131;if("function"==typeof Symbol&&Symbol.for){var b=Symbol.for;n=b("react.element"),r=b("react.portal"),o=b("react.fragment"),a=b("react.strict_mode"),i=b("react.profiler"),u=b("react.provider"),l=b("react.context"),c=b("react.forward_ref"),s=b("react.suspense"),f=b("react.suspense_list"),d=b("react.memo"),p=b("react.lazy"),h=b("react.block"),m=b("react.server.block"),v=b("react.fundamental"),g=b("react.debug_trace_mode"),y=b("react.legacy_hidden")}t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===i||e===g||e===a||e===s||e===f||e===y||"object"==typeof e&&null!==e&&(e.$$typeof===p||e.$$typeof===d||e.$$typeof===u||e.$$typeof===l||e.$$typeof===c||e.$$typeof===v||e.$$typeof===h||e[0]===m)},t.typeOf=function(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case o:case i:case a:case s:case f:return e;default:switch(e=e&&e.$$typeof){case l:case c:case p:case d:case u:return e;default:return t}}case r:return t}}}},338:(e,t,n)=>{"use strict";e.exports=n(4821)},7913:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=(n&&Symbol.for("react.suspense_list"),n?Symbol.for("react.memo"):60115),m=n?Symbol.for("react.lazy"):60116;n&&Symbol.for("react.block"),n&&Symbol.for("react.fundamental"),n&&Symbol.for("react.responder"),n&&Symbol.for("react.scope");function v(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case s:case f:case a:case u:case i:case p:return e;default:switch(e=e&&e.$$typeof){case c:case d:case m:case h:case l:return e;default:return t}}case o:return t}}}t.isContextConsumer=function(e){return v(e)===c}},8206:(e,t,n)=>{"use strict";e.exports=n(7913)},3534:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},8136:(e,t,n)=>{var r=n(3534);e.exports=function e(t,n,o){return r(n)||(o=n||o,n=[]),o=o||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(t,n):r(t)?function(t,n,r){for(var o=[],a=0;a<t.length;a++)o.push(e(t[a],n,r).source);return s(new RegExp("(?:"+o.join("|")+")",f(r)),n)}(t,n,o):function(e,t,n){return d(a(e,n),t,n)}(t,n,o)},e.exports.parse=a,e.exports.compile=function(e,t){return u(a(e,t),t)},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,i=0,u="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(u+=e.slice(i,p),i=p+f.length,d)u+=d[1];else{var h=e[i],m=n[2],v=n[3],g=n[4],y=n[5],b=n[6],w=n[7];u&&(r.push(u),u="");var x=null!=m&&null!=h&&h!==m,S="+"===b||"*"===b,k="?"===b||"*"===b,E=n[2]||s,C=g||y;r.push({name:v||a++,prefix:m||"",delimiter:E,optional:k,repeat:S,partial:x,asterisk:!!w,pattern:C?c(C):w?".*":"[^"+l(E)+"]+?"})}}return i<e.length&&(u+=e.substr(i)),u&&r.push(u),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function u(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var a="",u=t||{},l=(o||{}).pretty?i:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var f,d=u[s.name];if(null==d){if(s.optional){s.partial&&(a+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(d)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=l(d[p]),!n[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");a+=(0===p?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(d),!n[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');a+=s.prefix+f}}else a+=s}return a}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,a=!1!==n.end,i="",u=0;u<e.length;u++){var c=e[u];if("string"==typeof c)i+=l(c);else{var d=l(c.prefix),p="(?:"+c.pattern+")";t.push(c),c.repeat&&(p+="(?:"+d+p+")*"),i+=p=c.optional?c.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=l(n.delimiter||"/"),m=i.slice(-h.length)===h;return o||(i=(m?i.slice(0,-h.length):i)+"(?:"+h+"(?=$))?"),i+=a?"$":o&&m?"":"(?="+h+"|$)",s(new RegExp("^"+i,f(n)),t)}},2346:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for;n&&Symbol.for("react.element"),n&&Symbol.for("react.portal"),n&&Symbol.for("react.fragment"),n&&Symbol.for("react.strict_mode"),n&&Symbol.for("react.profiler"),n&&Symbol.for("react.provider"),n&&Symbol.for("react.context"),n&&Symbol.for("react.async_mode"),n&&Symbol.for("react.concurrent_mode"),n&&Symbol.for("react.forward_ref"),n&&Symbol.for("react.suspense"),n&&Symbol.for("react.suspense_list"),n&&Symbol.for("react.memo"),n&&Symbol.for("react.lazy"),n&&Symbol.for("react.block"),n&&Symbol.for("react.fundamental"),n&&Symbol.for("react.responder"),n&&Symbol.for("react.scope")},1948:(e,t,n)=>{"use strict";n(2346)},2455:(e,t,n)=>{"use strict";n(9813);var r=n(9526),o=60103;if(t.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var a=Symbol.for;o=a("react.element"),t.Fragment=a("react.fragment")}var i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,u=Object.prototype.hasOwnProperty,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,a={},c=null,s=null;for(r in void 0!==n&&(c=""+n),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(s=t.ref),t)u.call(t,r)&&!l.hasOwnProperty(r)&&(a[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===a[r]&&(a[r]=t[r]);return{$$typeof:o,type:e,key:c,ref:s,props:a,_owner:i.current}}t.jsx=c,t.jsxs=c},3218:(e,t,n)=>{"use strict";var r=n(9813),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,u=60110,l=60112;t.Suspense=60113;var c=60115,s=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),u=f("react.context"),l=f("react.forward_ref"),t.Suspense=f("react.suspense"),c=f("react.memo"),s=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var b=y.prototype=new g;b.constructor=y,r(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},x=Object.prototype.hasOwnProperty,S={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,a={},i=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(i=""+t.key),t)x.call(t,r)&&!S.hasOwnProperty(r)&&(a[r]=t[r]);var l=arguments.length-2;if(1===l)a.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];a.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===a[r]&&(a[r]=l[r]);return{$$typeof:o,type:e,key:i,ref:u,props:a,_owner:w.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var C=/\/+/g;function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function O(e,t,n,r,i){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var l=!1;if(null===e)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case o:case a:l=!0}}if(l)return i=i(l=e),e=""===r?"."+_(l,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(C,"$&/")+"/"),O(i,t,n,"",(function(e){return e}))):null!=i&&(E(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||l&&l.key===i.key?"":(""+i.key).replace(C,"$&/")+"/")+e)),t.push(i)),1;if(l=0,r=""===r?".":r+":",Array.isArray(e))for(var c=0;c<e.length;c++){var s=r+_(u=e[c],c);l+=O(u,t,n,s,i)}else if("function"==typeof(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=s.call(e),c=0;!(u=e.next()).done;)l+=O(u=u.value,t,n,s=r+_(u,c++),i);else if("object"===u)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function P(e,t,n){if(null==e)return e;var r=[],o=0;return O(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function j(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var T={current:null};function A(){var e=T.current;if(null===e)throw Error(p(321));return e}var N={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=N,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var a=r({},e.props),i=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)x.call(t,s)&&!S.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:o,type:e.type,key:i,ref:u,props:a,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:u,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:s,_payload:{_status:-1,_result:e},_init:j}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return A().useCallback(e,t)},t.useContext=function(e,t){return A().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return A().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return A().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return A().useLayoutEffect(e,t)},t.useMemo=function(e,t){return A().useMemo(e,t)},t.useReducer=function(e,t,n){return A().useReducer(e,t,n)},t.useRef=function(e){return A().useRef(e)},t.useState=function(e){return A().useState(e)},t.version="17.0.2"},9526:(e,t,n)=>{"use strict";e.exports=n(3218)},7557:(e,t,n)=>{"use strict";e.exports=n(2455)},1196:(e,t)=>{"use strict";var n,r,o,a;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var u=Date,l=u.now();t.unstable_now=function(){return u.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,s=null,f=function(){if(null!==c)try{var e=t.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==c?setTimeout(n,0,e):(c=e,setTimeout(f,0))},r=function(e,t){s=setTimeout(e,t)},o=function(){clearTimeout(s)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,v=null,g=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,x=w.port2;w.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();b=e+y;try{v(!0,e)?x.postMessage(null):(m=!1,v=null)}catch(e){throw x.postMessage(null),e}}else m=!1},n=function(e){v=e,m||(m=!0,x.postMessage(null))},r=function(e,n){g=d((function(){e(t.unstable_now())}),n)},o=function(){p(g),g=-1}}function S(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<C(o,t)))break e;e[r]=t,e[n]=o,n=r}}function k(e){return void 0===(e=e[0])?null:e}function E(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],u=a+1,l=e[u];if(void 0!==i&&0>C(i,n))void 0!==l&&0>C(l,i)?(e[r]=l,e[u]=n,r=u):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==l&&0>C(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var _=[],O=[],P=1,j=null,T=3,A=!1,N=!1,R=!1;function I(e){for(var t=k(O);null!==t;){if(null===t.callback)E(O);else{if(!(t.startTime<=e))break;E(O),t.sortIndex=t.expirationTime,S(_,t)}t=k(O)}}function L(e){if(R=!1,I(e),!N)if(null!==k(_))N=!0,n(z);else{var t=k(O);null!==t&&r(L,t.startTime-e)}}function z(e,n){N=!1,R&&(R=!1,o()),A=!0;var a=T;try{for(I(n),j=k(_);null!==j&&(!(j.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=j.callback;if("function"==typeof i){j.callback=null,T=j.priorityLevel;var u=i(j.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?j.callback=u:j===k(_)&&E(_),I(n)}else E(_);j=k(_)}if(null!==j)var l=!0;else{var c=k(O);null!==c&&r(L,c.startTime-n),l=!1}return l}finally{j=null,T=a,A=!1}}var M=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){N||A||(N=!0,n(z))},t.unstable_getCurrentPriorityLevel=function(){return T},t.unstable_getFirstCallbackNode=function(){return k(_)},t.unstable_next=function(e){switch(T){case 1:case 2:case 3:var t=3;break;default:t=T}var n=T;T=t;try{return e()}finally{T=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=M,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=T;T=e;try{return t()}finally{T=n}},t.unstable_scheduleCallback=function(e,a,i){var u=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?u+i:u,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:P++,callback:a,priorityLevel:e,startTime:i,expirationTime:l=i+l,sortIndex:-1},i>u?(e.sortIndex=i,S(O,e),null===k(_)&&e===k(O)&&(R?o():R=!0,r(L,i-u))):(e.sortIndex=l,S(_,e),N||A||(N=!0,n(z))),e},t.unstable_wrapCallback=function(e){var t=T;return function(){var n=T;T=t;try{return e.apply(this,arguments)}finally{T=n}}}},2851:(e,t,n)=>{"use strict";e.exports=n(1196)},1160:e=>{e.exports=function(e,t,n,r){var o=n?n.call(r,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var a=Object.keys(e),i=Object.keys(t);if(a.length!==i.length)return!1;for(var u=Object.prototype.hasOwnProperty.bind(t),l=0;l<a.length;l++){var c=a[l];if(!u(c))return!1;var s=e[c],f=t[c];if(!1===(o=n?n.call(r,s,f,c):void 0)||void 0===o&&s!==f)return!1}return!0}},2597:(e,t,n)=>{"use strict";var r=n(7557),o=n(9275),a=n(3961);function i(e,t){return(i=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,i(e,t)}var l=n(9526),c=n(2652),s=n.n(c);function f(){return(f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function d(e){return"/"===e.charAt(0)}function p(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}const h=function(e,t){if(!e)throw new Error("Invariant failed")};function m(e){return"/"===e.charAt(0)?e:"/"+e}function v(e){return"/"===e.charAt(0)?e.substr(1):e}function g(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function y(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function b(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function w(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=f({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],a=e&&d(e),i=t&&d(t),u=a||i;if(e&&d(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var l=o[o.length-1];n="."===l||".."===l||""===l}else n=!1;for(var c=0,s=o.length;s>=0;s--){var f=o[s];"."===f?p(o,s):".."===f?(p(o,s),c++):c&&(p(o,s),c--)}if(!u)for(;c--;c)o.unshift("..");!u||""===o[0]||o[0]&&d(o[0])||o.unshift("");var h=o.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h}(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function x(){var e=null,t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):o(!0):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var S=!("undefined"==typeof window||!window.document||!window.document.createElement);function k(e,t){t(window.confirm(e))}var E="hashchange",C={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+v(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:v,decodePath:m},slash:{encodePath:m,decodePath:m}};function _(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function O(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function P(e){window.location.replace(_(window.location.href)+"#"+e)}function j(e){void 0===e&&(e={}),S||h(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?k:r,a=n.hashType,i=void 0===a?"slash":a,u=e.basename?y(m(e.basename)):"",l=C[i],c=l.encodePath,s=l.decodePath;function d(){var e=s(O());return u&&(e=g(e,u)),w(e)}var p=x();function v(e){f(U,e),U.length=t.length,p.notifyListeners(U.location,U.action)}var j=!1,T=null;function A(){var e=O(),t=c(e);if(e!==t)P(t);else{var n=d(),r=U.location;if(!j&&function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash}(r,n))return;if(T===b(n))return;T=null,function(e){if(j)j=!1,v();else{p.confirmTransitionTo(e,"POP",o,(function(t){t?v({action:"POP",location:e}):function(e){var t=U.location,n=L.lastIndexOf(b(t));-1===n&&(n=0);var r=L.lastIndexOf(b(e));-1===r&&(r=0);var o=n-r;o&&(j=!0,z(o))}(e)}))}}(n)}}var N=O(),R=c(N);N!==R&&P(R);var I=d(),L=[b(I)];function z(e){t.go(e)}var M=0;function F(e){1===(M+=e)&&1===e?window.addEventListener(E,A):0===M&&window.removeEventListener(E,A)}var D=!1,U={length:t.length,action:"POP",location:I,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=_(window.location.href)),n+"#"+c(u+b(e))},push:function(e,t){var n="PUSH",r=w(e,void 0,void 0,U.location);p.confirmTransitionTo(r,n,o,(function(e){if(e){var t=b(r),o=c(u+t);if(O()!==o){T=t,function(e){window.location.hash=e}(o);var a=L.lastIndexOf(b(U.location)),i=L.slice(0,a+1);i.push(t),L=i,v({action:n,location:r})}else v()}}))},replace:function(e,t){var n="REPLACE",r=w(e,void 0,void 0,U.location);p.confirmTransitionTo(r,n,o,(function(e){if(e){var t=b(r),o=c(u+t);O()!==o&&(T=t,P(o));var a=L.indexOf(b(U.location));-1!==a&&(L[a]=t),v({action:n,location:r})}}))},go:z,goBack:function(){z(-1)},goForward:function(){z(1)},block:function(e){void 0===e&&(e=!1);var t=p.setPrompt(e);return D||(F(1),D=!0),function(){return D&&(D=!1,F(-1)),t()}},listen:function(e){var t=p.appendListener(e);return F(1),function(){F(-1),t()}}};return U}var T=1073741823,A="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:{};function N(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}const R=l.createContext||function(e,t){var n,r,o,a="__create-react-context-"+((A[o="__global_unique_id__"]=(A[o]||0)+1)+"__"),i=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=N(t.props.value),t}u(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[a]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;!function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}(r,o)?(n="function"==typeof t?t(r,o):T,0!=(n|=0)&&this.emitter.set(e.value,n)):n=0}},r.render=function(){return this.props.children},n}(l.Component);i.childContextTypes=((n={})[a]=s().object.isRequired,n);var c=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}u(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?T:t},r.componentDidMount=function(){this.context[a]&&this.context[a].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?T:e},r.componentWillUnmount=function(){this.context[a]&&this.context[a].off(this.onUpdate)},r.getValue=function(){return this.context[a]?this.context[a].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(l.Component);return c.contextTypes=((r={})[a]=s().object,r),{Provider:i,Consumer:c}};var I=n(8136),L=n.n(I);function z(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n(1948);var M=n(1281),F=n.n(M),D=function(e){var t=R();return t.displayName="Router-History",t}(),U=function(e){var t=R();return t.displayName="Router",t}(),B=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}u(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return l.createElement(U.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},l.createElement(D.Provider,{children:this.props.children||null,value:this.props.history}))},t}(l.Component);l.Component,l.Component;var $={},V=0;l.Component,l.Component,l.Component,l.useContext,l.Component;var W=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=j(t.props),t}return u(t,e),t.prototype.render=function(){return l.createElement(B,{history:this.history,children:this.props.children})},t}(l.Component),H=function(e,t){return"function"==typeof e?e(t):e},q=function(e,t){return"string"==typeof e?w(e,null,null,t):e},Q=function(e){return e},G=l.forwardRef;void 0===G&&(G=Q);var K=G((function(e,t){var n=e.innerRef,r=e.navigate,o=e.onClick,a=z(e,["innerRef","navigate","onClick"]),i=a.target,u=f({},a,{onClick:function(e){try{o&&o(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||i&&"_self"!==i||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return u.ref=Q!==G&&t||n,l.createElement("a",u)})),Y=G((function(e,t){var n=e.component,r=void 0===n?K:n,o=e.replace,a=e.to,i=e.innerRef,u=z(e,["component","replace","to","innerRef"]);return l.createElement(U.Consumer,null,(function(e){e||h(!1);var n=e.history,c=q(H(a,e.location),e.location),s=c?n.createHref(c):"",d=f({},u,{href:s,navigate:function(){var t=H(a,e.location);(o?n.replace:n.push)(t)}});return Q!==G?d.ref=t||i:d.innerRef=i,l.createElement(r,d)}))})),X=function(e){return e},J=l.forwardRef;void 0===J&&(J=X),J((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,o=e.activeClassName,a=void 0===o?"active":o,i=e.activeStyle,u=e.className,c=e.exact,s=e.isActive,d=e.location,p=e.sensitive,m=e.strict,v=e.style,g=e.to,y=e.innerRef,b=z(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return l.createElement(U.Consumer,null,(function(e){e||h(!1);var n=d||e.location,o=q(H(g,n),n),w=o.pathname,x=w&&w.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),S=x?function(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,a=void 0!==o&&o,i=n.strict,u=void 0!==i&&i,l=n.sensitive,c=void 0!==l&&l;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=$[n]||($[n]={});if(r[e])return r[e];var o=[],a={regexp:L()(e,o,t),keys:o};return V<1e4&&(r[e]=a,V++),a}(n,{end:a,strict:u,sensitive:c}),o=r.regexp,i=r.keys,l=o.exec(e);if(!l)return null;var s=l[0],f=l.slice(1),d=e===s;return a&&!d?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:d,params:i.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}(n.pathname,{path:x,exact:c,sensitive:p,strict:m}):null,k=!!(s?s(S,n):S),E=k?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(u,a):u,C=k?f({},v,{},i):v,_=f({"aria-current":k&&r||null,className:E,style:C,to:o},b);return X!==J?_.ref=t||y:_.innerRef=y,l.createElement(Y,_)}))}));var Z=l.createContext(null),ee=function(e){e()},te=function(){return ee},ne={notify:function(){}},re=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=ne,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=function(){var e=te(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=ne)},e}(),oe="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?l.useLayoutEffect:l.useEffect;const ae=function(e){var t=e.store,n=e.context,r=e.children,o=(0,l.useMemo)((function(){var e=new re(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),a=(0,l.useMemo)((function(){return t.getState()}),[t]);oe((function(){var e=o.subscription;return e.trySubscribe(),a!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[o,a]);var i=n||Z;return l.createElement(i.Provider,{value:o},r)};var ie=n(8206),ue=[],le=[null,null];function ce(e,t){var n=e[1];return[t.payload,n+1]}function se(e,t,n){oe((function(){return e.apply(void 0,t)}),n)}function fe(e,t,n,r,o,a,i){e.current=r,t.current=o,n.current=!1,a.current&&(a.current=null,i())}function de(e,t,n,r,o,a,i,u,l,c){if(e){var s=!1,f=null,d=function(){if(!s){var e,n,d=t.getState();try{e=r(d,o.current)}catch(e){n=e,f=e}n||(f=null),e===a.current?i.current||l():(a.current=e,u.current=e,i.current=!0,c({type:"STORE_UPDATED",payload:{error:n}}))}};return n.onStateChange=d,n.trySubscribe(),d(),function(){if(s=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var pe=function(){return[null,0]};function he(e,t){void 0===t&&(t={});var n=t,r=n.getDisplayName,o=void 0===r?function(e){return"ConnectAdvanced("+e+")"}:r,a=n.methodName,i=void 0===a?"connectAdvanced":a,u=n.renderCountProp,c=void 0===u?void 0:u,s=n.shouldHandleStateChanges,d=void 0===s||s,p=n.storeKey,h=void 0===p?"store":p,m=(n.withRef,n.forwardRef),v=void 0!==m&&m,g=n.context,y=void 0===g?Z:g,b=z(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),w=y;return function(t){var n=t.displayName||t.name||"Component",r=o(n),a=f({},b,{getDisplayName:o,methodName:i,renderCountProp:c,shouldHandleStateChanges:d,storeKey:h,displayName:r,wrappedComponentName:n,WrappedComponent:t}),u=b.pure,s=u?l.useMemo:function(e){return e()};function p(n){var r=(0,l.useMemo)((function(){var e=n.reactReduxForwardedRef,t=z(n,["reactReduxForwardedRef"]);return[n.context,e,t]}),[n]),o=r[0],i=r[1],u=r[2],c=(0,l.useMemo)((function(){return o&&o.Consumer&&(0,ie.isContextConsumer)(l.createElement(o.Consumer,null))?o:w}),[o,w]),p=(0,l.useContext)(c),h=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(p)&&Boolean(p.store);var m=h?n.store:p.store,v=(0,l.useMemo)((function(){return function(t){return e(t.dispatch,a)}(m)}),[m]),g=(0,l.useMemo)((function(){if(!d)return le;var e=new re(m,h?null:p.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[m,h,p]),y=g[0],b=g[1],x=(0,l.useMemo)((function(){return h?p:f({},p,{subscription:y})}),[h,p,y]),S=(0,l.useReducer)(ce,ue,pe),k=S[0][0],E=S[1];if(k&&k.error)throw k.error;var C=(0,l.useRef)(),_=(0,l.useRef)(u),O=(0,l.useRef)(),P=(0,l.useRef)(!1),j=s((function(){return O.current&&u===_.current?O.current:v(m.getState(),u)}),[m,k,u]);se(fe,[_,C,P,u,j,O,b]),se(de,[d,m,y,v,_,C,P,O,b,E],[m,y,v]);var T=(0,l.useMemo)((function(){return l.createElement(t,f({},j,{ref:i}))}),[i,t,j]);return(0,l.useMemo)((function(){return d?l.createElement(c.Provider,{value:x},T):T}),[c,T,x])}var m=u?l.memo(p):p;if(m.WrappedComponent=t,m.displayName=p.displayName=r,v){var g=l.forwardRef((function(e,t){return l.createElement(m,f({},e,{reactReduxForwardedRef:t}))}));return g.displayName=r,g.WrappedComponent=t,F()(g,t)}return F()(m,t)}}function me(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function ve(e,t){if(me(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!me(e[n[o]],t[n[o]]))return!1;return!0}function ge(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function ye(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function be(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=ye(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=ye(o),o=r(t,n)),o},r}}const we=[function(e){return"function"==typeof e?be(e):void 0},function(e){return e?void 0:ge((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?ge((function(t){return function(e,t){var n={},r=function(r){var o=e[r];"function"==typeof o&&(n[r]=function(){return t(o.apply(void 0,arguments))})};for(var o in e)r(o);return n}(e,t)})):void 0}],xe=[function(e){return"function"==typeof e?be(e):void 0},function(e){return e?void 0:ge((function(){return{}}))}];function Se(e,t,n){return f({},n,e,t)}const ke=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,a=n.areMergedPropsEqual,i=!1;return function(t,n,u){var l=e(t,n,u);return i?o&&a(l,r)||(r=l):(i=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return Se}}];function Ee(e,t,n,r){return function(o,a){return n(e(o,a),t(r,a),a)}}function Ce(e,t,n,r,o){var a,i,u,l,c,s=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;return function(o,h){return p?function(o,p){var h,m,v=!f(p,i),g=!s(o,a);return a=o,i=p,v&&g?(u=e(a,i),t.dependsOnOwnProps&&(l=t(r,i)),c=n(u,l,i)):v?(e.dependsOnOwnProps&&(u=e(a,i)),t.dependsOnOwnProps&&(l=t(r,i)),c=n(u,l,i)):g?(h=e(a,i),m=!d(h,u),u=h,m&&(c=n(u,l,i)),c):c}(o,h):(u=e(a=o,i=h),l=t(r,i),c=n(u,l,i),p=!0,c)}}function _e(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,a=z(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),i=n(e,a),u=r(e,a),l=o(e,a);return(a.pure?Ce:Ee)(i,u,l,e,a)}function Oe(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function Pe(e,t){return e===t}function je(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?he:n,o=t.mapStateToPropsFactories,a=void 0===o?xe:o,i=t.mapDispatchToPropsFactories,u=void 0===i?we:i,l=t.mergePropsFactories,c=void 0===l?ke:l,s=t.selectorFactory,d=void 0===s?_e:s;return function(e,t,n,o){void 0===o&&(o={});var i=o,l=i.pure,s=void 0===l||l,p=i.areStatesEqual,h=void 0===p?Pe:p,m=i.areOwnPropsEqual,v=void 0===m?ve:m,g=i.areStatePropsEqual,y=void 0===g?ve:g,b=i.areMergedPropsEqual,w=void 0===b?ve:b,x=z(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),S=Oe(e,a,"mapStateToProps"),k=Oe(t,u,"mapDispatchToProps"),E=Oe(n,c,"mergeProps");return r(d,f({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:S,initMapDispatchToProps:k,initMergeProps:E,pure:s,areStatesEqual:h,areOwnPropsEqual:v,areStatePropsEqual:y,areMergedPropsEqual:w},x))}}const Te=je();var Ae;Ae=a.unstable_batchedUpdates,ee=Ae;var Ne=n(338),Re=n(1160),Ie=n.n(Re);const Le=function(e){function t(e,r,l,c,d){for(var p,h,m,v,w,S=0,k=0,E=0,C=0,_=0,N=0,I=m=p=0,z=0,M=0,F=0,D=0,U=l.length,B=U-1,$="",V="",W="",H="";z<U;){if(h=l.charCodeAt(z),z===B&&0!==k+C+E+S&&(0!==k&&(h=47===k?10:47),C=E=S=0,U++,B++),0===k+C+E+S){if(z===B&&(0<M&&($=$.replace(f,"")),0<$.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:$+=l.charAt(z)}h=59}switch(h){case 123:for(p=($=$.trim()).charCodeAt(0),m=1,D=++z;z<U;){switch(h=l.charCodeAt(z)){case 123:m++;break;case 125:m--;break;case 47:switch(h=l.charCodeAt(z+1)){case 42:case 47:e:{for(I=z+1;I<B;++I)switch(l.charCodeAt(I)){case 47:if(42===h&&42===l.charCodeAt(I-1)&&z+2!==I){z=I+1;break e}break;case 10:if(47===h){z=I+1;break e}}z=I}}break;case 91:h++;case 40:h++;case 34:case 39:for(;z++<B&&l.charCodeAt(z)!==h;);}if(0===m)break;z++}switch(m=l.substring(D,z),0===p&&(p=($=$.replace(s,"").trim()).charCodeAt(0)),p){case 64:switch(0<M&&($=$.replace(f,"")),h=$.charCodeAt(1)){case 100:case 109:case 115:case 45:M=r;break;default:M=A}if(D=(m=t(r,M,m,h,d+1)).length,0<R&&(w=u(3,m,M=n(A,$,F),r,P,O,D,h,d,c),$=M.join(""),void 0!==w&&0===(D=(m=w.trim()).length)&&(h=0,m="")),0<D)switch(h){case 115:$=$.replace(x,i);case 100:case 109:case 45:m=$+"{"+m+"}";break;case 107:m=($=$.replace(g,"$1 $2"))+"{"+m+"}",m=1===T||2===T&&a("@"+m,3)?"@-webkit-"+m+"@"+m:"@"+m;break;default:m=$+m,112===c&&(V+=m,m="")}else m="";break;default:m=t(r,n(r,$,F),m,c,d+1)}W+=m,m=F=M=I=p=0,$="",h=l.charCodeAt(++z);break;case 125:case 59:if(1<(D=($=(0<M?$.replace(f,""):$).trim()).length))switch(0===I&&(p=$.charCodeAt(0),45===p||96<p&&123>p)&&(D=($=$.replace(" ",":")).length),0<R&&void 0!==(w=u(1,$,r,e,P,O,V.length,c,d,c))&&0===(D=($=w.trim()).length)&&($="\0\0"),p=$.charCodeAt(0),h=$.charCodeAt(1),p){case 0:break;case 64:if(105===h||99===h){H+=$+l.charAt(z);break}default:58!==$.charCodeAt(D-1)&&(V+=o($,p,h,$.charCodeAt(2)))}F=M=I=p=0,$="",h=l.charCodeAt(++z)}}switch(h){case 13:case 10:47===k?k=0:0===1+p&&107!==c&&0<$.length&&(M=1,$+="\0"),0<R*L&&u(0,$,r,e,P,O,V.length,c,d,c),O=1,P++;break;case 59:case 125:if(0===k+C+E+S){O++;break}default:switch(O++,v=l.charAt(z),h){case 9:case 32:if(0===C+S+k)switch(_){case 44:case 58:case 9:case 32:v="";break;default:32!==h&&(v=" ")}break;case 0:v="\\0";break;case 12:v="\\f";break;case 11:v="\\v";break;case 38:0===C+k+S&&(M=F=1,v="\f"+v);break;case 108:if(0===C+k+S+j&&0<I)switch(z-I){case 2:112===_&&58===l.charCodeAt(z-3)&&(j=_);case 8:111===N&&(j=N)}break;case 58:0===C+k+S&&(I=z);break;case 44:0===k+E+C+S&&(M=1,v+="\r");break;case 34:case 39:0===k&&(C=C===h?0:0===C?h:C);break;case 91:0===C+k+E&&S++;break;case 93:0===C+k+E&&S--;break;case 41:0===C+k+S&&E--;break;case 40:if(0===C+k+S){if(0===p)switch(2*_+3*N){case 533:break;default:p=1}E++}break;case 64:0===k+E+C+S+I+m&&(m=1);break;case 42:case 47:if(!(0<C+S+E))switch(k){case 0:switch(2*h+3*l.charCodeAt(z+1)){case 235:k=47;break;case 220:D=z,k=42}break;case 42:47===h&&42===_&&D+2!==z&&(33===l.charCodeAt(D+2)&&(V+=l.substring(D,z+1)),v="",k=0)}}0===k&&($+=v)}N=_,_=h,z++}if(0<(D=V.length)){if(M=r,0<R&&void 0!==(w=u(2,V,M,e,P,O,D,c,d,c))&&0===(V=w).length)return H+V+W;if(V=M.join(",")+"{"+V+"}",0!=T*j){switch(2!==T||a(V,2)||(j=0),j){case 111:V=V.replace(b,":-moz-$1")+V;break;case 112:V=V.replace(y,"::-webkit-input-$1")+V.replace(y,"::-moz-$1")+V.replace(y,":-ms-input-$1")+V}j=0}}return H+V+W}function n(e,t,n){var o=t.trim().split(m);t=o;var a=o.length,i=e.length;switch(i){case 0:case 1:var u=0;for(e=0===i?"":e[0]+" ";u<a;++u)t[u]=r(e,t[u],n).trim();break;default:var l=u=0;for(t=[];u<a;++u)for(var c=0;c<i;++c)t[l++]=r(e[c]+" ",o[u],n).trim()}return t}function r(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(v,"$1"+e.trim());case 58:return e.trim()+t.replace(v,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(v,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,r){var i=e+";",u=2*t+3*n+4*r;if(944===u){e=i.indexOf(":",9)+1;var l=i.substring(e,i.length-1).trim();return l=i.substring(0,e).trim()+l+";",1===T||2===T&&a(l,1)?"-webkit-"+l+l:l}if(0===T||2===T&&!a(i,1))return i;switch(u){case 1015:return 97===i.charCodeAt(10)?"-webkit-"+i+i:i;case 951:return 116===i.charCodeAt(3)?"-webkit-"+i+i:i;case 963:return 110===i.charCodeAt(5)?"-webkit-"+i+i:i;case 1009:if(100!==i.charCodeAt(4))break;case 969:case 942:return"-webkit-"+i+i;case 978:return"-webkit-"+i+"-moz-"+i+i;case 1019:case 983:return"-webkit-"+i+"-moz-"+i+"-ms-"+i+i;case 883:if(45===i.charCodeAt(8))return"-webkit-"+i+i;if(0<i.indexOf("image-set(",11))return i.replace(_,"$1-webkit-$2")+i;break;case 932:if(45===i.charCodeAt(4))switch(i.charCodeAt(5)){case 103:return"-webkit-box-"+i.replace("-grow","")+"-webkit-"+i+"-ms-"+i.replace("grow","positive")+i;case 115:return"-webkit-"+i+"-ms-"+i.replace("shrink","negative")+i;case 98:return"-webkit-"+i+"-ms-"+i.replace("basis","preferred-size")+i}return"-webkit-"+i+"-ms-"+i+i;case 964:return"-webkit-"+i+"-ms-flex-"+i+i;case 1023:if(99!==i.charCodeAt(8))break;return"-webkit-box-pack"+(l=i.substring(i.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+i+"-ms-flex-pack"+l+i;case 1005:return p.test(i)?i.replace(d,":-webkit-")+i.replace(d,":-moz-")+i:i;case 1e3:switch(t=(l=i.substring(13).trim()).indexOf("-")+1,l.charCodeAt(0)+l.charCodeAt(t)){case 226:l=i.replace(w,"tb");break;case 232:l=i.replace(w,"tb-rl");break;case 220:l=i.replace(w,"lr");break;default:return i}return"-webkit-"+i+"-ms-"+l+i;case 1017:if(-1===i.indexOf("sticky",9))break;case 975:switch(t=(i=e).length-10,u=(l=(33===i.charCodeAt(t)?i.substring(0,t):i).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|l.charCodeAt(7))){case 203:if(111>l.charCodeAt(8))break;case 115:i=i.replace(l,"-webkit-"+l)+";"+i;break;case 207:case 102:i=i.replace(l,"-webkit-"+(102<u?"inline-":"")+"box")+";"+i.replace(l,"-webkit-"+l)+";"+i.replace(l,"-ms-"+l+"box")+";"+i}return i+";";case 938:if(45===i.charCodeAt(5))switch(i.charCodeAt(6)){case 105:return l=i.replace("-items",""),"-webkit-"+i+"-webkit-box-"+l+"-ms-flex-"+l+i;case 115:return"-webkit-"+i+"-ms-flex-item-"+i.replace(k,"")+i;default:return"-webkit-"+i+"-ms-flex-line-pack"+i.replace("align-content","").replace(k,"")+i}break;case 973:case 989:if(45!==i.charCodeAt(3)||122===i.charCodeAt(4))break;case 931:case 953:if(!0===C.test(e))return 115===(l=e.substring(e.indexOf(":")+1)).charCodeAt(0)?o(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):i.replace(l,"-webkit-"+l)+i.replace(l,"-moz-"+l.replace("fill-",""))+i;break;case 962:if(i="-webkit-"+i+(102===i.charCodeAt(5)?"-ms-"+i:"")+i,211===n+r&&105===i.charCodeAt(13)&&0<i.indexOf("transform",10))return i.substring(0,i.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+i}return i}function a(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),I(2!==t?r:r.replace(E,"$1"),n,t)}function i(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(S," or ($1)").substring(4):"("+t+")"}function u(e,t,n,r,o,a,i,u,l,s){for(var f,d=0,p=t;d<R;++d)switch(f=N[d].call(c,e,p,n,r,o,a,i,u,l,s)){case void 0:case!1:case!0:case null:break;default:p=f}if(p!==t)return p}function l(e){return void 0!==(e=e.prefix)&&(I=null,e?"function"!=typeof e?T=1:(T=2,I=e):T=0),l}function c(e,n){var r=e;if(33>r.charCodeAt(0)&&(r=r.trim()),r=[r],0<R){var o=u(-1,n,r,r,P,O,0,0,0,0);void 0!==o&&"string"==typeof o&&(n=o)}var a=t(A,r,n,0,0);return 0<R&&void 0!==(o=u(-2,a,r,r,P,O,a.length,0,0,0))&&(a=o),j=0,O=P=1,a}var s=/^\0+/g,f=/[\0\r\f]/g,d=/: */g,p=/zoo|gra/,h=/([,: ])(transform)/g,m=/,\r+?/g,v=/([\t\r\n ])*\f?&/g,g=/@(k\w+)\s*(\S*)\s*/,y=/::(place)/g,b=/:(read-only)/g,w=/[svh]\w+-[tblr]{2}/,x=/\(\s*(.*)\s*\)/g,S=/([\s\S]*?);/g,k=/-self|flex-/g,E=/[^]*?(:[rp][el]a[\w-]+)[^]*/,C=/stretch|:\s*\w+\-(?:conte|avail)/,_=/([^-])(image-set\()/,O=1,P=1,j=0,T=1,A=[],N=[],R=0,I=null,L=0;return c.use=function e(t){switch(t){case void 0:case null:R=N.length=0;break;default:if("function"==typeof t)N[R++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else L=0|!!t}return e},c.set=l,void 0!==e&&l(e),c},ze={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var Me=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const Fe=(De={},function(e){return void 0===De[e]&&(De[e]=(t=e,Me.test(t)||111===t.charCodeAt(0)&&110===t.charCodeAt(1)&&t.charCodeAt(2)<91)),De[e];var t});var De;function Ue(){return(Ue=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var Be=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},$e=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,Ne.typeOf)(e)},Ve=Object.freeze([]),We=Object.freeze({});function He(e){return"function"==typeof e}function qe(e){return e.displayName||e.name||"Component"}function Qe(e){return e&&"string"==typeof e.styledComponentId}var Ge="undefined"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",Ke="undefined"!=typeof window&&"HTMLElement"in window,Ye=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY),Xe={};function Je(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var Ze=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&Je(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var a=r;a<o;a++)this.groupSizes[a]=0}for(var i=this.indexOfGroup(e+1),u=0,l=t.length;u<l;u++)this.tag.insertRule(i,t[u])&&(this.groupSizes[e]++,i++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,a=r;a<o;a++)t+=this.tag.getRule(a)+"/*!sc*/\n";return t},e}(),et=new Map,tt=new Map,nt=1,rt=function(e){if(et.has(e))return et.get(e);for(;tt.has(nt);)nt++;var t=nt++;return et.set(e,t),tt.set(t,e),t},ot=function(e){return tt.get(e)},at=function(e,t){et.set(e,t),tt.set(t,e)},it="style["+Ge+'][data-styled-version="5.3.0"]',ut=new RegExp("^"+Ge+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),lt=function(e,t,n){for(var r,o=n.split(","),a=0,i=o.length;a<i;a++)(r=o[a])&&e.registerName(t,r)},ct=function(e,t){for(var n=t.innerHTML.split("/*!sc*/\n"),r=[],o=0,a=n.length;o<a;o++){var i=n[o].trim();if(i){var u=i.match(ut);if(u){var l=0|parseInt(u[1],10),c=u[2];0!==l&&(at(c,l),lt(e,c,u[3]),e.getTag().insertRules(l,r)),r.length=0}else r.push(i)}}},st=function(){return"undefined"!=typeof window&&void 0!==window.__webpack_nonce__?window.__webpack_nonce__:null},ft=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(Ge))return r}}(n),a=void 0!==o?o.nextSibling:null;r.setAttribute(Ge,"active"),r.setAttribute("data-styled-version","5.3.0");var i=st();return i&&r.setAttribute("nonce",i),n.insertBefore(r,a),r},dt=function(){function e(e){var t=this.element=ft(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}Je(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),pt=function(){function e(e){var t=this.element=ft(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),ht=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),mt=Ke,vt={isServer:!Ke,useCSSOMInjection:!Ye},gt=function(){function e(e,t,n){void 0===e&&(e=We),void 0===t&&(t={}),this.options=Ue({},vt,{},e),this.gs=t,this.names=new Map(n),!this.options.isServer&&Ke&&mt&&(mt=!1,function(e){for(var t=document.querySelectorAll(it),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(Ge)&&(ct(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return rt(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(Ue({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new ht(o):r?new dt(o):new pt(o),new Ze(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(rt(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(rt(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(rt(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var a=ot(o);if(void 0!==a){var i=e.names.get(a),u=t.getGroup(o);if(void 0!==i&&0!==u.length){var l=Ge+".g"+o+'[id="'+a+'"]',c="";void 0!==i&&i.forEach((function(e){e.length>0&&(c+=e+",")})),r+=""+u+l+'{content:"'+c+'"}/*!sc*/\n'}}}return r}(this)},e}(),yt=/(a)(d)/gi,bt=function(e){return String.fromCharCode(e+(e>25?39:97))};function wt(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=bt(t%52)+n;return(bt(t%52)+n).replace(yt,"$1-$2")}var xt=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},St=function(e){return xt(5381,e)};function kt(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(He(n)&&!Qe(n))return!1}return!0}var Et=St("5.3.0"),Ct=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&kt(e),this.componentId=t,this.baseHash=xt(Et,t),this.baseStyle=n,gt.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var a=Vt(this.rules,e,t,n).join(""),i=wt(xt(this.baseHash,a.length)>>>0);if(!t.hasNameForId(r,i)){var u=n(a,"."+i,void 0,r);t.insertRules(r,i,u)}o.push(i),this.staticRulesId=i}else{for(var l=this.rules.length,c=xt(this.baseHash,n.hash),s="",f=0;f<l;f++){var d=this.rules[f];if("string"==typeof d)s+=d;else if(d){var p=Vt(d,e,t,n),h=Array.isArray(p)?p.join(""):p;c=xt(c,h+f),s+=h}}if(s){var m=wt(c>>>0);if(!t.hasNameForId(r,m)){var v=n(s,"."+m,void 0,r);t.insertRules(r,m,v)}o.push(m)}}return o.join(" ")},e}(),_t=/^\s*\/\/.*$/gm,Ot=[":","[",".","#"];function Pt(e){var t,n,r,o,a=void 0===e?We:e,i=a.options,u=void 0===i?We:i,l=a.plugins,c=void 0===l?Ve:l,s=new Le(u),f=[],d=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,a,i,u,l,c,s,f){switch(n){case 1:if(0===s&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===c)return r+"/*|*/";break;case 3:switch(c){case 102:case 112:return e(o[0]+r),"";default:return r+(0===f?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){f.push(e)})),p=function(e,r,a){return 0===r&&-1!==Ot.indexOf(a[n.length])||a.match(o)?e:"."+t};function h(e,a,i,u){void 0===u&&(u="&");var l=e.replace(_t,""),c=a&&i?i+" "+a+" { "+l+" }":l;return t=u,n=a,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),s(i||!a?"":a,c)}return s.use([].concat(c,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,p))},d,function(e){if(-2===e){var t=f;return f=[],t}}])),h.hash=c.length?c.reduce((function(e,t){return t.name||Je(15),xt(e,t.name)}),5381).toString():"",h}var jt=l.createContext(),Tt=(jt.Consumer,l.createContext()),At=(Tt.Consumer,new gt),Nt=Pt();function Rt(){return(0,l.useContext)(jt)||At}function It(){return(0,l.useContext)(Tt)||Nt}function Lt(e){var t=(0,l.useState)(e.stylisPlugins),n=t[0],r=t[1],o=Rt(),a=(0,l.useMemo)((function(){var t=o;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),i=(0,l.useMemo)((function(){return Pt({options:{prefix:!e.disableVendorPrefixes},plugins:n})}),[e.disableVendorPrefixes,n]);return(0,l.useEffect)((function(){Ie()(n,e.stylisPlugins)||r(e.stylisPlugins)}),[e.stylisPlugins]),l.createElement(jt.Provider,{value:a},l.createElement(Tt.Provider,{value:i},e.children))}var zt=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=Nt);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return Je(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=Nt),this.name+e.hash},e}(),Mt=/([A-Z])/,Ft=/([A-Z])/g,Dt=/^ms-/,Ut=function(e){return"-"+e.toLowerCase()};function Bt(e){return Mt.test(e)?e.replace(Ft,Ut).replace(Dt,"-ms-"):e}var $t=function(e){return null==e||!1===e||""===e};function Vt(e,t,n,r){if(Array.isArray(e)){for(var o,a=[],i=0,u=e.length;i<u;i+=1)""!==(o=Vt(e[i],t,n,r))&&(Array.isArray(o)?a.push.apply(a,o):a.push(o));return a}return $t(e)?"":Qe(e)?"."+e.styledComponentId:He(e)?"function"!=typeof(l=e)||l.prototype&&l.prototype.isReactComponent||!t?e:Vt(e(t),t,n,r):e instanceof zt?n?(e.inject(n,r),e.getName(r)):e:$e(e)?function e(t,n){var r,o,a=[];for(var i in t)t.hasOwnProperty(i)&&!$t(t[i])&&($e(t[i])?a.push.apply(a,e(t[i],i)):He(t[i])?a.push(Bt(i)+":",t[i],";"):a.push(Bt(i)+": "+(r=i,(null==(o=t[i])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in ze?String(o).trim():o+"px")+";")));return n?[n+" {"].concat(a,["}"]):a}(e):e.toString();var l}function Wt(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return He(e)||$e(e)?Vt(Be(Ve,[e].concat(n))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:Vt(Be(e,n))}new Set;var Ht=function(e,t,n){return void 0===n&&(n=We),e.theme!==n.theme&&e.theme||t||n.theme},qt=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,Qt=/(^-|-$)/g;function Gt(e){return e.replace(qt,"-").replace(Qt,"")}var Kt=function(e){return wt(St(e)>>>0)};function Yt(e){return"string"==typeof e&&!0}var Xt=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},Jt=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function Zt(e,t,n){var r=e[n];Xt(t)&&Xt(r)?en(r,t):e[n]=t}function en(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,a=n;o<a.length;o++){var i=a[o];if(Xt(i))for(var u in i)Jt(u)&&Zt(e,i[u],u)}return e}var tn=l.createContext();tn.Consumer;var nn={};function rn(e,t,n){var r=Qe(e),o=!Yt(e),a=t.attrs,i=void 0===a?Ve:a,u=t.componentId,c=void 0===u?function(e,t){var n="string"!=typeof e?"sc":Gt(e);nn[n]=(nn[n]||0)+1;var r=n+"-"+Kt("5.3.0"+n+nn[n]);return t?t+"-"+r:r}(t.displayName,t.parentComponentId):u,s=t.displayName,f=void 0===s?function(e){return Yt(e)?"styled."+e:"Styled("+qe(e)+")"}(e):s,d=t.displayName&&t.componentId?Gt(t.displayName)+"-"+t.componentId:t.componentId||c,p=r&&e.attrs?Array.prototype.concat(e.attrs,i).filter(Boolean):i,h=t.shouldForwardProp;r&&e.shouldForwardProp&&(h=t.shouldForwardProp?function(n,r,o){return e.shouldForwardProp(n,r,o)&&t.shouldForwardProp(n,r,o)}:e.shouldForwardProp);var m,v=new Ct(n,d,r?e.componentStyle:void 0),g=v.isStatic&&0===i.length,y=function(e,t){return function(e,t,n,r){var o=e.attrs,a=e.componentStyle,i=e.defaultProps,u=e.foldedComponentIds,c=e.shouldForwardProp,s=e.styledComponentId,f=e.target,d=function(e,t,n){void 0===e&&(e=We);var r=Ue({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,a,i=e;for(t in He(i)&&(i=i(r)),i)r[t]=o[t]="className"===t?(n=o[t],a=i[t],n&&a?n+" "+a:n||a):i[t]})),[r,o]}(Ht(t,(0,l.useContext)(tn),i)||We,t,o),p=d[0],h=d[1],m=function(e,t,n,r){var o=Rt(),a=It();return t?e.generateAndInjectStyles(We,o,a):e.generateAndInjectStyles(n,o,a)}(a,r,p),v=n,g=h.$as||t.$as||h.as||t.as||f,y=Yt(g),b=h!==t?Ue({},t,{},h):t,w={};for(var x in b)"$"!==x[0]&&"as"!==x&&("forwardedAs"===x?w.as=b[x]:(c?c(x,Fe,g):!y||Fe(x))&&(w[x]=b[x]));return t.style&&h.style!==t.style&&(w.style=Ue({},t.style,{},h.style)),w.className=Array.prototype.concat(u,s,m!==s?m:null,t.className,h.className).filter(Boolean).join(" "),w.ref=v,(0,l.createElement)(g,w)}(m,e,t,g)};return y.displayName=f,(m=l.forwardRef(y)).attrs=p,m.componentStyle=v,m.displayName=f,m.shouldForwardProp=h,m.foldedComponentIds=r?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):Ve,m.styledComponentId=d,m.target=r?e.target:e,m.withComponent=function(e){var r=t.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["componentId"]),a=r&&r+"-"+(Yt(e)?e:Gt(qe(e)));return rn(e,Ue({},o,{attrs:p,componentId:a}),n)},Object.defineProperty(m,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=r?en({},e.defaultProps,t):t}}),m.toString=function(){return"."+m.styledComponentId},o&&F()(m,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),m}var on=function(e){return function e(t,n,r){if(void 0===r&&(r=We),!(0,Ne.isValidElementType)(n))return Je(1,String(n));var o=function(){return t(n,r,Wt.apply(void 0,arguments))};return o.withConfig=function(o){return e(t,n,Ue({},r,{},o))},o.attrs=function(o){return e(t,n,Ue({},r,{attrs:Array.prototype.concat(r.attrs,o).filter(Boolean)}))},o}(rn,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){on[e]=on(e)}));var an,un=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=kt(e),gt.registerId(this.componentId+1)}var t=e.prototype;return t.createStyles=function(e,t,n,r){var o=r(Vt(this.rules,t,n,r).join(""),""),a=this.componentId+e;n.insertRules(a,a,o)},t.removeStyles=function(e,t){t.clearRules(this.componentId+e)},t.renderStyles=function(e,t,n,r){e>2&&gt.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},e}();(an=function(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString(),n=st();return"<style "+[n&&'nonce="'+n+'"',Ge+'="true"','data-styled-version="5.3.0"'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?Je(2):e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)return Je(2);var n=((t={})[Ge]="",t["data-styled-version"]="5.3.0",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),r=st();return r&&(n.nonce=r),[l.createElement("style",Ue({},n,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new gt({isServer:!0}),this.sealed=!1}.prototype).collectStyles=function(e){return this.sealed?Je(2):l.createElement(Lt,{sheet:this.instance},e)},an.interleaveWithNodeStream=function(e){return Je(3)};const ln=on;function cn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function sn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function fn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?sn(Object(n),!0).forEach((function(t){cn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):sn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function dn(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var pn="function"==typeof Symbol&&Symbol.observable||"@@observable",hn=function(){return Math.random().toString(36).substring(7).split("").join(".")},mn={INIT:"@@redux/INIT"+hn(),REPLACE:"@@redux/REPLACE"+hn(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+hn()}};function vn(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function gn(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function yn(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var bn=yn();bn.withExtraArgument=yn;const wn=bn;var xn=n(2868),Sn=n.n(xn);const kn=new(function(){function e(){}return e.prototype.getBook=function(e){return Sn().get("http://openlibrary.org/isbn/"+e+".json").then((function(e){return e.data})).catch((function(e){return console.log(e),null}))},e}());var En=function(){function e(){}return e.prototype.getCover=function(e,t){return Sn().get(Cn(e,t)).then((function(e){return e.data})).catch((function(e){return console.log(e),null}))},e}(),Cn=function(e,t){return"http://covers.openlibrary.org/b/isbn/"+e+"-"+t+".jpg"};new En;const _n=new(function(){function e(){}return e.prototype.getBooks=function(e){var t=e.split(" ").join("+");return Sn().get("http://openlibrary.org/search.json?q="+t).then((function(e){return e.data})).catch((function(e){return console.log(e),null}))},e}());var On=function(){return(On=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},Pn=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{l(r.next(e))}catch(e){a(e)}}function u(e){try{l(r.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}l((r=r.apply(e,t||[])).next())}))},jn=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},Tn=function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e},An="app/SET_ALL_BOOKS",Nn="app/SET_PAGES_NUM",Rn="app/SET_CURRENT_PAGE",In="app/SET_ITEMS_ON_PAGE",Ln="app/SET_ADDITIONAL_INFO",zn="app/SET_COVERS_M",Mn="app/SET_COVERS_L",Fn="app/SET_SEARCHING",Dn="app/SET_LAST_QUERY",Un="app/INC_SEARCH_COUNT",Bn=function(e){return{type:Fn,payload:e}},$n=function(e){return{type:Dn,payload:e}},Vn={getAllBooks:function(e){var t=this;return function(n,r){return Pn(t,void 0,void 0,(function(){var t,o,a,i;return jn(this,(function(u){switch(u.label){case 0:return n(Bn(!0)),n({type:Un}),[4,_n.getBooks(e)];case 1:return(t=u.sent())?(l=t.docs,c={},l.forEach((function(e){if(e.has_fulltext&&e.isbn){var t=e.author_name[0],n=e.title;e.isbn.forEach((function(e){c[e]||e.length<=9||(c[e]={isbn:e,author:t,title:n})}))}})),o=Object.values(c),a=r().app.pageSize,n(function(e){return{type:An,payload:e}}(o)),i=Math.ceil(o.length/a),n(function(e){return{type:Nn,payload:e}}(i)),n(Vn.getItemsOnPage(1)),n($n(e)),n(Bn(!1)),[2]):(n($n(e)),n(Bn(!1)),[2])}var l,c}))}))}},getItemsOnPage:function(e){return function(t,n){var r=n().app,o=r.allBooks,a=r.pageSize,i=function(e,t,n){for(var r=t*n-1,o=[],a=(t-1)*n;a<=r;a++)e[a]&&o.push(e[a]);return o}(o,e,a);t({type:Rn,payload:e}),t({type:In,payload:i}),t(Vn.getAdditionalInfo())}},getAdditionalInfo:function(){var e=this;return function(t,n){return Pn(e,void 0,void 0,(function(){var e,r,o,a;return jn(this,(function(i){switch(i.label){case 0:return(e=n().app.itemsOnPage)===[]?[2]:[4,Promise.all(Tn([],e.map((function(e){return kn.getBook(e.isbn)}))))];case 1:return r=i.sent(),o=e.map((function(e){return Cn(e.isbn,"M")})),a=e.map((function(e){return Cn(e.isbn,"L")})),t({type:Ln,payload:r}),t({type:zn,payload:o}),t(function(e){return{type:Mn,payload:e}}(a)),[2]}}))}))}}},Wn={allBooks:[],pageSize:20,pagesNum:void 0,currentPage:void 0,itemsOnPage:[],searching:!1,lastQuery:void 0,searchCount:0},Hn=function e(t,n,r){var o;if("function"==typeof n&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error(dn(0));if("function"==typeof n&&void 0===r&&(r=n,n=void 0),void 0!==r){if("function"!=typeof r)throw new Error(dn(1));return r(e)(t,n)}if("function"!=typeof t)throw new Error(dn(2));var a=t,i=n,u=[],l=u,c=!1;function s(){l===u&&(l=u.slice())}function f(){if(c)throw new Error(dn(3));return i}function d(e){if("function"!=typeof e)throw new Error(dn(4));if(c)throw new Error(dn(5));var t=!0;return s(),l.push(e),function(){if(t){if(c)throw new Error(dn(6));t=!1,s();var n=l.indexOf(e);l.splice(n,1),u=null}}}function p(e){if(!vn(e))throw new Error(dn(7));if(void 0===e.type)throw new Error(dn(8));if(c)throw new Error(dn(9));try{c=!0,i=a(i,e)}finally{c=!1}for(var t=u=l,n=0;n<t.length;n++)(0,t[n])();return e}function h(e){if("function"!=typeof e)throw new Error(dn(10));a=e,p({type:mn.REPLACE})}function m(){var e,t=d;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(dn(11));function n(){e.next&&e.next(f())}return n(),{unsubscribe:t(n)}}})[pn]=function(){return this},e}return p({type:mn.INIT}),(o={dispatch:p,subscribe:d,getState:f,replaceReducer:h})[pn]=m,o}(function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var a,i=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:mn.INIT}))throw new Error(dn(12));if(void 0===n(void 0,{type:mn.PROBE_UNKNOWN_ACTION()}))throw new Error(dn(13))}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},u=0;u<i.length;u++){var l=i[u],c=n[l],s=e[l],f=c(s,t);if(void 0===f)throw t&&t.type,new Error(dn(14));o[l]=f,r=r||f!==s}return(r=r||i.length!==Object.keys(e).length)?o:e}}({app:function(e,t){switch(void 0===e&&(e=Wn),t.type){case An:return On(On({},e),{allBooks:t.payload});case Nn:return On(On({},e),{pagesNum:t.payload});case Rn:return On(On({},e),{currentPage:t.payload});case In:return On(On({},e),{itemsOnPage:t.payload});case Ln:return On(On({},e),{itemsOnPage:e.itemsOnPage.map((function(e,n){return On(On({},e),t.payload[n])}))});case zn:return On(On({},e),{itemsOnPage:e.itemsOnPage.map((function(e,n){return On(On({},e),{mediumCover:t.payload[n]})}))});case Mn:return On(On({},e),{itemsOnPage:e.itemsOnPage.map((function(e,n){return On(On({},e),{largeCover:t.payload[n]})}))});case Fn:return On(On({},e),{searching:t.payload});case Dn:return On(On({},e),{lastQuery:t.payload});case Un:return On(On({},e),{searchCount:e.searchCount+1});default:return e}}}),(window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||gn)(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(dn(15))},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map((function(e){return e(o)}));return r=gn.apply(void 0,a)(n.dispatch),fn(fn({},n),{},{dispatch:r})}}}(wn)));window.store=Hn;const qn=Hn;const Qn=ln.div.withConfig({displayName:"Div",componentId:"sc-vh53r8"})(Yn||(Gn=["\n  box-sizing: border-box;\n  width: ",";\n  height: ",";\n  align-self: ",";\n  margin: ",";\n  padding: ",";\n  text-align: ",";\n  color: ",";\n  z-index: ",";\n  border: ",";\n"],Kn=["\n  box-sizing: border-box;\n  width: ",";\n  height: ",";\n  align-self: ",";\n  margin: ",";\n  padding: ",";\n  text-align: ",";\n  color: ",";\n  z-index: ",";\n  border: ",";\n"],Object.defineProperty?Object.defineProperty(Gn,"raw",{value:Kn}):Gn.raw=Kn,Yn=Gn),(function(e){return e.width||"100%"}),(function(e){return e.height||"100%"}),(function(e){return e.alignSelf||"center"}),(function(e){return e.margin||"0px"}),(function(e){return e.padding||"0px"}),(function(e){return e.textAlign||"left"}),(function(e){return e.color||"rgb(72, 78, 78)"}),(function(e){return e.zIndex||"unset"}),(function(e){return e.border||"auto"}));var Gn,Kn,Yn,Xn=ln(Qn).withConfig({displayName:"FooterWrapper",componentId:"sc-189j56g"})(Zn||(Zn=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n  background-color: rgb(245, 245, 245);\n  grid-area: footer;\n  text-align: center;\n  height: 6vh;\n  div {\n    position: relative;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n"],["\n  background-color: rgb(245, 245, 245);\n  grid-area: footer;\n  text-align: center;\n  height: 6vh;\n  div {\n    position: relative;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n"])));const Jn=function(){return(0,r.jsx)(Xn,{children:(0,r.jsx)("div",{children:"FOR PORTFOLIO"},void 0)},void 0)};var Zn;const er=function(e){return e.app.pageSize},tr=function(e){return e.app.pagesNum},nr=function(e){return e.app.currentPage},rr=function(e){return e.app.itemsOnPage},or=function(e){return e.app.searching},ar=function(e){return e.app.lastQuery},ir=function(e){return e.app.searchCount},ur=n.p+"25d6d7d61616b4df97d40f8e85fb7b75.gif",lr=function(e){var t=e.isFetching;return(0,r.jsx)(r.Fragment,{children:t?(0,r.jsx)("img",{src:ur,alt:""},void 0):""},void 0)};var cr=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},sr=function(){return(sr=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},fr=ln.div.withConfig({displayName:"Wrapper",componentId:"sc-wj3ogm"})(hr||(hr=cr(["\n  min-height: 86vh;\n  display: grid;\n  grid-template-columns: 1fr minmax(900px, 8fr) 1fr;\n  @media screen and (max-width: 1024px) {\n    grid-template-columns: 1fr 700px 1fr;\n  }\n  @media screen and (max-width: 768px) {\n    grid-template-columns: 1fr 500px 1fr;\n  }\n  @media screen and (max-width: 568px) {\n    grid-template-columns: 0fr minmax(300px, 1fr) 0fr;\n  }\n  @media screen and (max-width: 320px) {\n    grid-template-columns: 0fr minmax(250px, 1fr) 0fr;\n  }\n\n  height: ",";\n"],["\n  min-height: 86vh;\n  display: grid;\n  grid-template-columns: 1fr minmax(900px, 8fr) 1fr;\n  @media screen and (max-width: 1024px) {\n    grid-template-columns: 1fr 700px 1fr;\n  }\n  @media screen and (max-width: 768px) {\n    grid-template-columns: 1fr 500px 1fr;\n  }\n  @media screen and (max-width: 568px) {\n    grid-template-columns: 0fr minmax(300px, 1fr) 0fr;\n  }\n  @media screen and (max-width: 320px) {\n    grid-template-columns: 0fr minmax(250px, 1fr) 0fr;\n  }\n\n  height: ",";\n"])),(function(e){return e.fixedHeight?"86vh":"fit-content"})),dr=ln.div.withConfig({displayName:"ContentArea",componentId:"sc-5vwa59"})(mr||(mr=cr(["\n  background-color: white;\n  width: 100%;\n  height: 100%;\n"],["\n  background-color: white;\n  width: 100%;\n  height: 100%;\n"])));const pr=function(e){var t=e.children,n=e.fixedHeight,o=void 0!==n&&n;return(0,r.jsxs)(fr,sr({fixedHeight:o},{children:[(0,r.jsx)("div",{},void 0),(0,r.jsx)(dr,{children:t},void 0),(0,r.jsx)("div",{},void 0)]}),void 0)};var hr,mr,vr=n(5439),gr=n.n(vr),yr=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===br}(e)}(e)},br="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function wr(e,t){return!1!==t.clone&&t.isMergeableObject(e)?Sr((n=e,Array.isArray(n)?[]:{}),e,t):e;var n}function xr(e,t,n){return e.concat(t).map((function(e){return wr(e,n)}))}function Sr(e,t,n){(n=n||{}).arrayMerge=n.arrayMerge||xr,n.isMergeableObject=n.isMergeableObject||yr;var r=Array.isArray(t);return r===Array.isArray(e)?r?n.arrayMerge(e,t,n):function(e,t,n){var r={};return n.isMergeableObject(e)&&Object.keys(e).forEach((function(t){r[t]=wr(e[t],n)})),Object.keys(t).forEach((function(o){n.isMergeableObject(t[o])&&e[o]?r[o]=Sr(e[o],t[o],n):r[o]=wr(t[o],n)})),r}(e,t,n):wr(t,n)}Sr.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce((function(e,n){return Sr(e,n,t)}),{})};const kr=Sr,Er="object"==typeof global&&global&&global.Object===Object&&global;var Cr="object"==typeof self&&self&&self.Object===Object&&self;const _r=Er||Cr||Function("return this")(),Or=_r.Symbol;var Pr=Object.prototype,jr=Pr.hasOwnProperty,Tr=Pr.toString,Ar=Or?Or.toStringTag:void 0;var Nr=Object.prototype.toString;var Rr=Or?Or.toStringTag:void 0;const Ir=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":Rr&&Rr in Object(e)?function(e){var t=jr.call(e,Ar),n=e[Ar];try{e[Ar]=void 0;var r=!0}catch(e){}var o=Tr.call(e);return r&&(t?e[Ar]=n:delete e[Ar]),o}(e):function(e){return Nr.call(e)}(e)},Lr=function(e,t){return function(n){return e(t(n))}},zr=Lr(Object.getPrototypeOf,Object),Mr=function(e){return null!=e&&"object"==typeof e};var Fr=Function.prototype,Dr=Object.prototype,Ur=Fr.toString,Br=Dr.hasOwnProperty,$r=Ur.call(Object);const Vr=function(e){if(!Mr(e)||"[object Object]"!=Ir(e))return!1;var t=zr(e);if(null===t)return!0;var n=Br.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&Ur.call(n)==$r},Wr=function(e,t){return e===t||e!=e&&t!=t},Hr=function(e,t){for(var n=e.length;n--;)if(Wr(e[n][0],t))return n;return-1};var qr=Array.prototype.splice;function Qr(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}Qr.prototype.clear=function(){this.__data__=[],this.size=0},Qr.prototype.delete=function(e){var t=this.__data__,n=Hr(t,e);return!(n<0||(n==t.length-1?t.pop():qr.call(t,n,1),--this.size,0))},Qr.prototype.get=function(e){var t=this.__data__,n=Hr(t,e);return n<0?void 0:t[n][1]},Qr.prototype.has=function(e){return Hr(this.__data__,e)>-1},Qr.prototype.set=function(e,t){var n=this.__data__,r=Hr(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this};const Gr=Qr,Kr=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)},Yr=function(e){if(!Kr(e))return!1;var t=Ir(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t},Xr=_r["__core-js_shared__"];var Jr,Zr=(Jr=/[^.]+$/.exec(Xr&&Xr.keys&&Xr.keys.IE_PROTO||""))?"Symbol(src)_1."+Jr:"";var eo=Function.prototype.toString;const to=function(e){if(null!=e){try{return eo.call(e)}catch(e){}try{return e+""}catch(e){}}return""};var no=/^\[object .+?Constructor\]$/,ro=Function.prototype,oo=Object.prototype,ao=ro.toString,io=oo.hasOwnProperty,uo=RegExp("^"+ao.call(io).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");const lo=function(e){return!(!Kr(e)||(t=e,Zr&&Zr in t))&&(Yr(e)?uo:no).test(to(e));var t},co=function(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return lo(n)?n:void 0},so=co(_r,"Map"),fo=co(Object,"create");var po=Object.prototype.hasOwnProperty;var ho=Object.prototype.hasOwnProperty;function mo(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}mo.prototype.clear=function(){this.__data__=fo?fo(null):{},this.size=0},mo.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},mo.prototype.get=function(e){var t=this.__data__;if(fo){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return po.call(t,e)?t[e]:void 0},mo.prototype.has=function(e){var t=this.__data__;return fo?void 0!==t[e]:ho.call(t,e)},mo.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=fo&&void 0===t?"__lodash_hash_undefined__":t,this};const vo=mo,go=function(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map};function yo(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}yo.prototype.clear=function(){this.size=0,this.__data__={hash:new vo,map:new(so||Gr),string:new vo}},yo.prototype.delete=function(e){var t=go(this,e).delete(e);return this.size-=t?1:0,t},yo.prototype.get=function(e){return go(this,e).get(e)},yo.prototype.has=function(e){return go(this,e).has(e)},yo.prototype.set=function(e,t){var n=go(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this};const bo=yo;function wo(e){var t=this.__data__=new Gr(e);this.size=t.size}wo.prototype.clear=function(){this.__data__=new Gr,this.size=0},wo.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},wo.prototype.get=function(e){return this.__data__.get(e)},wo.prototype.has=function(e){return this.__data__.has(e)},wo.prototype.set=function(e,t){var n=this.__data__;if(n instanceof Gr){var r=n.__data__;if(!so||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new bo(r)}return n.set(e,t),this.size=n.size,this};const xo=wo,So=function(){try{var e=co(Object,"defineProperty");return e({},"",{}),e}catch(e){}}(),ko=function(e,t,n){"__proto__"==t&&So?So(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n};var Eo=Object.prototype.hasOwnProperty;const Co=function(e,t,n){var r=e[t];Eo.call(e,t)&&Wr(r,n)&&(void 0!==n||t in e)||ko(e,t,n)},_o=function(e,t,n,r){var o=!n;n||(n={});for(var a=-1,i=t.length;++a<i;){var u=t[a],l=r?r(n[u],e[u],u,n,e):void 0;void 0===l&&(l=e[u]),o?ko(n,u,l):Co(n,u,l)}return n},Oo=function(e){return Mr(e)&&"[object Arguments]"==Ir(e)};var Po=Object.prototype,jo=Po.hasOwnProperty,To=Po.propertyIsEnumerable;const Ao=Oo(function(){return arguments}())?Oo:function(e){return Mr(e)&&jo.call(e,"callee")&&!To.call(e,"callee")},No=Array.isArray;var Ro="object"==typeof exports&&exports&&!exports.nodeType&&exports,Io=Ro&&"object"==typeof module&&module&&!module.nodeType&&module,Lo=Io&&Io.exports===Ro?_r.Buffer:void 0;const zo=(Lo?Lo.isBuffer:void 0)||function(){return!1};var Mo=/^(?:0|[1-9]\d*)$/;const Fo=function(e,t){var n=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==n||"symbol"!=n&&Mo.test(e))&&e>-1&&e%1==0&&e<t},Do=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991};var Uo={};Uo["[object Float32Array]"]=Uo["[object Float64Array]"]=Uo["[object Int8Array]"]=Uo["[object Int16Array]"]=Uo["[object Int32Array]"]=Uo["[object Uint8Array]"]=Uo["[object Uint8ClampedArray]"]=Uo["[object Uint16Array]"]=Uo["[object Uint32Array]"]=!0,Uo["[object Arguments]"]=Uo["[object Array]"]=Uo["[object ArrayBuffer]"]=Uo["[object Boolean]"]=Uo["[object DataView]"]=Uo["[object Date]"]=Uo["[object Error]"]=Uo["[object Function]"]=Uo["[object Map]"]=Uo["[object Number]"]=Uo["[object Object]"]=Uo["[object RegExp]"]=Uo["[object Set]"]=Uo["[object String]"]=Uo["[object WeakMap]"]=!1;const Bo=function(e){return function(t){return e(t)}};var $o="object"==typeof exports&&exports&&!exports.nodeType&&exports,Vo=$o&&"object"==typeof module&&module&&!module.nodeType&&module,Wo=Vo&&Vo.exports===$o&&Er.process;const Ho=function(){try{return Vo&&Vo.require&&Vo.require("util").types||Wo&&Wo.binding&&Wo.binding("util")}catch(e){}}();var qo=Ho&&Ho.isTypedArray;const Qo=qo?Bo(qo):function(e){return Mr(e)&&Do(e.length)&&!!Uo[Ir(e)]};var Go=Object.prototype.hasOwnProperty;const Ko=function(e,t){var n=No(e),r=!n&&Ao(e),o=!n&&!r&&zo(e),a=!n&&!r&&!o&&Qo(e),i=n||r||o||a,u=i?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],l=u.length;for(var c in e)!t&&!Go.call(e,c)||i&&("length"==c||o&&("offset"==c||"parent"==c)||a&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Fo(c,l))||u.push(c);return u};var Yo=Object.prototype;const Xo=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||Yo)},Jo=Lr(Object.keys,Object);var Zo=Object.prototype.hasOwnProperty;const ea=function(e){return null!=e&&Do(e.length)&&!Yr(e)},ta=function(e){return ea(e)?Ko(e):function(e){if(!Xo(e))return Jo(e);var t=[];for(var n in Object(e))Zo.call(e,n)&&"constructor"!=n&&t.push(n);return t}(e)};var na=Object.prototype.hasOwnProperty;const ra=function(e){if(!Kr(e))return function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}(e);var t=Xo(e),n=[];for(var r in e)("constructor"!=r||!t&&na.call(e,r))&&n.push(r);return n},oa=function(e){return ea(e)?Ko(e,!0):ra(e)};var aa="object"==typeof exports&&exports&&!exports.nodeType&&exports,ia=aa&&"object"==typeof module&&module&&!module.nodeType&&module,ua=ia&&ia.exports===aa?_r.Buffer:void 0,la=ua?ua.allocUnsafe:void 0;const ca=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t},sa=function(){return[]};var fa=Object.prototype.propertyIsEnumerable,da=Object.getOwnPropertySymbols;const pa=da?function(e){return null==e?[]:(e=Object(e),function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,a=[];++n<r;){var i=e[n];t(i,n,e)&&(a[o++]=i)}return a}(da(e),(function(t){return fa.call(e,t)})))}:sa,ha=function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e},ma=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)ha(t,pa(e)),e=zr(e);return t}:sa,va=function(e,t,n){var r=t(e);return No(e)?r:ha(r,n(e))},ga=function(e){return va(e,ta,pa)},ya=function(e){return va(e,oa,ma)},ba=co(_r,"DataView"),wa=co(_r,"Promise"),xa=co(_r,"Set"),Sa=co(_r,"WeakMap");var ka="[object Map]",Ea="[object Promise]",Ca="[object Set]",_a="[object WeakMap]",Oa="[object DataView]",Pa=to(ba),ja=to(so),Ta=to(wa),Aa=to(xa),Na=to(Sa),Ra=Ir;(ba&&Ra(new ba(new ArrayBuffer(1)))!=Oa||so&&Ra(new so)!=ka||wa&&Ra(wa.resolve())!=Ea||xa&&Ra(new xa)!=Ca||Sa&&Ra(new Sa)!=_a)&&(Ra=function(e){var t=Ir(e),n="[object Object]"==t?e.constructor:void 0,r=n?to(n):"";if(r)switch(r){case Pa:return Oa;case ja:return ka;case Ta:return Ea;case Aa:return Ca;case Na:return _a}return t});const Ia=Ra;var La=Object.prototype.hasOwnProperty;const za=_r.Uint8Array,Ma=function(e){var t=new e.constructor(e.byteLength);return new za(t).set(new za(e)),t};var Fa=/\w*$/;var Da=Or?Or.prototype:void 0,Ua=Da?Da.valueOf:void 0;const Ba=function(e,t,n){var r,o,a,i=e.constructor;switch(t){case"[object ArrayBuffer]":return Ma(e);case"[object Boolean]":case"[object Date]":return new i(+e);case"[object DataView]":return function(e,t){var n=t?Ma(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return function(e,t){var n=t?Ma(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}(e,n);case"[object Map]":return new i;case"[object Number]":case"[object String]":return new i(e);case"[object RegExp]":return(a=new(o=e).constructor(o.source,Fa.exec(o))).lastIndex=o.lastIndex,a;case"[object Set]":return new i;case"[object Symbol]":return r=e,Ua?Object(Ua.call(r)):{}}};var $a=Object.create;const Va=function(){function e(){}return function(t){if(!Kr(t))return{};if($a)return $a(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();var Wa=Ho&&Ho.isMap;const Ha=Wa?Bo(Wa):function(e){return Mr(e)&&"[object Map]"==Ia(e)};var qa=Ho&&Ho.isSet;const Qa=qa?Bo(qa):function(e){return Mr(e)&&"[object Set]"==Ia(e)};var Ga="[object Arguments]",Ka="[object Function]",Ya={};Ya[Ga]=Ya["[object Array]"]=Ya["[object ArrayBuffer]"]=Ya["[object DataView]"]=Ya["[object Boolean]"]=Ya["[object Date]"]=Ya["[object Float32Array]"]=Ya["[object Float64Array]"]=Ya["[object Int8Array]"]=Ya["[object Int16Array]"]=Ya["[object Int32Array]"]=Ya["[object Map]"]=Ya["[object Number]"]=Ya["[object Object]"]=Ya["[object RegExp]"]=Ya["[object Set]"]=Ya["[object String]"]=Ya["[object Symbol]"]=Ya["[object Uint8Array]"]=Ya["[object Uint8ClampedArray]"]=Ya["[object Uint16Array]"]=Ya["[object Uint32Array]"]=!0,Ya["[object Error]"]=Ya[Ka]=Ya["[object WeakMap]"]=!1;const Xa=function e(t,n,r,o,a,i){var u,l=1&n,c=2&n,s=4&n;if(r&&(u=a?r(t,o,a,i):r(t)),void 0!==u)return u;if(!Kr(t))return t;var f=No(t);if(f){if(u=function(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&La.call(e,"index")&&(n.index=e.index,n.input=e.input),n}(t),!l)return ca(t,u)}else{var d=Ia(t),p=d==Ka||"[object GeneratorFunction]"==d;if(zo(t))return function(e,t){if(t)return e.slice();var n=e.length,r=la?la(n):new e.constructor(n);return e.copy(r),r}(t,l);if("[object Object]"==d||d==Ga||p&&!a){if(u=c||p?{}:function(e){return"function"!=typeof e.constructor||Xo(e)?{}:Va(zr(e))}(t),!l)return c?function(e,t){return _o(e,ma(e),t)}(t,function(e,t){return e&&_o(t,oa(t),e)}(u,t)):function(e,t){return _o(e,pa(e),t)}(t,function(e,t){return e&&_o(t,ta(t),e)}(u,t))}else{if(!Ya[d])return a?t:{};u=Ba(t,d,l)}}i||(i=new xo);var h=i.get(t);if(h)return h;i.set(t,u),Qa(t)?t.forEach((function(o){u.add(e(o,n,r,o,t,i))})):Ha(t)&&t.forEach((function(o,a){u.set(a,e(o,n,r,a,t,i))}));var m=f?void 0:(s?c?ya:ga:c?oa:ta)(t);return function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););}(m||t,(function(o,a){m&&(o=t[a=o]),Co(u,a,e(o,n,r,a,t,i))})),u},Ja=function(e){return Xa(e,4)},Za=function(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o},ei=function(e){return"symbol"==typeof e||Mr(e)&&"[object Symbol]"==Ir(e)};function ti(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],a=n.cache;if(a.has(o))return a.get(o);var i=e.apply(this,r);return n.cache=a.set(o,i)||a,i};return n.cache=new(ti.Cache||bo),n}ti.Cache=bo;const ni=ti;var ri=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,oi=/\\(\\)?/g;const ai=function(e){var t=ni((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(ri,(function(e,n,r,o){t.push(r?o.replace(oi,"$1"):n||e)})),t}),(function(e){return 500===n.size&&n.clear(),e})),n=t.cache;return t}(),ii=function(e){if("string"==typeof e||ei(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t};var ui=Or?Or.prototype:void 0,li=ui?ui.toString:void 0;const ci=function e(t){if("string"==typeof t)return t;if(No(t))return Za(t,e)+"";if(ei(t))return li?li.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n},si=function(e){return null==e?"":ci(e)},fi=function(e){return No(e)?Za(e,ii):ei(e)?[e]:ca(ai(si(e)))},di=function(e){return Xa(e,5)};function pi(){return(pi=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function hi(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function mi(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var vi=function(e){return Array.isArray(e)&&0===e.length},gi=function(e){return"function"==typeof e},yi=function(e){return null!==e&&"object"==typeof e},bi=function(e){return String(Math.floor(Number(e)))===e},wi=function(e){return"[object String]"===Object.prototype.toString.call(e)},xi=function(e){return yi(e)&&gi(e.then)};function Si(e,t,n,r){void 0===r&&(r=0);for(var o=fi(t);e&&r<o.length;)e=e[o[r++]];return void 0===e?n:e}function ki(e,t,n){for(var r=Ja(e),o=r,a=0,i=fi(t);a<i.length-1;a++){var u=i[a],l=Si(e,i.slice(0,a+1));if(l&&(yi(l)||Array.isArray(l)))o=o[u]=Ja(l);else{var c=i[a+1];o=o[u]=bi(c)&&Number(c)>=0?[]:{}}}return(0===a?e:o)[i[a]]===n?e:(void 0===n?delete o[i[a]]:o[i[a]]=n,0===a&&void 0===n&&delete r[i[a]],r)}function Ei(e,t,n,r){void 0===n&&(n=new WeakMap),void 0===r&&(r={});for(var o=0,a=Object.keys(e);o<a.length;o++){var i=a[o],u=e[i];yi(u)?n.get(u)||(n.set(u,!0),r[i]=Array.isArray(u)?[]:{},Ei(u,t,n,r[i])):r[i]=t}return r}var Ci=(0,l.createContext)(void 0);function _i(e,t){switch(t.type){case"SET_VALUES":return pi({},e,{values:t.payload});case"SET_TOUCHED":return pi({},e,{touched:t.payload});case"SET_ERRORS":return gr()(e.errors,t.payload)?e:pi({},e,{errors:t.payload});case"SET_STATUS":return pi({},e,{status:t.payload});case"SET_ISSUBMITTING":return pi({},e,{isSubmitting:t.payload});case"SET_ISVALIDATING":return pi({},e,{isValidating:t.payload});case"SET_FIELD_VALUE":return pi({},e,{values:ki(e.values,t.payload.field,t.payload.value)});case"SET_FIELD_TOUCHED":return pi({},e,{touched:ki(e.touched,t.payload.field,t.payload.value)});case"SET_FIELD_ERROR":return pi({},e,{errors:ki(e.errors,t.payload.field,t.payload.value)});case"RESET_FORM":return pi({},e,t.payload);case"SET_FORMIK_STATE":return t.payload(e);case"SUBMIT_ATTEMPT":return pi({},e,{touched:Ei(e.values,!0),isSubmitting:!0,submitCount:e.submitCount+1});case"SUBMIT_FAILURE":case"SUBMIT_SUCCESS":return pi({},e,{isSubmitting:!1});default:return e}}Ci.displayName="FormikContext",Ci.Provider,Ci.Consumer;var Oi={},Pi={};function ji(e){var t=e.validateOnChange,n=void 0===t||t,r=e.validateOnBlur,o=void 0===r||r,a=e.validateOnMount,i=void 0!==a&&a,u=e.isInitialValid,c=e.enableReinitialize,s=void 0!==c&&c,f=e.onSubmit,d=hi(e,["validateOnChange","validateOnBlur","validateOnMount","isInitialValid","enableReinitialize","onSubmit"]),p=pi({validateOnChange:n,validateOnBlur:o,validateOnMount:i,onSubmit:f},d),h=(0,l.useRef)(p.initialValues),m=(0,l.useRef)(p.initialErrors||Oi),v=(0,l.useRef)(p.initialTouched||Pi),g=(0,l.useRef)(p.initialStatus),y=(0,l.useRef)(!1),b=(0,l.useRef)({});(0,l.useEffect)((function(){return y.current=!0,function(){y.current=!1}}),[]);var w=(0,l.useReducer)(_i,{values:p.initialValues,errors:p.initialErrors||Oi,touched:p.initialTouched||Pi,status:p.initialStatus,isSubmitting:!1,isValidating:!1,submitCount:0}),x=w[0],S=w[1],k=(0,l.useCallback)((function(e,t){return new Promise((function(n,r){var o=p.validate(e,t);null==o?n(Oi):xi(o)?o.then((function(e){n(e||Oi)}),(function(e){r(e)})):n(o)}))}),[p.validate]),E=(0,l.useCallback)((function(e,t){var n=p.validationSchema,r=gi(n)?n(t):n,o=t&&r.validateAt?r.validateAt(t,e):function(e,t,n,r){void 0===n&&(n=!1),void 0===r&&(r={});var o=Ti(e);return t[n?"validateSync":"validate"](o,{abortEarly:!1,context:r})}(e,r);return new Promise((function(e,t){o.then((function(){e(Oi)}),(function(n){"ValidationError"===n.name?e(function(e){var t={};if(e.inner){if(0===e.inner.length)return ki(t,e.path,e.message);var n=e.inner,r=Array.isArray(n),o=0;for(n=r?n:n[Symbol.iterator]();;){var a;if(r){if(o>=n.length)break;a=n[o++]}else{if((o=n.next()).done)break;a=o.value}var i=a;Si(t,i.path)||(t=ki(t,i.path,i.message))}}return t}(n)):t(n)}))}))}),[p.validationSchema]),C=(0,l.useCallback)((function(e,t){return new Promise((function(n){return n(b.current[e].validate(t))}))}),[]),_=(0,l.useCallback)((function(e){var t=Object.keys(b.current).filter((function(e){return gi(b.current[e].validate)})),n=t.length>0?t.map((function(t){return C(t,Si(e,t))})):[Promise.resolve("DO_NOT_DELETE_YOU_WILL_BE_FIRED")];return Promise.all(n).then((function(e){return e.reduce((function(e,n,r){return"DO_NOT_DELETE_YOU_WILL_BE_FIRED"===n||n&&(e=ki(e,t[r],n)),e}),{})}))}),[C]),O=(0,l.useCallback)((function(e){return Promise.all([_(e),p.validationSchema?E(e):{},p.validate?k(e):{}]).then((function(e){var t=e[0],n=e[1],r=e[2];return kr.all([t,n,r],{arrayMerge:Ai})}))}),[p.validate,p.validationSchema,_,k,E]),P=Ri((function(e){return void 0===e&&(e=x.values),S({type:"SET_ISVALIDATING",payload:!0}),O(e).then((function(e){return y.current&&(S({type:"SET_ISVALIDATING",payload:!1}),S({type:"SET_ERRORS",payload:e})),e}))}));(0,l.useEffect)((function(){i&&!0===y.current&&gr()(h.current,p.initialValues)&&P(h.current)}),[i,P]);var j=(0,l.useCallback)((function(e){var t=e&&e.values?e.values:h.current,n=e&&e.errors?e.errors:m.current?m.current:p.initialErrors||{},r=e&&e.touched?e.touched:v.current?v.current:p.initialTouched||{},o=e&&e.status?e.status:g.current?g.current:p.initialStatus;h.current=t,m.current=n,v.current=r,g.current=o;var a=function(){S({type:"RESET_FORM",payload:{isSubmitting:!!e&&!!e.isSubmitting,errors:n,touched:r,status:o,values:t,isValidating:!!e&&!!e.isValidating,submitCount:e&&e.submitCount&&"number"==typeof e.submitCount?e.submitCount:0}})};if(p.onReset){var i=p.onReset(x.values,G);xi(i)?i.then(a):a()}else a()}),[p.initialErrors,p.initialStatus,p.initialTouched]);(0,l.useEffect)((function(){!0!==y.current||gr()(h.current,p.initialValues)||(s&&(h.current=p.initialValues,j()),i&&P(h.current))}),[s,p.initialValues,j,i,P]),(0,l.useEffect)((function(){s&&!0===y.current&&!gr()(m.current,p.initialErrors)&&(m.current=p.initialErrors||Oi,S({type:"SET_ERRORS",payload:p.initialErrors||Oi}))}),[s,p.initialErrors]),(0,l.useEffect)((function(){s&&!0===y.current&&!gr()(v.current,p.initialTouched)&&(v.current=p.initialTouched||Pi,S({type:"SET_TOUCHED",payload:p.initialTouched||Pi}))}),[s,p.initialTouched]),(0,l.useEffect)((function(){s&&!0===y.current&&!gr()(g.current,p.initialStatus)&&(g.current=p.initialStatus,S({type:"SET_STATUS",payload:p.initialStatus}))}),[s,p.initialStatus,p.initialTouched]);var T=Ri((function(e){if(b.current[e]&&gi(b.current[e].validate)){var t=Si(x.values,e),n=b.current[e].validate(t);return xi(n)?(S({type:"SET_ISVALIDATING",payload:!0}),n.then((function(e){return e})).then((function(t){S({type:"SET_FIELD_ERROR",payload:{field:e,value:t}}),S({type:"SET_ISVALIDATING",payload:!1})}))):(S({type:"SET_FIELD_ERROR",payload:{field:e,value:n}}),Promise.resolve(n))}return p.validationSchema?(S({type:"SET_ISVALIDATING",payload:!0}),E(x.values,e).then((function(e){return e})).then((function(t){S({type:"SET_FIELD_ERROR",payload:{field:e,value:t[e]}}),S({type:"SET_ISVALIDATING",payload:!1})}))):Promise.resolve()})),A=(0,l.useCallback)((function(e,t){var n=t.validate;b.current[e]={validate:n}}),[]),N=(0,l.useCallback)((function(e){delete b.current[e]}),[]),R=Ri((function(e,t){return S({type:"SET_TOUCHED",payload:e}),(void 0===t?o:t)?P(x.values):Promise.resolve()})),I=(0,l.useCallback)((function(e){S({type:"SET_ERRORS",payload:e})}),[]),L=Ri((function(e,t){var r=gi(e)?e(x.values):e;return S({type:"SET_VALUES",payload:r}),(void 0===t?n:t)?P(r):Promise.resolve()})),z=(0,l.useCallback)((function(e,t){S({type:"SET_FIELD_ERROR",payload:{field:e,value:t}})}),[]),M=Ri((function(e,t,r){return S({type:"SET_FIELD_VALUE",payload:{field:e,value:t}}),(void 0===r?n:r)?P(ki(x.values,e,t)):Promise.resolve()})),F=(0,l.useCallback)((function(e,t){var n,r=t,o=e;if(!wi(e)){e.persist&&e.persist();var a=e.target?e.target:e.currentTarget,i=a.type,u=a.name,l=a.id,c=a.value,s=a.checked,f=(a.outerHTML,a.options),d=a.multiple;r=t||u||l,o=/number|range/.test(i)?(n=parseFloat(c),isNaN(n)?"":n):/checkbox/.test(i)?function(e,t,n){if("boolean"==typeof e)return Boolean(t);var r=[],o=!1,a=-1;if(Array.isArray(e))r=e,o=(a=e.indexOf(n))>=0;else if(!n||"true"==n||"false"==n)return Boolean(t);return t&&n&&!o?r.concat(n):o?r.slice(0,a).concat(r.slice(a+1)):r}(Si(x.values,r),s,c):f&&d?function(e){return Array.from(e).filter((function(e){return e.selected})).map((function(e){return e.value}))}(f):c}r&&M(r,o)}),[M,x.values]),D=Ri((function(e){if(wi(e))return function(t){return F(t,e)};F(e)})),U=Ri((function(e,t,n){return void 0===t&&(t=!0),S({type:"SET_FIELD_TOUCHED",payload:{field:e,value:t}}),(void 0===n?o:n)?P(x.values):Promise.resolve()})),B=(0,l.useCallback)((function(e,t){e.persist&&e.persist();var n=e.target,r=n.name,o=n.id,a=(n.outerHTML,t||r||o);U(a,!0)}),[U]),$=Ri((function(e){if(wi(e))return function(t){return B(t,e)};B(e)})),V=(0,l.useCallback)((function(e){gi(e)?S({type:"SET_FORMIK_STATE",payload:e}):S({type:"SET_FORMIK_STATE",payload:function(){return e}})}),[]),W=(0,l.useCallback)((function(e){S({type:"SET_STATUS",payload:e})}),[]),H=(0,l.useCallback)((function(e){S({type:"SET_ISSUBMITTING",payload:e})}),[]),q=Ri((function(){return S({type:"SUBMIT_ATTEMPT"}),P().then((function(e){var t=e instanceof Error;if(!t&&0===Object.keys(e).length){var n;try{if(void 0===(n=K()))return}catch(e){throw e}return Promise.resolve(n).then((function(e){return y.current&&S({type:"SUBMIT_SUCCESS"}),e})).catch((function(e){if(y.current)throw S({type:"SUBMIT_FAILURE"}),e}))}if(y.current&&(S({type:"SUBMIT_FAILURE"}),t))throw e}))})),Q=Ri((function(e){e&&e.preventDefault&&gi(e.preventDefault)&&e.preventDefault(),e&&e.stopPropagation&&gi(e.stopPropagation)&&e.stopPropagation(),q().catch((function(e){console.warn("Warning: An unhandled error was caught from submitForm()",e)}))})),G={resetForm:j,validateForm:P,validateField:T,setErrors:I,setFieldError:z,setFieldTouched:U,setFieldValue:M,setStatus:W,setSubmitting:H,setTouched:R,setValues:L,setFormikState:V,submitForm:q},K=Ri((function(){return f(x.values,G)})),Y=Ri((function(e){e&&e.preventDefault&&gi(e.preventDefault)&&e.preventDefault(),e&&e.stopPropagation&&gi(e.stopPropagation)&&e.stopPropagation(),j()})),X=(0,l.useCallback)((function(e){return{value:Si(x.values,e),error:Si(x.errors,e),touched:!!Si(x.touched,e),initialValue:Si(h.current,e),initialTouched:!!Si(v.current,e),initialError:Si(m.current,e)}}),[x.errors,x.touched,x.values]),J=(0,l.useCallback)((function(e){return{setValue:function(t,n){return M(e,t,n)},setTouched:function(t,n){return U(e,t,n)},setError:function(t){return z(e,t)}}}),[M,U,z]),Z=(0,l.useCallback)((function(e){var t=yi(e),n=t?e.name:e,r=Si(x.values,n),o={name:n,value:r,onChange:D,onBlur:$};if(t){var a=e.type,i=e.value,u=e.as,l=e.multiple;"checkbox"===a?void 0===i?o.checked=!!r:(o.checked=!(!Array.isArray(r)||!~r.indexOf(i)),o.value=i):"radio"===a?(o.checked=r===i,o.value=i):"select"===u&&l&&(o.value=o.value||[],o.multiple=!0)}return o}),[$,D,x.values]),ee=(0,l.useMemo)((function(){return!gr()(h.current,x.values)}),[h.current,x.values]),te=(0,l.useMemo)((function(){return void 0!==u?ee?x.errors&&0===Object.keys(x.errors).length:!1!==u&&gi(u)?u(p):u:x.errors&&0===Object.keys(x.errors).length}),[u,ee,x.errors,p]);return pi({},x,{initialValues:h.current,initialErrors:m.current,initialTouched:v.current,initialStatus:g.current,handleBlur:$,handleChange:D,handleReset:Y,handleSubmit:Q,resetForm:j,setErrors:I,setFormikState:V,setFieldTouched:U,setFieldValue:M,setFieldError:z,setStatus:W,setSubmitting:H,setTouched:R,setValues:L,submitForm:q,validateForm:P,validateField:T,isValid:te,dirty:ee,unregisterField:N,registerField:A,getFieldProps:Z,getFieldMeta:X,getFieldHelpers:J,validateOnBlur:o,validateOnChange:n,validateOnMount:i})}function Ti(e){var t=Array.isArray(e)?[]:{};for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=String(n);!0===Array.isArray(e[r])?t[r]=e[r].map((function(e){return!0===Array.isArray(e)||Vr(e)?Ti(e):""!==e?e:void 0})):Vr(e[r])?t[r]=Ti(e[r]):t[r]=""!==e[r]?e[r]:void 0}return t}function Ai(e,t,n){var r=e.slice();return t.forEach((function(t,o){if(void 0===r[o]){var a=!1!==n.clone&&n.isMergeableObject(t);r[o]=a?kr(Array.isArray(t)?[]:{},t,n):t}else n.isMergeableObject(t)?r[o]=kr(e[o],t,n):-1===e.indexOf(t)&&r.push(t)})),r}var Ni="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?l.useLayoutEffect:l.useEffect;function Ri(e){var t=(0,l.useRef)(e);return Ni((function(){t.current=e})),(0,l.useCallback)((function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.current.apply(void 0,n)}),[])}(0,l.forwardRef)((function(e,t){var n=e.action,r=hi(e,["action"]),o=null!=n?n:"#",a=(0,l.useContext)(Ci),i=a.handleReset,u=a.handleSubmit;return(0,l.createElement)("form",Object.assign({onSubmit:u,ref:t,onReset:i,action:o},r))})).displayName="Form";var Ii=function(e,t,n){var r=Li(e);return r.splice(t,0,n),r},Li=function(e){if(e){if(Array.isArray(e))return[].concat(e);var t=Object.keys(e).map((function(e){return parseInt(e)})).reduce((function(e,t){return t>e?t:e}),0);return Array.from(pi({},e,{length:t+1}))}return[]};(function(e){function t(t){var n;return(n=e.call(this,t)||this).updateArrayField=function(e,t,r){var o=n.props,a=o.name;(0,o.formik.setFormikState)((function(n){var o="function"==typeof r?r:e,i="function"==typeof t?t:e,u=ki(n.values,a,e(Si(n.values,a))),l=r?o(Si(n.errors,a)):void 0,c=t?i(Si(n.touched,a)):void 0;return vi(l)&&(l=void 0),vi(c)&&(c=void 0),pi({},n,{values:u,errors:r?ki(n.errors,a,l):n.errors,touched:t?ki(n.touched,a,c):n.touched})}))},n.push=function(e){return n.updateArrayField((function(t){return[].concat(Li(t),[di(e)])}),!1,!1)},n.handlePush=function(e){return function(){return n.push(e)}},n.swap=function(e,t){return n.updateArrayField((function(n){return function(e,t,n){var r=Li(e),o=r[t];return r[t]=r[n],r[n]=o,r}(n,e,t)}),!0,!0)},n.handleSwap=function(e,t){return function(){return n.swap(e,t)}},n.move=function(e,t){return n.updateArrayField((function(n){return function(e,t,n){var r=Li(e),o=r[t];return r.splice(t,1),r.splice(n,0,o),r}(n,e,t)}),!0,!0)},n.handleMove=function(e,t){return function(){return n.move(e,t)}},n.insert=function(e,t){return n.updateArrayField((function(n){return Ii(n,e,t)}),(function(t){return Ii(t,e,null)}),(function(t){return Ii(t,e,null)}))},n.handleInsert=function(e,t){return function(){return n.insert(e,t)}},n.replace=function(e,t){return n.updateArrayField((function(n){return function(e,t,n){var r=Li(e);return r[t]=n,r}(n,e,t)}),!1,!1)},n.handleReplace=function(e,t){return function(){return n.replace(e,t)}},n.unshift=function(e){var t=-1;return n.updateArrayField((function(n){var r=n?[e].concat(n):[e];return t<0&&(t=r.length),r}),(function(e){var n=e?[null].concat(e):[null];return t<0&&(t=n.length),n}),(function(e){var n=e?[null].concat(e):[null];return t<0&&(t=n.length),n})),t},n.handleUnshift=function(e){return function(){return n.unshift(e)}},n.handleRemove=function(e){return function(){return n.remove(e)}},n.handlePop=function(){return function(){return n.pop()}},n.remove=n.remove.bind(mi(n)),n.pop=n.pop.bind(mi(n)),n}var n,r;r=e,(n=t).prototype=Object.create(r.prototype),n.prototype.constructor=n,n.__proto__=r;var o=t.prototype;return o.componentDidUpdate=function(e){this.props.validateOnChange&&this.props.formik.validateOnChange&&!gr()(Si(e.formik.values,e.name),Si(this.props.formik.values,this.props.name))&&this.props.formik.validateForm(this.props.formik.values)},o.remove=function(e){var t;return this.updateArrayField((function(n){var r=n?Li(n):[];return t||(t=r[e]),gi(r.splice)&&r.splice(e,1),r}),!0,!0),t},o.pop=function(){var e;return this.updateArrayField((function(t){var n=t;return e||(e=n&&n.pop&&n.pop()),n}),!0,!0),e},o.render=function(){var e={push:this.push,pop:this.pop,swap:this.swap,move:this.move,insert:this.insert,replace:this.replace,unshift:this.unshift,remove:this.remove,handlePush:this.handlePush,handlePop:this.handlePop,handleSwap:this.handleSwap,handleMove:this.handleMove,handleInsert:this.handleInsert,handleReplace:this.handleReplace,handleUnshift:this.handleUnshift,handleRemove:this.handleRemove},t=this.props,n=t.component,r=t.render,o=t.children,a=t.name,i=pi({},e,{form:hi(t.formik,["validate","validationSchema"]),name:a});return n?(0,l.createElement)(n,i):r?r(i):o?"function"==typeof o?o(i):function(e){return 0===l.Children.count(e)}(o)?null:l.Children.only(o):null},t}(l.Component)).defaultProps={validateOnChange:!0},l.Component,l.Component;var zi;!function(e){e[e.button=0]="button",e[e.checkbox=1]="checkbox",e[e.color=2]="color",e[e.date=3]="date",e[e["datetime-local"]=4]="datetime-local",e[e.email=5]="email",e[e.file=6]="file",e[e.hidden=7]="hidden",e[e.image=8]="image",e[e.month=9]="month",e[e.number=10]="number",e[e.password=11]="password",e[e.radio=12]="radio",e[e.range=13]="range",e[e.reset=14]="reset",e[e.search=15]="search",e[e.submit=16]="submit",e[e.tel=17]="tel",e[e.text=18]="text",e[e.time=19]="time",e[e.url=20]="url",e[e.week=21]="week"}(zi||(zi={}));const Mi=ln.input.withConfig({displayName:"Input",componentId:"sc-3aho1u"})(Fi||(Fi=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n  min-width: fit-content;\n  &:not(input[type='checkbox']) {\n    width: ","\n  }\n  background-color: rgb(252, 252, 252);\n  color: ",";\n  border: 1px solid rgb(125, 125, 128);\n  border-radius: 5px;\n\n  font-size: 14px;\n  padding: 0.3em 0.5em;\n  line-height: 1.5em;\n  outline: none;\n  resize: none;\n"],["\n  min-width: fit-content;\n  &:not(input[type='checkbox']) {\n    width: ","\n  }\n  background-color: rgb(252, 252, 252);\n  color: ",";\n  border: 1px solid rgb(125, 125, 128);\n  border-radius: 5px;\n\n  font-size: 14px;\n  padding: 0.3em 0.5em;\n  line-height: 1.5em;\n  outline: none;\n  resize: none;\n"])),(function(e){return e.width||"100%"}),(function(e){return e.color||"rgb(118, 124, 124)"}));var Fi,Di,Ui=function(){return(Ui=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},Bi=ln.form.withConfig({displayName:"FlexSearchForm",componentId:"sc-179ybmy"})(Vi||(Vi=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n  display: flex;\n  width: 50%;\n  min-width: 300px;\n  margin: 1rem auto;\n  justify-content: space-between;\n"],["\n  display: flex;\n  width: 50%;\n  min-width: 300px;\n  margin: 1rem auto;\n  justify-content: space-between;\n"])));const $i=function(e){var t=e.getAllBooks,n=ji({initialValues:{search:""},onSubmit:function(e){t(e.search)}});return(0,r.jsx)(Bi,Ui({onSubmit:n.handleSubmit},{children:(0,r.jsx)(Qn,Ui({width:"100%"},{children:(0,r.jsx)(Mi,{type:"search",name:"search",value:n.values.search,onChange:function(e){n.handleChange(e),clearTimeout(Di);var r,o=e.currentTarget.value;o&&(r=function(){return t(o)},Di=setTimeout((function(){return r()}),1e3))}},void 0)}),void 0)}),void 0)};var Vi;const Wi=ln(Qn).withConfig({displayName:"FlexContainer",componentId:"sc-m7tbr4"})(Hi||(Hi=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n  display: flex;\n  flex-wrap: ",";\n  flex-direction: ",";\n  justify-self: ",";\n  justify-content: ",";\n  align-items: ",";\n"],["\n  display: flex;\n  flex-wrap: ",";\n  flex-direction: ",";\n  justify-self: ",";\n  justify-content: ",";\n  align-items: ",";\n"])),(function(e){return e.wrap||"nowrap"}),(function(e){return e.dir||"row"}),(function(e){return e.jstfSelf||"flex-start"}),(function(e){return e.jstfCnt||"stretch"}),(function(e){return e.algnItems||"stretch"}));var Hi;const qi=ln.button.withConfig({displayName:"Button",componentId:"sc-1x3vvm0"})(Qi||(Qi=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n  background-color: rgb(255, 255, 255);\n  color: rgb(39, 41, 41);\n  cursor: pointer;\n  width: 100%;\n  min-width: fit-content;\n  border: 1px solid rgb(148, 148, 150);\n  border-radius: 5px;\n  font-size: 0.8em;\n  font-family: sans-serif;\n  user-select: none;\n\n  font-size: 14px;\n  padding: 0.3em 0.5em;\n  line-height: 1.5em;\n  outline: none;\n  resize: none;\n\n  flex: ",";\n\n  &:disabled {\n    opacity: 0.4;\n    cursor: default;\n  }\n"],["\n  background-color: rgb(255, 255, 255);\n  color: rgb(39, 41, 41);\n  cursor: pointer;\n  width: 100%;\n  min-width: fit-content;\n  border: 1px solid rgb(148, 148, 150);\n  border-radius: 5px;\n  font-size: 0.8em;\n  font-family: sans-serif;\n  user-select: none;\n\n  font-size: 14px;\n  padding: 0.3em 0.5em;\n  line-height: 1.5em;\n  outline: none;\n  resize: none;\n\n  flex: ",";\n\n  &:disabled {\n    opacity: 0.4;\n    cursor: default;\n  }\n"])),(function(e){return e.flex||"auto"}));var Qi,Gi=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},Ki=function(){return(Ki=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},Yi="pages-list__selected-page",Xi=ln(Wi).attrs({className:Yi}).withConfig({displayName:"FlexWrapper",componentId:"sc-jsalhw"})(Zi||(Zi=Gi(["\n  width: fit-content;\n  height: fit-content;\n  justify-content: space-between;\n  align-items: center;\n  margin: 0.5rem auto;\n  user-select: none;\n  span {\n    cursor: pointer;\n  }\n  span."," {\n    font-weight: bold;\n  }\n"],["\n  width: fit-content;\n  height: fit-content;\n  justify-content: space-between;\n  align-items: center;\n  margin: 0.5rem auto;\n  user-select: none;\n  span {\n    cursor: pointer;\n  }\n  span."," {\n    font-weight: bold;\n  }\n"])),Yi);const Ji=function(e){var t=e.pagesCount,n=e.selectedPage,o=e.isFetching,a=void 0!==o&&o,i=e.onPageClick,u=[3===n?1:null,n-1>0?n-1:null,n,n+1<=t?n+1:null,n===t-2?t:null];return u=u.filter((function(e){return!!e})),(0,r.jsxs)(Xi,{children:[n>=4?(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("span",Ki({role:"button",tabIndex:0,onClick:function(){return i(1)}},{children:"1"}),void 0)," ",(0,r.jsx)("span",{children:"..."},void 0)]},void 0):"",u.map((function(e){return(0,r.jsx)("span",Ki({role:"button",tabIndex:0,onClick:function(){return i(e)},className:n===e?Yi:void 0},{children:e}),e)})),n<=t-3?(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("span",{children:"..."},void 0),(0,r.jsx)("span",Ki({role:"button",tabIndex:0,onClick:function(){return i(t)}},{children:t}),void 0)]},void 0):"",(0,r.jsx)(nu,{onSubmit:function(e){i(Number(e.page))}},void 0),(0,r.jsx)(lr,{isFetching:a},void 0)]},void 0)};var Zi,eu,tu=ln.form.withConfig({displayName:"FlexForm",componentId:"sc-1dnt5z4"})(eu||(eu=Gi(["\n  display: flex;\n  justify-content: space-between;\n  width: 60%;\n"],["\n  display: flex;\n  justify-content: space-between;\n  width: 60%;\n"]))),nu=function(e){var t=e.onSubmit,n=ji({initialValues:{page:""},onSubmit:function(e){t(e),n.resetForm(),n.setFieldTouched("page",!0,!0)},validate:function(e){var t={};return e.page?/^[^0-9]/.test(e.page)?t.page="Use only numbers 0-9":"0"===e.page&&(t.page="Page 0 are not valid"):t.page="Required",t}});return(0,l.useEffect)((function(){n.setFieldTouched("page",!0,!0)}),[]),(0,r.jsxs)(tu,Ki({onSubmit:n.handleSubmit},{children:[(0,r.jsx)(Qn,Ki({width:"70%"},{children:(0,r.jsx)(Mi,{name:"page",type:"search",placeholder:"Enter page",value:n.values.page,onChange:n.handleChange,onBlur:n.handleBlur},void 0)}),void 0),(0,r.jsx)(Qn,Ki({width:"25%"},{children:(0,r.jsx)(qi,Ki({type:"submit",disabled:!!n.errors.page},{children:"Go!"}),void 0)}),void 0)]}),void 0)},ru=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},ou=function(){return(ou=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},au=ln.div.withConfig({displayName:"ShadowDiv",componentId:"sc-1lcvlsd"})(hu||(hu=ru(["\n  ","\n"],["\n  ","\n"])),(function(e){return e.isShown&&Wt(pu||(pu=ru(["\n      background-color: rgba(0, 0, 0, 0.5);\n      width: 100vw;\n      height: 100vh;\n      position: fixed;\n      top: 0;\n      left: 0;\n      z-index: 1;\n    "],["\n      background-color: rgba(0, 0, 0, 0.5);\n      width: 100vw;\n      height: 100vh;\n      position: fixed;\n      top: 0;\n      left: 0;\n      z-index: 1;\n    "])))})),iu=ln.div.withConfig({displayName:"NullContainer",componentId:"sc-14kjnk"})(vu||(vu=ru(["\n  ","\n  display: ",";\n"],["\n  ","\n  display: ",";\n"])),(function(e){return e.hide&&Wt(mu||(mu=ru(["\n      width: 0;\n      height: 0;\n      z-index: 10;\n      margin: 0 auto;\n    "],["\n      width: 0;\n      height: 0;\n      z-index: 10;\n      margin: 0 auto;\n    "])))}),(function(e){return e.isShown?"block":"none"})),uu=ln(Qn).withConfig({displayName:"ViewArea",componentId:"sc-1wvru4k"})(bu||(bu=ru(["\n  width: 900px;\n  height: 700px;\n  z-index: 10;\n  ","\n  @media screen and (max-width: 1024px) {\n    width: 700px;\n    height: 700px;\n  }\n  @media screen and (max-width: 768px) {\n    width: 500px;\n    height: 650px;\n  }\n  @media screen and (max-width: 568px) {\n    width: 320px;\n    max-width: 100vw;\n    height: 710px;\n  }\n  @media screen and (max-width: 320px) {\n    width: 280px;\n    height: 500px;\n  }\n"],["\n  width: 900px;\n  height: 700px;\n  z-index: 10;\n  ","\n  @media screen and (max-width: 1024px) {\n    width: 700px;\n    height: 700px;\n  }\n  @media screen and (max-width: 768px) {\n    width: 500px;\n    height: 650px;\n  }\n  @media screen and (max-width: 568px) {\n    width: 320px;\n    max-width: 100vw;\n    height: 710px;\n  }\n  @media screen and (max-width: 320px) {\n    width: 280px;\n    height: 500px;\n  }\n"])),(function(e){return e.fixed?Wt(gu||(gu=ru(["\n          position: fixed;\n          left: 0;\n          top: 0;\n          bottom: 0;\n          right: 0;\n          margin: auto;\n        "],["\n          position: fixed;\n          left: 0;\n          top: 0;\n          bottom: 0;\n          right: 0;\n          margin: auto;\n        "]))):Wt(yu||(yu=ru(["\n          position: relative;\n          left: 0;\n          top: 0;\n          transform: translate(-50%, 40%);\n        "],["\n          position: relative;\n          left: 0;\n          top: 0;\n          transform: translate(-50%, 40%);\n        "])))})),lu=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=Wt.apply(void 0,[e].concat(n)).join(""),a=Kt(o);return new zt(a,o)}(wu||(wu=ru(["\n  from { \n    transform: scale3d(.5, .5, .5);\n  }\n  to { \n    transform: scale3d(1,1,1);\n  }\n"],["\n  from { \n    transform: scale3d(.5, .5, .5);\n  }\n  to { \n    transform: scale3d(1,1,1);\n  }\n"]))),cu=ln(Wi).withConfig({displayName:"ContentArea",componentId:"sc-l5fmj9"})(xu||(xu=ru(["\n  background-color: white;\n  min-height: max-content;\n  position: absolute;\n  top: 0;\n  z-index: 10;\n  animation: "," 0.5s 1;\n  animation-delay: 0.5;\n"],["\n  background-color: white;\n  min-height: max-content;\n  position: absolute;\n  top: 0;\n  z-index: 10;\n  animation: "," 0.5s 1;\n  animation-delay: 0.5;\n"])),lu),su=ln(Qn).withConfig({displayName:"LeftLeafContainer",componentId:"sc-nb36xw"})(Su||(Su=ru(["\n  width: 5vw;\n  min-width: 2.5rem;\n  background-color: rgba(0, 0, 0, 0.6);\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.4);\n  }\n  @media screen and (max-width: 568px) {\n    background-color: rgba(0, 0, 0, 0);\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.2);\n    }\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n"],["\n  width: 5vw;\n  min-width: 2.5rem;\n  background-color: rgba(0, 0, 0, 0.6);\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.4);\n  }\n  @media screen and (max-width: 568px) {\n    background-color: rgba(0, 0, 0, 0);\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.2);\n    }\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n"]))),fu=ln(Qn).withConfig({displayName:"RightLeafContainer",componentId:"sc-11ypayc"})(ku||(ku=ru(["\n  width: 5vw;\n  min-width: 2.5rem;\n  background-color: rgba(0, 0, 0, 0.6);\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.4);\n  }\n  @media screen and (max-width: 568px) {\n    background-color: rgba(0, 0, 0, 0);\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.2);\n    }\n    position: absolute;\n    top: 0;\n    right: 0;\n  }\n"],["\n  width: 5vw;\n  min-width: 2.5rem;\n  background-color: rgba(0, 0, 0, 0.6);\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.4);\n  }\n  @media screen and (max-width: 568px) {\n    background-color: rgba(0, 0, 0, 0);\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.2);\n    }\n    position: absolute;\n    top: 0;\n    right: 0;\n  }\n"])));const du=function(e){var t=e.isShown,n=e.content,o=e.multiple,a=void 0!==o&&o,i=e.onNext,u=e.onPrev,l=e.onClose,c=e.fixed,s=void 0!==c&&c;return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(au,{onClick:l,isShown:t},void 0),(0,r.jsx)(iu,ou({hide:!s,isShown:t},{children:(0,r.jsx)(uu,ou({fixed:s},{children:(0,r.jsxs)(cu,ou({jstfCnt:"space-between",algnItems:"center"},{children:[a&&(0,r.jsx)(su,{onClick:u},void 0),(0,r.jsx)(Qn,{children:n},void 0),a&&(0,r.jsx)(fu,{onClick:i},void 0)]}),void 0)}),void 0)}),void 0)]},void 0)};var pu,hu,mu,vu,gu,yu,bu,wu,xu,Su,ku;const Eu=ln.img.withConfig({displayName:"Image",componentId:"sc-1em7bn9"})(Cu||(Cu=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n  max-width: ",";\n  width: ",";\n  max-height: ",";\n  height: ",";\n  display: ",";\n  margin: ",";\n  padding: ",";\n"],["\n  max-width: ",";\n  width: ",";\n  max-height: ",";\n  height: ",";\n  display: ",";\n  margin: ",";\n  padding: ",";\n"])),(function(e){return e.maxWidth||"100%"}),(function(e){return e.width||"auto"}),(function(e){return e.maxHeight||"100%"}),(function(e){return e.height||"auto"}),(function(e){return e.display||"inline"}),(function(e){return e.margin||0}),(function(e){return e.padding||0}));var Cu;const _u=ln.span.withConfig({displayName:"Span",componentId:"sc-1dqc1fi"})(Ou||(Ou=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n  font-weight: ",";\n  color: ",";\n  font-size: ",";\n  font-family: ",";\n"],["\n  font-weight: ",";\n  color: ",";\n  font-size: ",";\n  font-family: ",";\n"])),(function(e){return e.fontWeight||"normal"}),(function(e){return e.color||"initial"}),(function(e){return e.fontSize||"1rem"}),(function(e){return e.fontFamily||"sans-serif"}));var Ou;const Pu=n.p+"bf9c4dcec8d5ad58cfcf4957e4ab5033.jpg";var ju=function(){return(ju=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},Tu=ln.div.withConfig({displayName:"BookSnippetWrapper",componentId:"sc-1ivzw3f"})(Nu||(Nu=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n  width: 250px;\n  height: 320px;\n  margin: 1rem;\n  padding: 1rem;\n  border: 2px solid transparent;\n  border-radius: 10px;\n  img {\n    user-select: none;\n  }\n  &:hover {\n    border-color: #aaa9a9;\n  }\n  div {\n    text-align: center;\n    padding: 0.2rem;\n  }\n  overflow-y: scroll;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n  * {\n    color: #5f5f5f;\n  }\n"],["\n  width: 250px;\n  height: 320px;\n  margin: 1rem;\n  padding: 1rem;\n  border: 2px solid transparent;\n  border-radius: 10px;\n  img {\n    user-select: none;\n  }\n  &:hover {\n    border-color: #aaa9a9;\n  }\n  div {\n    text-align: center;\n    padding: 0.2rem;\n  }\n  overflow-y: scroll;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n  * {\n    color: #5f5f5f;\n  }\n"])));const Au=function(e){var t,n,o,a=(0,l.useState)(""),i=a[0],u=a[1],c=i||(null===(t=e.bookInfo)||void 0===t?void 0:t.mediumCover);return(0,r.jsxs)(Tu,ju({onClick:e.onClick},{children:[(0,r.jsx)(Qn,ju({height:"fit-content",width:"fit-content",margin:"0 auto"},{children:(0,r.jsx)(Eu,{onLoad:function(e){e.currentTarget.naturalWidth<10&&u(Pu)},height:"183px",maxWidth:"180px",src:c,alt:""},void 0)}),void 0),(0,r.jsx)(Qn,ju({height:"fit-content"},{children:(0,r.jsx)(_u,ju({fontSize:"1.2rem",fontWeight:"500"},{children:null===(n=e.bookInfo)||void 0===n?void 0:n.author}),void 0)}),void 0),(0,r.jsx)(Qn,ju({height:"fit-content"},{children:(0,r.jsx)(_u,ju({fontFamily:"serif",fontSize:"1.1rem"},{children:null===(o=e.bookInfo)||void 0===o?void 0:o.title}),void 0)}),void 0)]}),void 0)};var Nu,Ru=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},Iu=function(){return(Iu=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},Lu=ln.div.withConfig({displayName:"InfoPanelWrapper",componentId:"sc-1scov35"})(Uu||(Uu=Ru(["\n  width: 100%;\n  height: 100%;\n  padding: 2rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n    padding: 1rem;\n  }\n"],["\n  width: 100%;\n  height: 100%;\n  padding: 2rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n    padding: 1rem;\n  }\n"]))),zu=ln.div.withConfig({displayName:"ImageWrapper",componentId:"sc-1fvhth5"})(Bu||(Bu=Ru(["\n  height: fit-content;\n  margin: 1rem auto;\n  width: 450px;\n  flex: 1 0 auto;\n  img {\n    max-width: 450px;\n    /* max-height: 650px; */\n  }\n  @media screen and (max-width: 1024px) {\n    width: 300px;\n    img {\n      max-width: 300px;\n      /* max-height: 650px; */\n    }\n  }\n  @media screen and (max-width: 768px) {\n    width: fit-content;\n    img {\n      max-width: 400px;\n      max-height: 350px;\n    }\n  }\n  @media screen and (max-width: 568px) {\n    width: fit-content;\n    img {\n      max-width: 300px;\n      /* max-height: 510px; */\n    }\n  }\n  @media screen and (max-width: 320px) {\n    width: fit-content;\n    img {\n      max-width: 250px;\n      max-height: 300px;\n      height: 320px;\n    }\n  }\n"],["\n  height: fit-content;\n  margin: 1rem auto;\n  width: 450px;\n  flex: 1 0 auto;\n  img {\n    max-width: 450px;\n    /* max-height: 650px; */\n  }\n  @media screen and (max-width: 1024px) {\n    width: 300px;\n    img {\n      max-width: 300px;\n      /* max-height: 650px; */\n    }\n  }\n  @media screen and (max-width: 768px) {\n    width: fit-content;\n    img {\n      max-width: 400px;\n      max-height: 350px;\n    }\n  }\n  @media screen and (max-width: 568px) {\n    width: fit-content;\n    img {\n      max-width: 300px;\n      /* max-height: 510px; */\n    }\n  }\n  @media screen and (max-width: 320px) {\n    width: fit-content;\n    img {\n      max-width: 250px;\n      max-height: 300px;\n      height: 320px;\n    }\n  }\n"]))),Mu=ln(Wi).withConfig({displayName:"FlexInfo",componentId:"sc-1ual8ko"})($u||($u=Ru(["\n  padding: 1rem 0;\n  padding-left: 1rem;\n  height: fit-content;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n"],["\n  padding: 1rem 0;\n  padding-left: 1rem;\n  height: fit-content;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n"]))),Fu=ln(Wi).withConfig({displayName:"FlexInfoCell",componentId:"sc-i09klk"})(Vu||(Vu=Ru(["\n  width: 100%;\n  flex-wrap: nowrap;\n  column-gap: 0.5rem;\n  margin: 0.5rem 0;\n"],["\n  width: 100%;\n  flex-wrap: nowrap;\n  column-gap: 0.5rem;\n  margin: 0.5rem 0;\n"])));const Du=function(e){var t=e.edition,n=(0,l.useState)(""),o=n[0],a=n[1],i=o||(null==t?void 0:t.largeCover);return(0,r.jsxs)(Lu,{children:[(0,r.jsx)(zu,{children:(0,r.jsx)(Eu,{onLoad:function(e){e.currentTarget.naturalWidth<10&&a(Pu)},src:i,alt:""},void 0)},void 0),(0,r.jsxs)(Mu,{children:[(0,r.jsxs)(Fu,{children:[(0,r.jsx)(Qn,Iu({width:"4rem"},{children:"Author:"}),void 0),(0,r.jsx)("div",{children:null==t?void 0:t.author},void 0)]},void 0),(0,r.jsxs)(Fu,{children:[(0,r.jsx)(Qn,Iu({width:"4rem"},{children:"Title:"}),void 0),(0,r.jsx)("div",{children:null==t?void 0:t.title},void 0)]},void 0),(0,r.jsxs)(Fu,{children:[(0,r.jsx)(Qn,Iu({width:"4rem"},{children:"Pages:"}),void 0),(0,r.jsx)("div",{children:null==t?void 0:t.number_of_pages},void 0)]},void 0),(0,r.jsxs)(Fu,{children:[(0,r.jsx)(Qn,Iu({width:"4rem"},{children:"Publisher:"}),void 0),(0,r.jsx)("div",{children:null==t?void 0:t.publishers},void 0)]},void 0),(0,r.jsxs)(Fu,{children:[(0,r.jsx)(Qn,Iu({width:"4rem"},{children:"Publish date:"}),void 0),(0,r.jsx)("div",{children:null==t?void 0:t.publish_date},void 0)]},void 0),(0,r.jsxs)(Fu,{children:[(0,r.jsx)(Qn,Iu({width:"4rem"},{children:"ISBN:"}),void 0),(0,r.jsx)("div",{children:null==t?void 0:t.isbn},void 0)]},void 0)]},void 0)]},void 0)};var Uu,Bu,$u,Vu,Wu=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},Hu=ln(Wi).withConfig({displayName:"FlexSearchList",componentId:"sc-17i5ndl"})(Ku||(Ku=Wu(["\n  height: fit-content;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n"],["\n  height: fit-content;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n"]))),qu=ln.div.withConfig({displayName:"CenteringDiv",componentId:"sc-11wugsy"})(Yu||(Yu=Wu(["\n  width: fit-content;\n  height: fit-content;\n  position: relative;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  font-size: 2rem;\n  text-align: center;\n"],["\n  width: fit-content;\n  height: fit-content;\n  position: relative;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  font-size: 2rem;\n  text-align: center;\n"])));function Qu(e,t){return!e.length&&t}const Gu=function(e){var t=e.itemsOnPage,n=e.pagesNum,o=e.currentPage,a=e.onPageClick,i=e.searchCount,u=e.lastQuery,c=(0,l.useState)(!1),s=c[0],f=c[1],d=(0,l.useState)(null),p=d[0],h=d[1];return(0,r.jsxs)(r.Fragment,{children:[0!==t.length?(0,r.jsx)(Ji,{pagesCount:n,selectedPage:o,onPageClick:a},void 0):null,Qu(t,i)?(0,r.jsxs)(qu,{children:['No books found on "',u,'"']},void 0):(0,r.jsx)(Hu,{children:t.map((function(e){return e?(0,r.jsx)(Au,{bookInfo:e,onClick:function(){h(e),f(!0)}},e.isbn):null}))},void 0),0!==t.length?(0,r.jsx)(Ji,{pagesCount:n,selectedPage:o,onPageClick:a},void 0):null,(0,r.jsx)(du,{content:(0,r.jsx)(Du,{edition:p},void 0),isShown:s,onClose:function(){return f(!1)},fixed:!0,multiple:!0,onNext:function(){return h((e=p,(n=t.indexOf(e)+1)===t.length-1?t[0]:t[n]));var e,n},onPrev:function(){return h((e=p,-1==(n=t.indexOf(e)-1)?t[t.length-1]:t[n]));var e,n}},void 0)]},void 0)};var Ku,Yu,Xu=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},Ju=function(){return(Ju=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},Zu=ln.div.withConfig({displayName:"ContentWrapper",componentId:"sc-j5fy2q"})(nl||(nl=Xu(["\n  box-sizing: border-box;\n  grid-area: content;\n  color: rgb(72, 78, 78);\n  margin: 1vh 1vw;\n"],["\n  box-sizing: border-box;\n  grid-area: content;\n  color: rgb(72, 78, 78);\n  margin: 1vh 1vw;\n"]))),el=ln.div.withConfig({displayName:"CenteringDiv",componentId:"sc-1xabm33"})(rl||(rl=Xu(["\n  width: fit-content;\n  height: fit-content;\n  position: relative;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n"],["\n  width: fit-content;\n  height: fit-content;\n  position: relative;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n"])));const tl=Te((function(e){return{pageSize:er(e),pagesNum:tr(e),currentPage:nr(e),itemsOnPage:rr(e),searching:or(e),lastQuery:ar(e),searchCount:ir(e)}}),Ju({},Vn))((function(e){var t=e.pageSize,n=e.pagesNum,o=e.currentPage,a=e.itemsOnPage,i=e.searching,u=e.searchCount,l=e.lastQuery,c=e.getAllBooks,s=e.getItemsOnPage,f={onPageClick:function(e){s(e)}},d={pageSize:t,pagesNum:n,currentPage:o,itemsOnPage:a,searchCount:u,lastQuery:l};return(0,r.jsx)(Zu,{children:(0,r.jsxs)(pr,{children:[(0,r.jsx)($i,{getAllBooks:c},void 0),i?(0,r.jsx)(el,{children:(0,r.jsx)(lr,{isFetching:!0},void 0)},void 0):(0,r.jsx)(Gu,Ju({},d,f),void 0)]},void 0)},void 0)}));var nl,rl,ol=function(){return(ol=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},al=ln.div.withConfig({displayName:"Wrapper",componentId:"sc-ox9twd"})(ul||(ul=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n  background-color: rgb(245, 245, 245);\n  grid-area: header;\n  height: 6vh;\n  div {\n    position: relative;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n"],["\n  background-color: rgb(245, 245, 245);\n  grid-area: header;\n  height: 6vh;\n  div {\n    position: relative;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n"])));const il=function(){return(0,r.jsx)(al,{children:(0,r.jsx)(Qn,ol({width:"fit-content",height:"fit-content"},{children:"SEARCH BOOKS WITH EASE"}),void 0)},void 0)};var ul,ll=ln.div.withConfig({displayName:"AppWrapper",componentId:"sc-1u90qif"})(sl||(sl=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(['\n  background-color: rgb(236, 236, 236);\n  z-index: 100;\n  min-height: 100%;\n  min-width: 300px;\n  display: grid;\n  grid-template-rows: 6vh 1fr 6vh;\n  grid-template-columns: 1fr;\n  grid-template-areas:\n    "header"\n    "content"\n    "footer";\n'],['\n  background-color: rgb(236, 236, 236);\n  z-index: 100;\n  min-height: 100%;\n  min-width: 300px;\n  display: grid;\n  grid-template-rows: 6vh 1fr 6vh;\n  grid-template-columns: 1fr;\n  grid-template-areas:\n    "header"\n    "content"\n    "footer";\n'])));const cl=function(){return console.log("App rendered"),(0,r.jsxs)(ll,{children:[(0,r.jsx)(il,{},void 0),(0,r.jsx)(tl,{},void 0),(0,r.jsx)(Jn,{},void 0)]},void 0)};var sl,fl,dl,pl=function(){return(pl=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},hl=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=Wt.apply(void 0,[e].concat(n)),a="sc-global-"+Kt(JSON.stringify(o)),i=new un(o,a);function u(e){var t=Rt(),n=It(),r=(0,l.useContext)(tn),o=(0,l.useRef)(t.allocateGSInstance(a)).current;return(0,l.useLayoutEffect)((function(){return c(o,e,t,r,n),function(){return i.removeStyles(o,t)}}),[o,e,t,r,n]),null}function c(e,t,n,r,o){if(i.isStatic)i.renderStyles(e,Xe,n,o);else{var a=Ue({},t,{theme:Ht(t,r,u.defaultProps)});i.renderStyles(e,a,n,o)}}return l.memo(u)}(fl||(fl=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n    * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n    }\n    body {\n        color: rgb(122, 134, 134);\n    }\n    html,\n    body,\n    #root {\n        height: 100vh;\n    }\n    a {\n      color: rgb(122, 134, 134);\n      text-decoration: none;\n    }\n    a.active {\n      color: rgb(148, 160, 160);\n    }\n"],["\n    * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n    }\n    body {\n        color: rgb(122, 134, 134);\n    }\n    html,\n    body,\n    #root {\n        height: 100vh;\n    }\n    a {\n      color: rgb(122, 134, 134);\n      text-decoration: none;\n    }\n    a.active {\n      color: rgb(148, 160, 160);\n    }\n"])));dl=(0,o.w)((function(){return(0,r.jsx)(W,pl({hashType:"slash"},{children:(0,r.jsxs)(ae,pl({store:qn},{children:[(0,r.jsx)(cl,{},void 0),(0,r.jsx)(hl,{},void 0)]}),void 0)}),void 0)})),a.render((0,r.jsx)(dl,{},void 0),document.getElementById("root"))}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n(9213),n(2597)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3Mvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvcmVhY3QtZmFzdC1jb21wYXJlL2luZGV4LmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWhvdC1sb2FkZXIvZGlzdC9yZWFjdC1ob3QtbG9hZGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWhvdC1sb2FkZXIvcGF0Y2guanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvcmVhY3QtaG90LWxvYWRlci9yb290LmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3NoYWxsb3dlcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9lc20vcmVzb2x2ZS1wYXRobmFtZS5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzbS9oaXN0b3J5LmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQvZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbW9kdWxlcy9IaXN0b3J5Q29udGV4dC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbW9kdWxlcy9jcmVhdGVOYW1lQ29udGV4dC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbW9kdWxlcy9Sb3V0ZXJDb250ZXh0LmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9tb2R1bGVzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbW9kdWxlcy9NZW1vcnlSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL21vZHVsZXMvTGlmZWN5Y2xlLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9tb2R1bGVzL21hdGNoUGF0aC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbW9kdWxlcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbW9kdWxlcy9TdGF0aWNSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL21vZHVsZXMvU3dpdGNoLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9tb2R1bGVzL2hvb2tzLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vbW9kdWxlcy9Ccm93c2VyUm91dGVyLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vbW9kdWxlcy9IYXNoUm91dGVyLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vbW9kdWxlcy91dGlscy9sb2NhdGlvblV0aWxzLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vbW9kdWxlcy9MaW5rLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vbW9kdWxlcy9OYXZMaW5rLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvQ29udGV4dC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9iYXRjaC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL1Byb3ZpZGVyLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL2JpbmRBY3Rpb25DcmVhdG9ycy5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21lcmdlUHJvcHMuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9jb25uZWN0LmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVNlbGVjdG9yLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxpcy9kaXN0L3N0eWxpcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91bml0bGVzcy9kaXN0L3VuaXRsZXNzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2lzLXByb3AtdmFsaWQvZGlzdC9pcy1wcm9wLXZhbGlkLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL21lbW9pemUvZGlzdC9tZW1vaXplLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3N0eWxlZC1jb21wb25lbnRzL3NyYy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL3NoZWV0L1RhZy5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9zcmMvc2hlZXQvU2hlZXQuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL3V0aWxzL2lzU3RhdGljUnVsZXMuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL21vZGVscy9LZXlmcmFtZXMuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL21vZGVscy9TdHlsZWRDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL21vZGVscy9TZXJ2ZXJTdHlsZVNoZWV0LmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL3N0eWxlZC1jb21wb25lbnRzL3NyYy9tb2RlbHMvR2xvYmFsU3R5bGUuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMi5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9yZWR1eC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL3NyYy9hcGkvYm9va3MtYXBpLnRzIiwid2VicGFjazovL3dwLXNuLy4vc3JjL2FwaS9jb3ZlcnMtYXBpLnRzIiwid2VicGFjazovL3dwLXNuLy4vc3JjL2FwaS9zZWFyY2gtYXBpLnRzIiwid2VicGFjazovL3dwLXNuLy4vc3JjL3JlZHV4L2FwcC1yZWR1Y2VyLnRzIiwid2VicGFjazovL3dwLXNuLy4vc3JjL3JlZHV4L3N0b3JlLXJlZHV4LnRzIiwid2VicGFjazovL3dwLXNuLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL0Rpdi50c3giLCJ3ZWJwYWNrOi8vd3Atc24vLi9zcmMvY29tcG9uZW50cy9Gb290ZXIvRm9vdGVyLnRzeCIsIndlYnBhY2s6Ly93cC1zbi8uL3NyYy9yZWR1eC9zZWxlY3RvcnMudHMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9zcmMvaW1hZ2VzL3ByZWxvYWRlci5naWYiLCJ3ZWJwYWNrOi8vd3Atc24vLi9zcmMvY29tcG9uZW50cy9jb21tb24vUHJlbG9hZGVyLnRzeCIsIndlYnBhY2s6Ly93cC1zbi8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9TaW5nbGVQYW5lL1NpbmdsZVBhbmUudHN4Iiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2RlZXBtZXJnZS9kaXN0L2VzLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19TeW1ib2wuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vdmVyQXJnLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0UHJvdG90eXBlLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2VxLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXNzb2NJbmRleE9mLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fTGlzdENhY2hlLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0LmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY29yZUpzRGF0YS5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzTWFza2VkLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fdG9Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNOYXRpdmUuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXROYXRpdmUuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRWYWx1ZS5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX01hcC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX25hdGl2ZUNyZWF0ZS5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hHZXQuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoSGFzLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fSGFzaC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hDbGVhci5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hEZWxldGUuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoU2V0LmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0TWFwRGF0YS5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzS2V5YWJsZS5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX01hcENhY2hlLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlU2V0LmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU3RhY2suanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja0NsZWFyLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc3RhY2tEZWxldGUuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja0dldC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrSGFzLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc3RhY2tTZXQuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VBc3NpZ25WYWx1ZS5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Fzc2lnblZhbHVlLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY29weU9iamVjdC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJyYXkuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQnVmZmVyLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9zdHViRmFsc2UuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc0luZGV4LmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0xlbmd0aC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlVW5hcnkuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19ub2RlVXRpbC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlMaWtlS2V5cy5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VUaW1lcy5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzUHJvdG90eXBlLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbmF0aXZlS2V5cy5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VLZXlzLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0FycmF5TGlrZS5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMva2V5cy5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19uYXRpdmVLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2tleXNJbi5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Nsb25lQnVmZmVyLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY29weUFycmF5LmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9zdHViQXJyYXkuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRTeW1ib2xzLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlGaWx0ZXIuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hcnJheVB1c2guanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRTeW1ib2xzSW4uanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlR2V0QWxsS2V5cy5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldEFsbEtleXMuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRBbGxLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19EYXRhVmlldy5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19TZXQuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19XZWFrTWFwLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0VGFnLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faW5pdENsb25lQXJyYXkuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19VaW50OEFycmF5LmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2xvbmVBcnJheUJ1ZmZlci5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Nsb25lUmVnRXhwLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2xvbmVTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pbml0Q2xvbmVCeVRhZy5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Nsb25lRGF0YVZpZXcuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jbG9uZVR5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlQ3JlYXRlLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc01hcC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc01hcC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNTZXQuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNTZXQuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlQ2xvbmUuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pbml0Q2xvbmVPYmplY3QuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jb3B5U3ltYm9sc0luLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUFzc2lnbkluLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY29weVN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlQXNzaWduLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlFYWNoLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9jbG9uZS5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FycmF5TWFwLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1N5bWJvbC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0cmluZ1RvUGF0aC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21lbW9pemVDYXBwZWQuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL190b0tleS5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvdG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3RvUGF0aC5qcyIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvY2xvbmVEZWVwLmpzIiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2Zvcm1pay9zcmMvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvZm9ybWlrL3NyYy9Gb3JtaWtDb250ZXh0LnRzeCIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9mb3JtaWsvc3JjL0Zvcm1pay50c3giLCJ3ZWJwYWNrOi8vd3Atc24vLi9ub2RlX21vZHVsZXMvZm9ybWlrL3NyYy9Gb3JtLnRzeCIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9mb3JtaWsvc3JjL0ZpZWxkQXJyYXkudHN4Iiwid2VicGFjazovL3dwLXNuLy4vbm9kZV9tb2R1bGVzL2Zvcm1pay9zcmMvRXJyb3JNZXNzYWdlLnRzeCIsIndlYnBhY2s6Ly93cC1zbi8uL25vZGVfbW9kdWxlcy9mb3JtaWsvc3JjL0Zhc3RGaWVsZC50c3giLCJ3ZWJwYWNrOi8vd3Atc24vLi9zcmMvY29tcG9uZW50cy9jb21tb24vSW5wdXQudHN4Iiwid2VicGFjazovL3dwLXNuLy4vc3JjL2NvbXBvbmVudHMvQ29udGVudC9TZWFyY2hGb3JtLnRzeCIsIndlYnBhY2s6Ly93cC1zbi8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9GbGV4Q29udGFpbmVyLnRzeCIsIndlYnBhY2s6Ly93cC1zbi8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9CdXR0b24udHN4Iiwid2VicGFjazovL3dwLXNuLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL1BhZ2VzTGlzdC9QYWdlc0xpc3QudHN4Iiwid2VicGFjazovL3dwLXNuLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL1ZpZXdQYW5lbC9WaWV3UGFuZWwudHN4Iiwid2VicGFjazovL3dwLXNuLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL0ltYWdlLnRzeCIsIndlYnBhY2s6Ly93cC1zbi8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9TcGFuLnRzeCIsIndlYnBhY2s6Ly93cC1zbi8uL3NyYy9pbWFnZXMvZGVmYXVsdC1jb3Zlci5qcGciLCJ3ZWJwYWNrOi8vd3Atc24vLi9zcmMvY29tcG9uZW50cy9Db250ZW50L0Jvb2tTbmlwcGV0LnRzeCIsIndlYnBhY2s6Ly93cC1zbi8uL3NyYy9jb21wb25lbnRzL0NvbnRlbnQvSW5mb1BhbmUudHN4Iiwid2VicGFjazovL3dwLXNuLy4vc3JjL2NvbXBvbmVudHMvQ29udGVudC9TZWFyY2hMaXN0LnRzeCIsIndlYnBhY2s6Ly93cC1zbi8uL3NyYy9jb21wb25lbnRzL0NvbnRlbnQvQ29udGVudC50c3giLCJ3ZWJwYWNrOi8vd3Atc24vLi9zcmMvY29tcG9uZW50cy9IZWFkZXIvSGVhZGVyLnRzeCIsIndlYnBhY2s6Ly93cC1zbi8uL3NyYy9BcHAudHN4Iiwid2VicGFjazovL3dwLXNuLy4vc3JjL2luZGV4LnRzeCIsIndlYnBhY2s6Ly93cC1zbi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93cC1zbi93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly93cC1zbi93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vd3Atc24vd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly93cC1zbi93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3dwLXNuL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3dwLXNuL3dlYnBhY2svc3RhcnR1cCJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidXRpbHMiLCJzZXR0bGUiLCJjb29raWVzIiwiYnVpbGRVUkwiLCJidWlsZEZ1bGxQYXRoIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJjb25maWciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlcXVlc3REYXRhIiwiZGF0YSIsInJlcXVlc3RIZWFkZXJzIiwiaGVhZGVycyIsImlzRm9ybURhdGEiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiQXV0aG9yaXphdGlvbiIsImJ0b2EiLCJmdWxsUGF0aCIsImJhc2VVUkwiLCJ1cmwiLCJvcGVuIiwibWV0aG9kIiwidG9VcHBlckNhc2UiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwidGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJyZXNwb25zZVVSTCIsImluZGV4T2YiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbmFib3J0Iiwib25lcnJvciIsIm9udGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInhzcmZDb29raWVOYW1lIiwicmVhZCIsInVuZGVmaW5lZCIsInhzcmZIZWFkZXJOYW1lIiwiZm9yRWFjaCIsInZhbCIsImtleSIsInRvTG93ZXJDYXNlIiwic2V0UmVxdWVzdEhlYWRlciIsImlzVW5kZWZpbmVkIiwiZSIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJwcm9taXNlIiwidGhlbiIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsImJpbmQiLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiY29udGV4dCIsImluc3RhbmNlIiwicHJvdG90eXBlIiwiZXh0ZW5kIiwiYXhpb3MiLCJjcmVhdGUiLCJpbnN0YW5jZUNvbmZpZyIsImRlZmF1bHRzIiwiQ2FuY2VsIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiaXNBeGlvc0Vycm9yIiwiZGVmYXVsdCIsIm1lc3NhZ2UiLCJ0aGlzIiwidG9TdHJpbmciLCJfX0NBTkNFTF9fIiwiZXhlY3V0b3IiLCJUeXBlRXJyb3IiLCJyZXNvbHZlUHJvbWlzZSIsInRva2VuIiwicmVhc29uIiwidGhyb3dJZlJlcXVlc3RlZCIsInNvdXJjZSIsImMiLCJ2YWx1ZSIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9ycyIsImFyZ3VtZW50cyIsImNoYWluIiwiaW50ZXJjZXB0b3IiLCJ1bnNoaWZ0IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJwdXNoIiwibGVuZ3RoIiwic2hpZnQiLCJnZXRVcmkiLCJyZXBsYWNlIiwiaGFuZGxlcnMiLCJ1c2UiLCJlamVjdCIsImlkIiwiZm4iLCJoIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwicmVxdWVzdGVkVVJMIiwiZW5oYW5jZUVycm9yIiwiY29kZSIsImVycm9yIiwiRXJyb3IiLCJ0cmFuc2Zvcm1EYXRhIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRyYW5zZm9ybVJlcXVlc3QiLCJtZXJnZSIsImNvbW1vbiIsImFkYXB0ZXIiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInRvSlNPTiIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsIm51bWJlciIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsInN0YWNrIiwiY29uZmlnMSIsImNvbmZpZzIiLCJ2YWx1ZUZyb21Db25maWcyS2V5cyIsIm1lcmdlRGVlcFByb3BlcnRpZXNLZXlzIiwiZGVmYXVsdFRvQ29uZmlnMktleXMiLCJkaXJlY3RNZXJnZUtleXMiLCJnZXRNZXJnZWRWYWx1ZSIsInRhcmdldCIsImlzUGxhaW5PYmplY3QiLCJpc0FycmF5Iiwic2xpY2UiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwicHJvcCIsImF4aW9zS2V5cyIsImNvbmNhdCIsIm90aGVyS2V5cyIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJ2YWxpZGF0ZVN0YXR1cyIsImZucyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsInByb2Nlc3MiLCJjYWxsIiwiaXNBcnJheUJ1ZmZlciIsImlzQnVmZmVyIiwiaXNTdHJlYW0iLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0FycmF5QnVmZmVyVmlldyIsImJ1ZmZlciIsImlzVVJMU2VhcmNoUGFyYW1zIiwiaXNPYmplY3QiLCJKU09OIiwic3RyaW5naWZ5IiwicGFyc2UiLCJtYXhDb250ZW50TGVuZ3RoIiwibWF4Qm9keUxlbmd0aCIsInRoaXNBcmciLCJhcmdzIiwiQXJyYXkiLCJpIiwiYXBwbHkiLCJlbmNvZGUiLCJzZXJpYWxpemVkUGFyYW1zIiwicGFydHMiLCJ2IiwiaXNEYXRlIiwidG9JU09TdHJpbmciLCJqb2luIiwiaGFzaG1hcmtJbmRleCIsInJlbGF0aXZlVVJMIiwid3JpdGUiLCJleHBpcmVzIiwicGF0aCIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsImlzTnVtYmVyIiwiRGF0ZSIsInRvR01UU3RyaW5nIiwiaXNTdHJpbmciLCJkb2N1bWVudCIsIm1hdGNoIiwiUmVnRXhwIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVtb3ZlIiwibm93IiwidGVzdCIsInBheWxvYWQiLCJvcmlnaW5VUkwiLCJtc2llIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidXJsUGFyc2luZ05vZGUiLCJjcmVhdGVFbGVtZW50IiwicmVzb2x2ZVVSTCIsImhyZWYiLCJzZXRBdHRyaWJ1dGUiLCJwcm90b2NvbCIsImhvc3QiLCJzZWFyY2giLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJjaGFyQXQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlcXVlc3RVUkwiLCJwYXJzZWQiLCJub3JtYWxpemVkTmFtZSIsImlnbm9yZUR1cGxpY2F0ZU9mIiwic3BsaXQiLCJsaW5lIiwidHJpbSIsInN1YnN0ciIsImNhbGxiYWNrIiwiYXJyIiwiZ2V0UHJvdG90eXBlT2YiLCJpc0Z1bmN0aW9uIiwib2JqIiwibCIsImhhc093blByb3BlcnR5IiwiY29uc3RydWN0b3IiLCJGb3JtRGF0YSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwicGlwZSIsIlVSTFNlYXJjaFBhcmFtcyIsInByb2R1Y3QiLCJyZXN1bHQiLCJhc3NpZ25WYWx1ZSIsImEiLCJiIiwic3RyIiwic3RyaXBCT00iLCJjb250ZW50IiwiY2hhckNvZGVBdCIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwidHlwZSIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiY29tcG9uZW50IiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsInJlbmRlciIsIk1lbW8iLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZGVzY3JpcHRvciIsIlN5bWJvbCIsImZvciIsImQiLCJmIiwiZyIsImsiLCJtIiwibiIsInAiLCJxIiwiciIsInQiLCJ3IiwieCIsInkiLCJ6IiwidSIsIiQkdHlwZW9mIiwiQSIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkZyYWdtZW50IiwiTGF6eSIsIlBvcnRhbCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJhc3NpZ24iLCJ0ZXN0MSIsIlN0cmluZyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwibWFwIiwidGVzdDMiLCJsZXR0ZXIiLCJlcnIiLCJzaG91bGRVc2VOYXRpdmUiLCJmcm9tIiwic3ltYm9scyIsInRvIiwicyIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wcyIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImJvb2wiLCJmdW5jIiwib2JqZWN0Iiwic3RyaW5nIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImVsZW1lbnQiLCJlbGVtZW50VHlwZSIsImluc3RhbmNlT2YiLCJub2RlIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsImFhIiwiYmEiLCJTZXQiLCJjYSIsImRhIiwiZWEiLCJhZGQiLCJmYSIsImhhIiwiaWEiLCJqYSIsImthIiwiQiIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwiRCIsIm9hIiwicGEiLCJxYSIsIm1hIiwiaXNOYU4iLCJuYSIsImxhIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJyYSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwic2EiLCJ0YSIsInVhIiwid2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkUiLCJNYSIsIkthIiwiaXRlcmF0b3IiLCJMYSIsIk5hIiwiT2EiLCJQYSIsInByZXBhcmVTdGFja1RyYWNlIiwic2V0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsIlFhIiwidGFnIiwiX3JlbmRlciIsIlJhIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwiZ2V0IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJVYSIsIldhIiwiY2hlY2tlZCIsIlhhIiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJZYSIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiWmEiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJvd25lckRvY3VtZW50IiwiZWIiLCJjaGlsZHJlbiIsIkNoaWxkcmVuIiwiZGIiLCJmYiIsIm9wdGlvbnMiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiZ2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImhiIiwiaWIiLCJqYiIsInRleHRDb250ZW50Iiwia2IiLCJsYiIsIm1iIiwibmIiLCJvYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJwYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwicWIiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInJiIiwic2IiLCJ0YiIsInN0eWxlIiwic2V0UHJvcGVydHkiLCJzdWJzdHJpbmciLCJ1YiIsIm1lbnVpdGVtIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsInZiIiwid2IiLCJpcyIsInhiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk9iIiwiUGIiLCJRYiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJSYiIsIm9uRXJyb3IiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJaYiIsImFsdGVybmF0ZSIsInJldHVybiIsImZsYWdzIiwiJGIiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImFjIiwiY2MiLCJjaGlsZCIsInNpYmxpbmciLCJjdXJyZW50IiwiYmMiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm5jIiwiTWFwIiwib2MiLCJwYyIsInFjIiwicmMiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRDb250YWluZXJzIiwic2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJ0YyIsInZjIiwid2MiLCJsYW5lUHJpb3JpdHkiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJjb250YWluZXJJbmZvIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJCYyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsIkNjIiwiRGMiLCJFYyIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIkZjIiwiR2MiLCJIYyIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJ1bnN0YWJsZV9ub3ciLCJGIiwiUmMiLCJVYyIsInBlbmRpbmdMYW5lcyIsImV4cGlyZWRMYW5lcyIsInN1c3BlbmRlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJWYyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsIldjIiwiWGMiLCJZYyIsIlpjIiwiJGMiLCJldmVudFRpbWVzIiwiTWF0aCIsImNsejMyIiwiYmQiLCJjZCIsImxvZyIsIkxOMiIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsInVjIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSmQiLCJjbGlwYm9hcmREYXRhIiwiTGQiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJPZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZCIsIlJkIiwicmVwZWF0IiwibG9jYWxlIiwid2hpY2giLCJUZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWmQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIiRkIiwiYWUiLCJiZSIsImRvY3VtZW50TW9kZSIsImNlIiwiZGUiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwibGUiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJyYW5nZSIsInRlbCIsInRleHQiLCJ0aW1lIiwid2VlayIsIm1lIiwibmUiLCJvZSIsImV2ZW50IiwibGlzdGVuZXJzIiwicGUiLCJxZSIsInJlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIm9uaW5wdXQiLCJBZSIsImRldGFjaEV2ZW50IiwiQmUiLCJDZSIsImF0dGFjaEV2ZW50IiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiTWUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTmUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJPZSIsImNvbnRlbnRFZGl0YWJsZSIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsInN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJlbmQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsIlZlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCJZYiIsImxpc3RlbmVyIiwiRyIsIiRlIiwiaGFzIiwiYWYiLCJiZiIsInJhbmRvbSIsImNmIiwiZGYiLCJjYXB0dXJlIiwicGFzc2l2ZSIsIk5iIiwiZWYiLCJmZiIsInBhcmVudFdpbmRvdyIsImdmIiwiaGYiLCJKIiwiSyIsIlEiLCJMIiwiamUiLCJjaGFyIiwia2UiLCJqZiIsImtmIiwibGYiLCJtZiIsImF1dG9Gb2N1cyIsIm5mIiwiX19odG1sIiwib2YiLCJzZXRUaW1lb3V0IiwicGYiLCJjbGVhclRpbWVvdXQiLCJxZiIsInJmIiwic2YiLCJwcmV2aW91c1NpYmxpbmciLCJ0ZiIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiSCIsIkkiLCJDZiIsIk0iLCJOIiwiRGYiLCJFZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkZmIiwiR2YiLCJIZiIsIklmIiwiZ2V0Q2hpbGRDb250ZXh0IiwiSmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIktmIiwiTGYiLCJNZiIsIk5mIiwiT2YiLCJQZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiUWYiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlJmIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwiU2YiLCJUZiIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiVWYiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsIlZmIiwiV2YiLCJYZiIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwiWWYiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJPIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwiX2N1cnJlbnRWYWx1ZSIsInNnIiwiY2hpbGRMYW5lcyIsInRnIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJ1ZyIsInZnIiwib2JzZXJ2ZWRCaXRzIiwibmV4dCIsInJlc3BvbmRlcnMiLCJ3ZyIsInhnIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwieWciLCJ6ZyIsImV2ZW50VGltZSIsImxhbmUiLCJBZyIsIkJnIiwiQ2ciLCJDIiwiRGciLCJFZyIsIkZnIiwiQ29tcG9uZW50IiwicmVmcyIsIkdnIiwiS2ciLCJpc01vdW50ZWQiLCJfcmVhY3RJbnRlcm5hbHMiLCJlbnF1ZXVlU2V0U3RhdGUiLCJIZyIsIklnIiwiSmciLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiTGciLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIk1nIiwic3RhdGUiLCJ1cGRhdGVyIiwiTmciLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJPZyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiUGciLCJRZyIsInJlZiIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJSZyIsIlNnIiwibGFzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJmaXJzdEVmZmVjdCIsImluZGV4IiwiVGciLCJVZyIsIm1vZGUiLCJWZyIsImltcGxlbWVudGF0aW9uIiwiV2ciLCJYZyIsImRvbmUiLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImVoIiwiZG9jdW1lbnRFbGVtZW50IiwidGFnTmFtZSIsImZoIiwiZ2giLCJoaCIsIlAiLCJpaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBlbmRpbmdQcm9wcyIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwidmgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwid2giLCJ4aCIsIlIiLCJTIiwiVCIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiYmFzZVF1ZXVlIiwicXVldWUiLCJJaCIsIkpoIiwiS2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiYWN0aW9uIiwiZWFnZXJSZWR1Y2VyIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJMaCIsIk1oIiwiX2dldFZlcnNpb24iLCJfc291cmNlIiwibXV0YWJsZVJlYWRMYW5lcyIsIk5oIiwiVSIsInVzZVN0YXRlIiwiZ2V0U25hcHNob3QiLCJzdWJzY3JpYmUiLCJ1c2VFZmZlY3QiLCJzZXRTbmFwc2hvdCIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiZGVzdHJveSIsImRlcHMiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJkaSIsInJlYWRDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZU9wYXF1ZUlkZW50aWZpZXIiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJ1ZiIsImVpIiwiUmVhY3RDdXJyZW50T3duZXIiLCJmaSIsImdpIiwiaGkiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwiYmFzZUxhbmVzIiwibmkiLCJvaSIsInBpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicWkiLCJyaSIsInBlbmRpbmdDb250ZXh0IiwiQmkiLCJEaSIsIkVpIiwic2kiLCJyZXRyeUxhbmUiLCJ0aSIsImZhbGxiYWNrIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJ1aSIsInVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxNb2RlIiwiQWkiLCJGaSIsIkdpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uQ2xpY2siLCJvbmNsaWNrIiwic2l6ZSIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVRleHROb2RlIiwiViIsIkhpIiwiSWkiLCJXIiwiSmkiLCJLaSIsIkxpIiwiTWkiLCJOaSIsImNvbnNvbGUiLCJPaSIsIldlYWtNYXAiLCJQaSIsIlFpIiwiUmkiLCJTaSIsImNvbXBvbmVudERpZENhdGNoIiwiVGkiLCJjb21wb25lbnRTdGFjayIsIlVpIiwiV2Vha1NldCIsIlZpIiwiV2kiLCJYaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiWWkiLCJaaSIsIiRpIiwiZm9jdXMiLCJhaiIsImRpc3BsYXkiLCJiaiIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJjaiIsImRqIiwiZWoiLCJmaiIsImdqIiwiaGoiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiaWoiLCJqaiIsImtqIiwibGoiLCJtaiIsIm5qIiwiY2VpbCIsIm9qIiwicGoiLCJYIiwiWSIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIkluZmluaXR5Iiwid2oiLCJjayIsIloiLCJ4aiIsInlqIiwiemoiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIkVqIiwiRmoiLCJHaiIsIkhqIiwiSWoiLCJKaiIsIlNjIiwiS2oiLCJMaiIsIk1qIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiY2FsbGJhY2tQcmlvcml0eSIsIlRjIiwiTmoiLCJPaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiVWoiLCJ0aW1lb3V0SGFuZGxlIiwiV2oiLCJYaiIsInBpbmdDYWNoZSIsIllqIiwiWmoiLCJ2YSIsImFrIiwiYmsiLCJkayIsInJhbmdlQ291bnQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiZWsiLCJtaW4iLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsIm9uQ29tbWl0RmliZXJSb290IiwiZmsiLCJnayIsImlrIiwiaXNSZWFjdENvbXBvbmVudCIsInBlbmRpbmdDaGlsZHJlbiIsImprIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImtrIiwibGsiLCJtayIsIm5rIiwib2siLCJxayIsImh5ZHJhdGlvbk9wdGlvbnMiLCJtdXRhYmxlU291cmNlcyIsIl9pbnRlcm5hbFJvb3QiLCJyayIsInRrIiwiaGFzQXR0cmlidXRlIiwic2siLCJ1ayIsImhrIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwidW5tb3VudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwiVmoiLCJ2ayIsIkV2ZW50cyIsIndrIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwidmVyc2lvbiIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ4ayIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwieWsiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjaGVja0RDRSIsImtleUxpc3QiLCJoYXNQcm9wIiwiaGFzRWxlbWVudFR5cGUiLCJlcXVhbCIsImFyckEiLCJhcnJCIiwiZGF0ZUEiLCJkYXRlQiIsImdldFRpbWUiLCJyZWdleHBBIiwicmVnZXhwQiIsIndhcm4iLCJSZWFjdCIsIkFwcENvbnRhaW5lciIsIndhcm5BYm91dEhNUkRpc2FibGVkIiwib25seSIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJncm91cHMiLCJwcmVmaXgiLCJkZWxpbWl0ZXIiLCJvcHRpb25hbCIsInBhcnRpYWwiLCJhc3RlcmlzayIsInBhdHRlcm4iLCJhdHRhY2hLZXlzIiwicmVnZXhwVG9SZWdleHAiLCJhcnJheVRvUmVnZXhwIiwidG9rZW5zVG9SZWdFeHAiLCJzdHJpbmdUb1JlZ2V4cCIsImNvbXBpbGUiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwiUEFUSF9SRUdFWFAiLCJyZXMiLCJ0b2tlbnMiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZXhlYyIsImVzY2FwZWQiLCJncm91cCIsIm1vZGlmaWVyIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJtYXRjaGVzIiwib3B0cyIsInByZXR0eSIsInNlZ21lbnQiLCJqIiwic2Vuc2l0aXZlIiwic3RyaWN0Iiwicm91dGUiLCJlbmRzV2l0aERlbGltaXRlciIsIl9fc2VsZiIsIl9fc291cmNlIiwianN4IiwianN4cyIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJlc2NhcGUiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiY291bnQiLCJ0b0FycmF5IiwiUHVyZUNvbXBvbmVudCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIm1lbW8iLCJwZXJmb3JtYW5jZSIsIk1lc3NhZ2VDaGFubmVsIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZsb29yIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwicG9wIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJwcmlvcml0eUxldmVsIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsImRlbGF5IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwib2JqQSIsIm9iakIiLCJjb21wYXJlQ29udGV4dCIsInJldCIsImtleXNBIiwia2V5c0IiLCJiSGFzT3duUHJvcGVydHkiLCJpZHgiLCJ2YWx1ZUEiLCJ2YWx1ZUIiLCJfc2V0UHJvdG90eXBlT2YiLCJvIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImlzQWJzb2x1dGUiLCJzcGxpY2VPbmUiLCJsaXN0IiwiY29uZGl0aW9uIiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdHJpcEJhc2VuYW1lIiwiaGFzQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJjcmVhdGVQYXRoIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsImhhc1RyYWlsaW5nU2xhc2giLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJ1cCIsInBhcnQiLCJjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImFwcGVuZExpc3RlbmVyIiwiaXNBY3RpdmUiLCJpdGVtIiwibm90aWZ5TGlzdGVuZXJzIiwiX2xlbiIsIl9rZXkiLCJjYW5Vc2VET00iLCJnZXRDb25maXJtYXRpb24iLCJjb25maXJtIiwiSGFzaENoYW5nZUV2ZW50JDEiLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImRlY29kZVBhdGgiLCJub3NsYXNoIiwic2xhc2giLCJzdHJpcEhhc2giLCJnZXRIYXNoUGF0aCIsInJlcGxhY2VIYXNoUGF0aCIsImNyZWF0ZUhhc2hIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsImhpc3RvcnkiLCJfcHJvcHMiLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMkaGFzaFR5cGUiLCJoYXNoVHlwZSIsImJhc2VuYW1lIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiZ2V0RE9NTG9jYXRpb24iLCJ0cmFuc2l0aW9uTWFuYWdlciIsIm5leHRTdGF0ZSIsImZvcmNlTmV4dFBvcCIsImlnbm9yZVBhdGgiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZW5jb2RlZFBhdGgiLCJwcmV2TG9jYXRpb24iLCJsb2NhdGlvbnNBcmVFcXVhbCQkMSIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsImZyb21JbmRleCIsImRlbHRhIiwiZ28iLCJyZXZlcnRQb3AiLCJoYW5kbGVQb3AiLCJpbml0aWFsTG9jYXRpb24iLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJpc0Jsb2NrZWQiLCJjcmVhdGVIcmVmIiwiYmFzZVRhZyIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRBdHRyaWJ1dGUiLCJwdXNoSGFzaFBhdGgiLCJwcmV2SW5kZXgiLCJuZXh0UGF0aHMiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJibG9jayIsInVuYmxvY2siLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsIk1BWF9TSUdORURfMzFfQklUX0lOVCIsImNvbW1vbmpzR2xvYmFsIiwiZ2xvYmFsVGhpcyIsImNyZWF0ZUV2ZW50RW1pdHRlciIsIm9uIiwiaGFuZGxlciIsIm9mZiIsIm5ld1ZhbHVlIiwiY2hhbmdlZEJpdHMiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsIl9Db25zdW1lciRjb250ZXh0VHlwZSIsImNvbnRleHRQcm9wIiwiX0NvbXBvbmVudCIsIl90aGlzIiwiZW1pdHRlciIsIl9wcm90byIsIl9yZWYiLCJuZXh0UHJvcHMiLCJvbGRWYWx1ZSIsIm9iamVjdElzIiwiX0NvbXBvbmVudDIiLCJfdGhpczIiLCJvblVwZGF0ZSIsIl9wcm90bzIiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJoaXN0b3J5Q29udGV4dCIsImNyZWF0ZU5hbWVkQ29udGV4dCIsIlJvdXRlciIsIl9pc01vdW50ZWQiLCJfcGVuZGluZ0xvY2F0aW9uIiwic3RhdGljQ29udGV4dCIsImNvbXB1dGVSb290TWF0Y2giLCJpc0V4YWN0IiwiUm91dGVyQ29udGV4dCIsIkhpc3RvcnlDb250ZXh0IiwiY2FjaGUiLCJjYWNoZUNvdW50IiwiSGFzaFJvdXRlciIsImNyZWF0ZUhpc3RvcnkiLCJyZXNvbHZlVG9Mb2NhdGlvbiIsIm5vcm1hbGl6ZVRvTG9jYXRpb24iLCJjcmVhdGVMb2NhdGlvbiIsImZvcndhcmRSZWZTaGltIiwiTGlua0FuY2hvciIsImZvcndhcmRlZFJlZiIsImlubmVyUmVmIiwibmF2aWdhdGUiLCJyZXN0IiwiZXgiLCJpc01vZGlmaWVkRXZlbnQiLCJMaW5rIiwiaW52YXJpYW50IiwiYXJpYUN1cnJlbnQiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImNsYXNzTmFtZVByb3AiLCJjbGFzc05hbWUiLCJpc0FjdGl2ZVByb3AiLCJsb2NhdGlvblByb3AiLCJzdHlsZVByb3AiLCJlc2NhcGVkUGF0aCIsInJlZHVjZSIsIm1hdGNoZWQiLCJjYWNoZUtleSIsInBhdGhDYWNoZSIsInJlZ2V4cCIsImNvbXBpbGVQYXRoIiwidmFsdWVzIiwibWF0Y2hQYXRoIiwiY2xhc3NuYW1lcyIsImpvaW5DbGFzc25hbWVzIiwiYmF0Y2giLCJnZXRCYXRjaCIsIm51bGxMaXN0ZW5lcnMiLCJub3RpZnkiLCJTdWJzY3JpcHRpb24iLCJzdG9yZSIsInBhcmVudFN1YiIsInVuc3Vic2NyaWJlIiwiaGFuZGxlQ2hhbmdlV3JhcHBlciIsImFkZE5lc3RlZFN1YiIsInRyeVN1YnNjcmliZSIsIm5vdGlmeU5lc3RlZFN1YnMiLCJvblN0YXRlQ2hhbmdlIiwiaXNTdWJzY3JpYmVkIiwiQm9vbGVhbiIsImZpcnN0IiwiY2xlYXIiLCJwcmV2IiwiY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uIiwidHJ5VW5zdWJzY3JpYmUiLCJjb250ZXh0VmFsdWUiLCJzdWJzY3JpcHRpb24iLCJwcmV2aW91c1N0YXRlIiwiZ2V0U3RhdGUiLCJDb250ZXh0IiwiRU1QVFlfQVJSQVkiLCJOT19TVUJTQ1JJUFRJT05fQVJSQVkiLCJzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIiLCJ1cGRhdGVDb3VudCIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyIsImVmZmVjdEZ1bmMiLCJlZmZlY3RBcmdzIiwiY2FwdHVyZVdyYXBwZXJQcm9wcyIsImxhc3RXcmFwcGVyUHJvcHMiLCJsYXN0Q2hpbGRQcm9wcyIsInJlbmRlcklzU2NoZWR1bGVkIiwid3JhcHBlclByb3BzIiwiYWN0dWFsQ2hpbGRQcm9wcyIsImNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUiLCJzdWJzY3JpYmVVcGRhdGVzIiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiY2hpbGRQcm9wc1NlbGVjdG9yIiwiZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCIsImRpZFVuc3Vic2NyaWJlIiwibGFzdFRocm93bkVycm9yIiwiY2hlY2tGb3JVcGRhdGVzIiwibmV3Q2hpbGRQcm9wcyIsImxhdGVzdFN0b3JlU3RhdGUiLCJpbml0U3RhdGVVcGRhdGVzIiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX3JlZjIiLCJfcmVmMiRnZXREaXNwbGF5TmFtZSIsImdldERpc3BsYXlOYW1lIiwiX3JlZjIkbWV0aG9kTmFtZSIsIm1ldGhvZE5hbWUiLCJfcmVmMiRyZW5kZXJDb3VudFByb3AiLCJyZW5kZXJDb3VudFByb3AiLCJfcmVmMiRzaG91bGRIYW5kbGVTdGEiLCJfcmVmMiRzdG9yZUtleSIsInN0b3JlS2V5IiwiX3JlZjIkZm9yd2FyZFJlZiIsIndpdGhSZWYiLCJfcmVmMiRjb250ZXh0IiwiY29ubmVjdE9wdGlvbnMiLCJXcmFwcGVkQ29tcG9uZW50Iiwid3JhcHBlZENvbXBvbmVudE5hbWUiLCJzZWxlY3RvckZhY3RvcnlPcHRpb25zIiwicHVyZSIsInVzZVB1cmVPbmx5TWVtbyIsIkNvbm5lY3RGdW5jdGlvbiIsIl91c2VNZW1vIiwicmVhY3RSZWR1eEZvcndhcmRlZFJlZiIsInByb3BzQ29udGV4dCIsIkNvbnRleHRUb1VzZSIsImRpZFN0b3JlQ29tZUZyb21Qcm9wcyIsImNyZWF0ZUNoaWxkU2VsZWN0b3IiLCJfdXNlTWVtbzIiLCJvdmVycmlkZGVuQ29udGV4dFZhbHVlIiwiX3VzZVJlZHVjZXIiLCJwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0IiwicmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50IiwiQ29ubmVjdCIsImZvcndhcmRlZCIsInNoYWxsb3dFcXVhbCIsIndyYXBNYXBUb1Byb3BzQ29uc3RhbnQiLCJnZXRDb25zdGFudCIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwicHJveHkiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsImFjdGlvbkNyZWF0b3JzIiwiYm91bmRBY3Rpb25DcmVhdG9ycyIsIl9sb29wIiwiYWN0aW9uQ3JlYXRvciIsImJpbmRBY3Rpb25DcmVhdG9ycyIsIm1hcFN0YXRlVG9Qcm9wcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJtZXJnZVByb3BzIiwibWVyZ2VkUHJvcHMiLCJhcmVNZXJnZWRQcm9wc0VxdWFsIiwiaGFzUnVuT25jZSIsIm5leHRNZXJnZWRQcm9wcyIsIndyYXBNZXJnZVByb3BzRnVuYyIsImltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImFyZVN0YXRlc0VxdWFsIiwiYXJlT3duUHJvcHNFcXVhbCIsImFyZVN0YXRlUHJvcHNFcXVhbCIsImhhc1J1bkF0TGVhc3RPbmNlIiwibmV4dE93blByb3BzIiwibmV4dFN0YXRlUHJvcHMiLCJzdGF0ZVByb3BzQ2hhbmdlZCIsInByb3BzQ2hhbmdlZCIsInN0YXRlQ2hhbmdlZCIsImhhbmRsZVN1YnNlcXVlbnRDYWxscyIsImZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJpbml0TWFwU3RhdGVUb1Byb3BzIiwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyIsImluaXRNZXJnZVByb3BzIiwiYXJnIiwiZmFjdG9yaWVzIiwic3RyaWN0RXF1YWwiLCJjcmVhdGVDb25uZWN0IiwiX3RlbXAiLCJfcmVmJGNvbm5lY3RIT0MiLCJjb25uZWN0SE9DIiwiX3JlZiRtYXBTdGF0ZVRvUHJvcHNGIiwibWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtYXBEaXNwYXRjaFRvUHJvIiwibWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtZXJnZVByb3BzRmFjdG9yIiwibWVyZ2VQcm9wc0ZhY3RvcmllcyIsIl9yZWYkc2VsZWN0b3JGYWN0b3J5IiwiX3JlZjMiLCJfcmVmMyRwdXJlIiwiX3JlZjMkYXJlU3RhdGVzRXF1YWwiLCJfcmVmMyRhcmVPd25Qcm9wc0VxdWEiLCJfcmVmMyRhcmVTdGF0ZVByb3BzRXEiLCJfcmVmMyRhcmVNZXJnZWRQcm9wc0UiLCJleHRyYU9wdGlvbnMiLCJuZXdCYXRjaCIsIm1zR3JpZFJvdyIsIm1zR3JpZFJvd1NwYW4iLCJtc0dyaWRDb2x1bW4iLCJtc0dyaWRDb2x1bW5TcGFuIiwiV2Via2l0TGluZUNsYW1wIiwicmVhY3RQcm9wc1JlZ2V4Iiwibm9kZXMiLCJpbnNlcnRSdWxlIiwicnVsZXMiLCJuYW1lcyIsImZsYXR0ZW4iLCJfZGVmaW5lUHJvcGVydHkiLCJ3cml0YWJsZSIsIm93bktleXMiLCJlbnVtZXJhYmxlT25seSIsInN5bSIsIl9vYmplY3RTcHJlYWQyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJmb3JtYXRQcm9kRXJyb3JNZXNzYWdlIiwiJCRvYnNlcnZhYmxlIiwib2JzZXJ2YWJsZSIsInJhbmRvbVN0cmluZyIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsInByb3RvIiwiY29tcG9zZSIsImZ1bmNzIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsInRodW5rIiwid2l0aEV4dHJhQXJndW1lbnQiLCJnZXRCb29rIiwiaXNibiIsImNhdGNoIiwiZ2V0Q292ZXIiLCJnZXRDb3ZlclVybCIsIkNvdmVyc0FQSSIsImdldEJvb2tzIiwicXVlcnlTdHJpbmciLCJTRVRfQUxMX0JPT0tTIiwiU0VUX1BBR0VTX05VTSIsIlNFVF9DVVJSRU5UX1BBR0UiLCJTRVRfSVRFTVNfT05fUEFHRSIsIlNFVF9BRERJVElPTkFMX0lORk8iLCJTRVRfQ09WRVJTX00iLCJTRVRfQ09WRVJTX0wiLCJTRVRfU0VBUkNISU5HIiwiU0VUX0xBU1RfUVVFUlkiLCJJTkNfU0VBUkNIX0NPVU5UIiwiaXNTZWFyY2hpbmciLCJxdWVyeSIsInRodW5rQ3JlYXRvciIsImdldEFsbEJvb2tzIiwic2VyY2hEYXRhIiwiZG9jcyIsImFsbEJvb2tzIiwiZG9jIiwiaGFzX2Z1bGx0ZXh0IiwiYXV0aG9yIiwiYXV0aG9yX25hbWUiLCJ0aXRsZSIsImJvb2tzIiwicGFnZVNpemUiLCJhcHAiLCJwYWdlc051bSIsImdldEl0ZW1zT25QYWdlIiwicGFnZSIsIml0ZW1zT25QYWdlIiwiY3VycmVudFBhZ2UiLCJlbmRJZHgiLCJnZXRBZGRpdGlvbmFsSW5mbyIsImJvb2siLCJtZWRpdW1Db3ZlcnMiLCJsYXJnZUNvdmVycyIsImNvdmVyc0RhdGEiLCJpbml0aWFsU3RhdGUiLCJzZWFyY2hpbmciLCJsYXN0UXVlcnkiLCJzZWFyY2hDb3VudCIsImNyZWF0ZVN0b3JlIiwicmVkdWNlciIsInByZWxvYWRlZFN0YXRlIiwiZW5oYW5jZXIiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJzcGxpY2UiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIm9ic2VydmVTdGF0ZSIsInJlZHVjZXJzIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImZpbmFsUmVkdWNlcktleXMiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJoYXNDaGFuZ2VkIiwiX2kiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiY29tYmluZVJlZHVjZXJzIiwiZWRpdGlvbiIsIm1lZGl1bUNvdmVyIiwibGFyZ2VDb3ZlciIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyIsIm1pZGRsZXdhcmVzIiwiX2Rpc3BhdGNoIiwibWlkZGxld2FyZUFQSSIsIm1pZGRsZXdhcmUiLCJhcHBseU1pZGRsZXdhcmUiLCJhbGlnblNlbGYiLCJtYXJnaW4iLCJwYWRkaW5nIiwidGV4dEFsaWduIiwiYm9yZGVyIiwiRm9vdGVyV3JhcHBlciIsImlzRmV0Y2hpbmciLCJzcmMiLCJwcmVsb2FkZXIiLCJhbHQiLCJXcmFwcGVyIiwiZml4ZWRIZWlnaHQiLCJDb250ZW50QXJlYSIsImlzTWVyZ2VhYmxlT2JqZWN0IiwiaXNOb25OdWxsT2JqZWN0Iiwic3RyaW5nVmFsdWUiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJpc1JlYWN0RWxlbWVudCIsImlzU3BlY2lhbCIsImNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkIiwiY2xvbmUiLCJkZWVwbWVyZ2UiLCJkZWZhdWx0QXJyYXlNZXJnZSIsImFycmF5TWVyZ2UiLCJzb3VyY2VJc0FycmF5IiwiZGVzdGluYXRpb24iLCJtZXJnZU9iamVjdCIsImdsb2JhbCIsImZyZWVTZWxmIiwic2VsZiIsIkZ1bmN0aW9uIiwib2JqZWN0UHJvdG8iLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsInN5bVRvU3RyaW5nVGFnIiwiaXNPd24iLCJ1bm1hc2tlZCIsInRyYW5zZm9ybSIsImZ1bmNQcm90byIsImZ1bmNUb1N0cmluZyIsIm9iamVjdEN0b3JTdHJpbmciLCJDdG9yIiwib3RoZXIiLCJMaXN0Q2FjaGUiLCJlbnRyaWVzIiwiZW50cnkiLCJfX2RhdGFfXyIsInVpZCIsIm1hc2tTcmNLZXkiLCJyZUlzSG9zdEN0b3IiLCJyZUlzTmF0aXZlIiwiSGFzaCIsIk1hcENhY2hlIiwiU3RhY2siLCJwYWlycyIsIkxBUkdFX0FSUkFZX1NJWkUiLCJvYmpWYWx1ZSIsImN1c3RvbWl6ZXIiLCJpc05ldyIsImZyZWVFeHBvcnRzIiwiZnJlZU1vZHVsZSIsIkJ1ZmZlciIsInJlSXNVaW50IiwidHlwZWRBcnJheVRhZ3MiLCJmcmVlUHJvY2VzcyIsInJlcXVpcmUiLCJ0eXBlcyIsImJpbmRpbmciLCJub2RlSXNUeXBlZEFycmF5IiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQnVmZiIsImlzVHlwZSIsInNraXBJbmRleGVzIiwiaXRlcmF0ZWUiLCJpc1Byb3RvIiwiYWxsb2NVbnNhZmUiLCJuYXRpdmVHZXRTeW1ib2xzIiwicHJlZGljYXRlIiwicmVzSW5kZXgiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwicHJvbWlzZVRhZyIsImRhdGFWaWV3Q3RvclN0cmluZyIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsImdldFRhZyIsImN0b3JTdHJpbmciLCJhcnJheUJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJyZUZsYWdzIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xWYWx1ZU9mIiwiaXNEZWVwIiwiZGF0YVZpZXciLCJieXRlT2Zmc2V0IiwidHlwZWRBcnJheSIsImxhc3RJbmRleCIsIm9iamVjdENyZWF0ZSIsIm5vZGVJc01hcCIsIm5vZGVJc1NldCIsImNsb25lYWJsZVRhZ3MiLCJiYXNlQ2xvbmUiLCJiaXRtYXNrIiwiaXNGbGF0IiwiaXNGdWxsIiwiaXNGdW5jIiwiY29weSIsInN0YWNrZWQiLCJzdWJWYWx1ZSIsInJlc29sdmVyIiwibWVtb2l6ZWQiLCJDYWNoZSIsInJlUHJvcE5hbWUiLCJyZUVzY2FwZUNoYXIiLCJxdW90ZSIsInN1YlN0cmluZyIsInN5bWJvbFRvU3RyaW5nIiwiYmFzZVRvU3RyaW5nIiwiaXNFbXB0eUFycmF5IiwiaXNJbnRlZ2VyIiwiTnVtYmVyIiwiaXNQcm9taXNlIiwiZ2V0SW4iLCJkZWYiLCJ0b1BhdGgiLCJzZXRJbiIsInJlc1ZhbCIsInBhdGhBcnJheSIsImN1cnJlbnRQYXRoIiwiY3VycmVudE9iaiIsIm5leHRQYXRoIiwic2V0TmVzdGVkT2JqZWN0VmFsdWVzIiwidmlzaXRlZCIsIkZvcm1pa0NvbnRleHQiLCJmb3JtaWtSZWR1Y2VyIiwibXNnIiwidG91Y2hlZCIsImlzRXF1YWwiLCJlcnJvcnMiLCJpc1N1Ym1pdHRpbmciLCJpc1ZhbGlkYXRpbmciLCJmaWVsZCIsInN1Ym1pdENvdW50IiwiZW1wdHlFcnJvcnMiLCJlbXB0eVRvdWNoZWQiLCJ1c2VGb3JtaWsiLCJ2YWxpZGF0ZU9uQ2hhbmdlIiwidmFsaWRhdGVPbkJsdXIiLCJ2YWxpZGF0ZU9uTW91bnQiLCJpc0luaXRpYWxWYWxpZCIsImVuYWJsZVJlaW5pdGlhbGl6ZSIsIm9uU3VibWl0IiwiaW5pdGlhbFZhbHVlcyIsImluaXRpYWxFcnJvcnMiLCJpbml0aWFsVG91Y2hlZCIsImluaXRpYWxTdGF0dXMiLCJmaWVsZFJlZ2lzdHJ5IiwicnVuVmFsaWRhdGVIYW5kbGVyIiwibWF5YmVQcm9taXNlZEVycm9ycyIsInZhbGlkYXRlIiwiYWN0dWFsRXhjZXB0aW9uIiwicnVuVmFsaWRhdGlvblNjaGVtYSIsInZhbGlkYXRpb25TY2hlbWEiLCJzY2hlbWEiLCJ2YWxpZGF0ZUF0Iiwic3luYyIsInZhbGlkYXRlRGF0YSIsInByZXBhcmVEYXRhRm9yVmFsaWRhdGlvbiIsImFib3J0RWFybHkiLCJ2YWxpZGF0ZVl1cFNjaGVtYSIsInl1cEVycm9yIiwiaW5uZXIiLCJ5dXBUb0Zvcm1FcnJvcnMiLCJydW5TaW5nbGVGaWVsZExldmVsVmFsaWRhdGlvbiIsInJ1bkZpZWxkTGV2ZWxWYWxpZGF0aW9ucyIsImZpZWxkS2V5c1dpdGhWYWxpZGF0aW9uIiwiZmllbGRWYWxpZGF0aW9ucyIsImZpZWxkRXJyb3JzTGlzdCIsImN1cnIiLCJydW5BbGxWYWxpZGF0aW9ucyIsImZpZWxkRXJyb3JzIiwic2NoZW1hRXJyb3JzIiwidmFsaWRhdGVFcnJvcnMiLCJ2YWxpZGF0ZUZvcm1XaXRoSGlnaFByaW9yaXR5IiwidXNlRXZlbnRDYWxsYmFjayIsImNvbWJpbmVkRXJyb3JzIiwicmVzZXRGb3JtIiwiZGlzcGF0Y2hGbiIsIm9uUmVzZXQiLCJtYXliZVByb21pc2VkT25SZXNldCIsImltcGVyYXRpdmVNZXRob2RzIiwidmFsaWRhdGVGaWVsZCIsIm1heWJlUHJvbWlzZSIsInJlZ2lzdGVyRmllbGQiLCJ1bnJlZ2lzdGVyRmllbGQiLCJzZXRUb3VjaGVkIiwic2hvdWxkVmFsaWRhdGUiLCJzZXRFcnJvcnMiLCJzZXRWYWx1ZXMiLCJyZXNvbHZlZFZhbHVlcyIsInNldEZpZWxkRXJyb3IiLCJzZXRGaWVsZFZhbHVlIiwiZXhlY3V0ZUNoYW5nZSIsImV2ZW50T3JUZXh0VmFsdWUiLCJtYXliZVBhdGgiLCJvdXRlckhUTUwiLCJwYXJzZUZsb2F0IiwiY3VycmVudFZhbHVlIiwidmFsdWVQcm9wIiwiY3VycmVudEFycmF5T2ZWYWx1ZXMiLCJpc1ZhbHVlSW5BcnJheSIsImdldFZhbHVlRm9yQ2hlY2tib3giLCJlbCIsImdldFNlbGVjdGVkVmFsdWVzIiwiaGFuZGxlQ2hhbmdlIiwiZXZlbnRPclBhdGgiLCJzZXRGaWVsZFRvdWNoZWQiLCJleGVjdXRlQmx1ciIsImhhbmRsZUJsdXIiLCJldmVudE9yU3RyaW5nIiwic2V0Rm9ybWlrU3RhdGUiLCJzdGF0ZU9yQ2IiLCJzZXRTdGF0dXMiLCJzZXRTdWJtaXR0aW5nIiwic3VibWl0Rm9ybSIsImlzSW5zdGFuY2VPZkVycm9yIiwicHJvbWlzZU9yVW5kZWZpbmVkIiwiZXhlY3V0ZVN1Ym1pdCIsIl9lcnJvcnMiLCJoYW5kbGVTdWJtaXQiLCJ2YWxpZGF0ZUZvcm0iLCJoYW5kbGVSZXNldCIsImdldEZpZWxkTWV0YSIsImluaXRpYWxFcnJvciIsImdldEZpZWxkSGVscGVycyIsInNldEVycm9yIiwiZ2V0RmllbGRQcm9wcyIsIm5hbWVPck9wdGlvbnMiLCJpc0FuT2JqZWN0IiwidmFsdWVTdGF0ZSIsIm9uQ2hhbmdlIiwib25CbHVyIiwiYXMiLCJkaXJ0eSIsImlzVmFsaWQiLCJzaG91bGRDbG9uZSIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJfYWN0aW9uIiwiaW5zZXJ0IiwiYXJyYXlMaWtlIiwiY29weUFycmF5TGlrZSIsIm1heEluZGV4IiwicGFyc2VJbnQiLCJtYXgiLCJGaWVsZEFycmF5SW5uZXIiLCJ1cGRhdGVBcnJheUZpZWxkIiwiYWx0ZXJUb3VjaGVkIiwiYWx0ZXJFcnJvcnMiLCJmb3JtaWsiLCJwcmV2U3RhdGUiLCJ1cGRhdGVFcnJvcnMiLCJ1cGRhdGVUb3VjaGVkIiwiZmllbGRFcnJvciIsImZpZWxkVG91Y2hlZCIsImNsb25lRGVlcCIsImhhbmRsZVB1c2giLCJzd2FwIiwiaW5kZXhBIiwiaW5kZXhCIiwiaGFuZGxlU3dhcCIsIm1vdmUiLCJoYW5kbGVNb3ZlIiwiaGFuZGxlSW5zZXJ0IiwiaGFuZGxlUmVwbGFjZSIsImhhbmRsZVVuc2hpZnQiLCJoYW5kbGVSZW1vdmUiLCJwcmV2UHJvcHMiLCJ0bXAiLCJhcnJheUhlbHBlcnMiLCJyZXN0T2ZGb3JtaWsiLCJpc0VtcHR5Q2hpbGRyZW4iLCJJbnB1dFR5cGUiLCJ0aW1lb3V0SWQiLCJGbGV4U2VhcmNoRm9ybSIsIndyYXAiLCJkaXIiLCJqc3RmU2VsZiIsImpzdGZDbnQiLCJhbGduSXRlbXMiLCJGbGV4V3JhcHBlciIsImF0dHJzIiwicGFnZXNDb3VudCIsInNlbGVjdGVkUGFnZSIsIm9uUGFnZUNsaWNrIiwicGFnZXNBcnIiLCJyb2xlIiwidGFiSW5kZXgiLCJQYWdlU2VhcmNoRm9ybSIsImpzb25PYmoiLCJGbGV4Rm9ybSIsInBsYWNlaG9sZGVyIiwiU2hhZG93RGl2IiwiaXNTaG93biIsIk51bGxDb250YWluZXIiLCJoaWRlIiwiVmlld0FyZWEiLCJmaXhlZCIsImhvaXN0QW5pbWF0aW9uIiwiTGVmdExlYWZDb250YWluZXIiLCJSaWdodExlYWZDb250YWluZXIiLCJvbk5leHQiLCJvblByZXYiLCJvbkNsb3NlIiwibWF4V2lkdGgiLCJtYXhIZWlnaHQiLCJmb250U2l6ZSIsImZvbnRGYW1pbHkiLCJCb29rU25pcHBldFdyYXBwZXIiLCJzcmNTdGF0ZSIsInNldFNyY1N0YXRlIiwiaW1hZ2VTcmMiLCJib29rSW5mbyIsIm9uTG9hZCIsIm5hdHVyYWxXaWR0aCIsIkluZm9QYW5lbFdyYXBwZXIiLCJJbWFnZVdyYXBwZXIiLCJGbGV4SW5mbyIsIkZsZXhJbmZvQ2VsbCIsIm51bWJlcl9vZl9wYWdlcyIsInB1Ymxpc2hlcnMiLCJwdWJsaXNoX2RhdGUiLCJGbGV4U2VhcmNoTGlzdCIsIkNlbnRlcmluZ0RpdiIsImJvb2tzTm90Rm91bmQiLCJpdGVtcyIsInZpZXdNb2RlIiwic2V0Vmlld01vZGUiLCJ2aWV3Q29udGVudCIsInNldFZpZXdDb250ZW50IiwibmV4dElkeCIsIkNvbnRlbnRXcmFwcGVyIiwiY29ubmVjdCIsInNlYXJjaExpc3RNZXRob2RzIiwic2VhcmNoTGlzdFN0YXRlIiwiQXBwV3JhcHBlciIsIkhvdFdyYXBwZXIiLCJHbG9iYWxTdHlsZXMiLCJnZXRFbGVtZW50QnlJZCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZGVmaW5pdGlvbiIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJjdXJyZW50U2NyaXB0Iiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIl0sIm1hcHBpbmdzIjoiOzRCQUFBQSxFQUFPQyxRQUFVLEVBQWpCLE8sNEJDRUEsSUFBSUMsRUFBUSxFQUFRLE1BQ2hCQyxFQUFTLEVBQVEsTUFDakJDLEVBQVUsRUFBUSxNQUNsQkMsRUFBVyxFQUFRLE1BQ25CQyxFQUFnQixFQUFRLE1BQ3hCQyxFQUFlLEVBQVEsS0FDdkJDLEVBQWtCLEVBQVEsTUFDMUJDLEVBQWMsRUFBUSxNQUUxQlQsRUFBT0MsUUFBVSxTQUFvQlMsR0FDbkMsT0FBTyxJQUFJQyxTQUFRLFNBQTRCQyxFQUFTQyxHQUN0RCxJQUFJQyxFQUFjSixFQUFPSyxLQUNyQkMsRUFBaUJOLEVBQU9PLFFBRXhCZixFQUFNZ0IsV0FBV0osV0FDWkUsRUFBZSxnQkFHeEIsSUFBSUcsRUFBVSxJQUFJ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QUFRaXZFLEVBQVlHLEVBQVFBLEVBQVFwdkUsT0FBUyxHQUFHaTVELEtBSzdELElBQUtnVyxFQUFXLE1BQU0sSUFBSWp1RSxNQUFNLHlEQUNoQ2l1RSxFQUFZQSxFQUFVOXVFLFFBQVEsT0FBUSxJQUFJQSxRQUFRLFFBQVMsSUFBSUEsUUFBUSxZQUFhLEtBQ3BGdXVFLEVBQW9CbGlFLEVBQUl5aUUsRyxHQ1p4QlAsRUFBb0IsTUFDTUEsRUFBb0IsTyIsImZpbGUiOiJtYWluLmI3MTI0YmI5NDY1YjhhNGQwODJiLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIDogJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHZhciB0aW1lb3V0RXJyb3JNZXNzYWdlID0gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJztcbiAgICAgIGlmIChjb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IodGltZW91dEVycm9yTWVzc2FnZSwgY29uZmlnLCAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXJlcXVlc3REYXRhKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoYXhpb3MuZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIHZhciB2YWx1ZUZyb21Db25maWcyS2V5cyA9IFsndXJsJywgJ21ldGhvZCcsICdkYXRhJ107XG4gIHZhciBtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyA9IFsnaGVhZGVycycsICdhdXRoJywgJ3Byb3h5JywgJ3BhcmFtcyddO1xuICB2YXIgZGVmYXVsdFRvQ29uZmlnMktleXMgPSBbXG4gICAgJ2Jhc2VVUkwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd0aW1lb3V0TWVzc2FnZScsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsICdkZWNvbXByZXNzJyxcbiAgICAnbWF4Q29udGVudExlbmd0aCcsICdtYXhCb2R5TGVuZ3RoJywgJ21heFJlZGlyZWN0cycsICd0cmFuc3BvcnQnLCAnaHR0cEFnZW50JyxcbiAgICAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsICdzb2NrZXRQYXRoJywgJ3Jlc3BvbnNlRW5jb2RpbmcnXG4gIF07XG4gIHZhciBkaXJlY3RNZXJnZUtleXMgPSBbJ3ZhbGlkYXRlU3RhdHVzJ107XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICB1dGlscy5mb3JFYWNoKHZhbHVlRnJvbUNvbmZpZzJLZXlzLCBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cywgbWVyZ2VEZWVwUHJvcGVydGllcyk7XG5cbiAgdXRpbHMuZm9yRWFjaChkZWZhdWx0VG9Db25maWcyS2V5cywgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goZGlyZWN0TWVyZ2VLZXlzLCBmdW5jdGlvbiBtZXJnZShwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgYXhpb3NLZXlzID0gdmFsdWVGcm9tQ29uZmlnMktleXNcbiAgICAuY29uY2F0KG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzKVxuICAgIC5jb25jYXQoZGVmYXVsdFRvQ29uZmlnMktleXMpXG4gICAgLmNvbmNhdChkaXJlY3RNZXJnZUtleXMpO1xuXG4gIHZhciBvdGhlcktleXMgPSBPYmplY3RcbiAgICAua2V5cyhjb25maWcxKVxuICAgIC5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpXG4gICAgLmZpbHRlcihmdW5jdGlvbiBmaWx0ZXJBeGlvc0tleXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXhpb3NLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG4gICAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChvdGhlcktleXMsIG1lcmdlRGVlcFByb3BlcnRpZXMpO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiAodHlwZW9mIHBheWxvYWQgPT09ICdvYmplY3QnKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsKSB7XG4gIGlmICh0b1N0cmluZy5jYWxsKHZhbCkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRba2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqIEByZXR1cm4ge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5mdW5jdGlvbiBzdHJpcEJPTShjb250ZW50KSB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3Q6IGlzUGxhaW5PYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbSxcbiAgc3RyaXBCT006IHN0cmlwQk9NXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4xXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxtPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHI9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiB5KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifWlmKCFhYSl0aHJvdyBFcnJvcih5KDIyNykpO3ZhciBiYT1uZXcgU2V0LGNhPXt9O2Z1bmN0aW9uIGRhKGEsYil7ZWEoYSxiKTtlYShhK1wiQ2FwdHVyZVwiLGIpfVxuZnVuY3Rpb24gZWEoYSxiKXtjYVthXT1iO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspYmEuYWRkKGJbYV0pfVxudmFyIGZhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxoYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8saWE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxcbmphPXt9LGthPXt9O2Z1bmN0aW9uIGxhKGEpe2lmKGlhLmNhbGwoa2EsYSkpcmV0dXJuITA7aWYoaWEuY2FsbChqYSxhKSlyZXR1cm4hMTtpZihoYS50ZXN0KGEpKXJldHVybiBrYVthXT0hMDtqYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBtYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIG5hKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fG1hKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gQihhLGIsYyxkLGUsZixnKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zjt0aGlzLnJlbW92ZUVtcHR5U3RyaW5nPWd9dmFyIEQ9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwwLCExLGEsbnVsbCwhMSwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07RFtiXT1uZXcgQihiLDEsITEsYVsxXSxudWxsLCExLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEsbnVsbCwhMSwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBkaXNhYmxlUmVtb3RlUGxheWJhY2sgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMywhMCxhLG51bGwsITEsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNCwhMSxhLG51bGwsITEsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw2LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO3ZhciBvYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHBhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLFxucGEpO0RbYl09bmV3IEIoYiwxLCExLGEsbnVsbCwhMSwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxwYSk7RFtiXT1uZXcgQihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxwYSk7RFtiXT1uZXcgQihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuRC54bGlua0hyZWY9bmV3IEIoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwLCExKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwLCEwKX0pO1xuZnVuY3Rpb24gcWEoYSxiLGMsZCl7dmFyIGU9RC5oYXNPd25Qcm9wZXJ0eShiKT9EW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwobmEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP2xhKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG52YXIgcmE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsc2E9NjAxMDMsdGE9NjAxMDYsdWE9NjAxMDcsd2E9NjAxMDgseGE9NjAxMTQseWE9NjAxMDksemE9NjAxMTAsQWE9NjAxMTIsQmE9NjAxMTMsQ2E9NjAxMjAsRGE9NjAxMTUsRWE9NjAxMTYsRmE9NjAxMjEsR2E9NjAxMjgsSGE9NjAxMjksSWE9NjAxMzAsSmE9NjAxMzE7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgRT1TeW1ib2wuZm9yO3NhPUUoXCJyZWFjdC5lbGVtZW50XCIpO3RhPUUoXCJyZWFjdC5wb3J0YWxcIik7dWE9RShcInJlYWN0LmZyYWdtZW50XCIpO3dhPUUoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTt4YT1FKFwicmVhY3QucHJvZmlsZXJcIik7eWE9RShcInJlYWN0LnByb3ZpZGVyXCIpO3phPUUoXCJyZWFjdC5jb250ZXh0XCIpO0FhPUUoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtCYT1FKFwicmVhY3Quc3VzcGVuc2VcIik7Q2E9RShcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik7RGE9RShcInJlYWN0Lm1lbW9cIik7RWE9RShcInJlYWN0LmxhenlcIik7RmE9RShcInJlYWN0LmJsb2NrXCIpO0UoXCJyZWFjdC5zY29wZVwiKTtHYT1FKFwicmVhY3Qub3BhcXVlLmlkXCIpO0hhPUUoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO0lhPUUoXCJyZWFjdC5vZmZzY3JlZW5cIik7SmE9RShcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIil9XG52YXIgS2E9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIExhKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1LYSYmYVtLYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgTWE7ZnVuY3Rpb24gTmEoYSl7aWYodm9pZCAwPT09TWEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7TWE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK01hK2F9dmFyIE9hPSExO1xuZnVuY3Rpb24gUGEoYSxiKXtpZighYXx8T2EpcmV0dXJuXCJcIjtPYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2goayl7dmFyIGQ9a31SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGspe2Q9a31hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGspe2Q9a31hKCl9fWNhdGNoKGspe2lmKGsmJmQmJlwic3RyaW5nXCI9PT10eXBlb2Ygay5zdGFjayl7Zm9yKHZhciBlPWsuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSlyZXR1cm5cIlxcblwiK2VbZ10ucmVwbGFjZShcIiBhdCBuZXcgXCIsXCIgYXQgXCIpO3doaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtPYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP05hKGEpOlwiXCJ9XG5mdW5jdGlvbiBRYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gTmEoYS50eXBlKTtjYXNlIDE2OnJldHVybiBOYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gTmEoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBOYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9UGEoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9UGEoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDIyOnJldHVybiBhPVBhKGEudHlwZS5fcmVuZGVyLCExKSxhO2Nhc2UgMTpyZXR1cm4gYT1QYShhLnR5cGUsITApLGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFJhKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgdGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIHhhOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIHdhOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgQmE6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgQ2E6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgemE6cmV0dXJuKGEuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgeWE6cmV0dXJuKGEuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgQWE6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7XG5yZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIERhOnJldHVybiBSYShhLnR5cGUpO2Nhc2UgRmE6cmV0dXJuIFJhKGEuX3JlbmRlcik7Y2FzZSBFYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUmEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBTYShhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gVGEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFVhKGEpe3ZhciBiPVRhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWEoYSkpfWZ1bmN0aW9uIFdhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFhhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFlhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBtKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBaYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1TYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uICRhKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmcWEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIGFiKGEsYil7JGEoYSxiKTt2YXIgYz1TYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9iYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZiYihhLGIudHlwZSxTYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGNiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBiYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFhhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBkYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBlYihhLGIpe2E9bSh7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPWRiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIGZiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitTYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHkoOTEpKTtyZXR1cm4gbSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcih5KDkyKSk7aWYoQXJyYXkuaXNBcnJheShjKSl7aWYoISgxPj1jLmxlbmd0aCkpdGhyb3cgRXJyb3IoeSg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlNhKGMpfX1cbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9U2EoYi52YWx1ZSksZD1TYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGpiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIGtiPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIGxiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gbWIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2xiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIG5iLG9iPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PWtiLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle25iPW5ifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO25iLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPW5iLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIHBiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcWI9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scmI9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHFiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JiLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cWJbYl09cWJbYV19KX0pO2Z1bmN0aW9uIHNiKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxxYi5oYXNPd25Qcm9wZXJ0eShhKSYmcWJbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gdGIoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9c2IoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgdWI9bSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHZiKGEsYil7aWYoYil7aWYodWJbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih5KDEzNyxhKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcih5KDYwKSk7aWYoIShcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih5KDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcih5KDYyKSk7fX1cbmZ1bmN0aW9uIHdiKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX1mdW5jdGlvbiB4YihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHliPW51bGwsemI9bnVsbCxBYj1udWxsO1xuZnVuY3Rpb24gQmIoYSl7aWYoYT1DYihhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHliKXRocm93IEVycm9yKHkoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9RGIoYikseWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRWIoYSl7emI/QWI/QWIucHVzaChhKTpBYj1bYV06emI9YX1mdW5jdGlvbiBGYigpe2lmKHpiKXt2YXIgYT16YixiPUFiO0FiPXpiPW51bGw7QmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUJiKGJbYV0pfX1mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKGEsYixjLGQsZSl7cmV0dXJuIGEoYixjLGQsZSl9ZnVuY3Rpb24gSWIoKXt9dmFyIEpiPUdiLEtiPSExLExiPSExO2Z1bmN0aW9uIE1iKCl7aWYobnVsbCE9PXpifHxudWxsIT09QWIpSWIoKSxGYigpfVxuZnVuY3Rpb24gTmIoYSxiLGMpe2lmKExiKXJldHVybiBhKGIsYyk7TGI9ITA7dHJ5e3JldHVybiBKYihhLGIsYyl9ZmluYWxseXtMYj0hMSxNYigpfX1cbmZ1bmN0aW9uIE9iKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9RGIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IoeSgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBQYj0hMTtpZihmYSl0cnl7dmFyIFFiPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShRYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7UGI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsUWIsUWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKX1jYXRjaChhKXtQYj0hMX1mdW5jdGlvbiBSYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobil7dGhpcy5vbkVycm9yKG4pfX12YXIgU2I9ITEsVGI9bnVsbCxVYj0hMSxWYj1udWxsLFdiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe1NiPSEwO1RiPWF9fTtmdW5jdGlvbiBYYihhLGIsYyxkLGUsZixnLGgsayl7U2I9ITE7VGI9bnVsbDtSYi5hcHBseShXYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gWWIoYSxiLGMsZCxlLGYsZyxoLGspe1hiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihTYil7aWYoU2Ipe3ZhciBsPVRiO1NiPSExO1RiPW51bGx9ZWxzZSB0aHJvdyBFcnJvcih5KDE5OCkpO1VifHwoVWI9ITAsVmI9bCl9fWZ1bmN0aW9uIFpiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gJGIoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBhYyhhKXtpZihaYihhKSE9PWEpdGhyb3cgRXJyb3IoeSgxODgpKTt9XG5mdW5jdGlvbiBiYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1aYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih5KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBhYyhlKSxhO2lmKGY9PT1kKXJldHVybiBhYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHkoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IoeSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih5KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGNjKGEpe2E9YmMoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkYyhhLGIpe2Zvcih2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09Yjspe2lmKGI9PT1hfHxiPT09YylyZXR1cm4hMDtiPWIucmV0dXJufXJldHVybiExfXZhciBlYyxmYyxnYyxoYyxpYz0hMSxqYz1bXSxrYz1udWxsLGxjPW51bGwsbWM9bnVsbCxuYz1uZXcgTWFwLG9jPW5ldyBNYXAscGM9W10scWM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gcmMoYSxiLGMsZCxlKXtyZXR1cm57YmxvY2tlZE9uOmEsZG9tRXZlbnROYW1lOmIsZXZlbnRTeXN0ZW1GbGFnczpjfDE2LG5hdGl2ZUV2ZW50OmUsdGFyZ2V0Q29udGFpbmVyczpbZF19fWZ1bmN0aW9uIHNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6a2M9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmxjPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOm1jPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpuYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpvYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIHRjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9cmMoYixjLGQsZSxmKSxudWxsIT09YiYmKGI9Q2IoYiksbnVsbCE9PWImJmZjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHVjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIGtjPXRjKGtjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBsYz10YyhsYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gbWM9dGMobWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtuYy5zZXQoZix0YyhuYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsb2Muc2V0KGYsdGMob2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gdmMoYSl7dmFyIGI9d2MoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1aYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj0kYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtoYyhhLmxhbmVQcmlvcml0eSxmdW5jdGlvbigpe3IudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KGEucHJpb3JpdHksZnVuY3Rpb24oKXtnYyhjKX0pfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5oeWRyYXRlKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIHhjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz15YyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09YylyZXR1cm4gYj1DYihjKSxudWxsIT09YiYmZmMoYiksYS5ibG9ja2VkT249YywhMTtiLnNoaWZ0KCl9cmV0dXJuITB9ZnVuY3Rpb24gemMoYSxiLGMpe3hjKGEpJiZjLmRlbGV0ZShiKX1cbmZ1bmN0aW9uIEFjKCl7Zm9yKGljPSExOzA8amMubGVuZ3RoOyl7dmFyIGE9amNbMF07aWYobnVsbCE9PWEuYmxvY2tlZE9uKXthPUNiKGEuYmxvY2tlZE9uKTtudWxsIT09YSYmZWMoYSk7YnJlYWt9Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpe2EuYmxvY2tlZE9uPWM7YnJlYWt9Yi5zaGlmdCgpfW51bGw9PT1hLmJsb2NrZWRPbiYmamMuc2hpZnQoKX1udWxsIT09a2MmJnhjKGtjKSYmKGtjPW51bGwpO251bGwhPT1sYyYmeGMobGMpJiYobGM9bnVsbCk7bnVsbCE9PW1jJiZ4YyhtYykmJihtYz1udWxsKTtuYy5mb3JFYWNoKHpjKTtvYy5mb3JFYWNoKHpjKX1cbmZ1bmN0aW9uIEJjKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxpY3x8KGljPSEwLHIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LEFjKSkpfVxuZnVuY3Rpb24gQ2MoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gQmMoYixhKX1pZigwPGpjLmxlbmd0aCl7QmMoamNbMF0sYSk7Zm9yKHZhciBjPTE7YzxqYy5sZW5ndGg7YysrKXt2YXIgZD1qY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PWtjJiZCYyhrYyxhKTtudWxsIT09bGMmJkJjKGxjLGEpO251bGwhPT1tYyYmQmMobWMsYSk7bmMuZm9yRWFjaChiKTtvYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxwYy5sZW5ndGg7YysrKWQ9cGNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPHBjLmxlbmd0aCYmKGM9cGNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspdmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZwYy5zaGlmdCgpfVxuZnVuY3Rpb24gRGMoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgRWM9e2FuaW1hdGlvbmVuZDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOkRjKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sRmM9e30sR2M9e307XG5mYSYmKEdjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIEVjLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIEVjLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIEVjLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIEVjLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gSGMoYSl7aWYoRmNbYV0pcmV0dXJuIEZjW2FdO2lmKCFFY1thXSlyZXR1cm4gYTt2YXIgYj1FY1thXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBHYylyZXR1cm4gRmNbYV09YltjXTtyZXR1cm4gYX1cbnZhciBJYz1IYyhcImFuaW1hdGlvbmVuZFwiKSxKYz1IYyhcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxLYz1IYyhcImFuaW1hdGlvbnN0YXJ0XCIpLExjPUhjKFwidHJhbnNpdGlvbmVuZFwiKSxNYz1uZXcgTWFwLE5jPW5ldyBNYXAsT2M9W1wiYWJvcnRcIixcImFib3J0XCIsSWMsXCJhbmltYXRpb25FbmRcIixKYyxcImFuaW1hdGlvbkl0ZXJhdGlvblwiLEtjLFwiYW5pbWF0aW9uU3RhcnRcIixcImNhbnBsYXlcIixcImNhblBsYXlcIixcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiLFwiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCIsXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiLFwiZW5kZWRcIixcImVuZGVkXCIsXCJlcnJvclwiLFwiZXJyb3JcIixcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiLFwibG9hZFwiLFwibG9hZFwiLFwibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLFwibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCIsXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiLFxuXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiLFwicGxheWluZ1wiLFwicGxheWluZ1wiLFwicHJvZ3Jlc3NcIixcInByb2dyZXNzXCIsXCJzZWVraW5nXCIsXCJzZWVraW5nXCIsXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCIsXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCIsTGMsXCJ0cmFuc2l0aW9uRW5kXCIsXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdO2Z1bmN0aW9uIFBjKGEsYil7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKz0yKXt2YXIgZD1hW2NdLGU9YVtjKzFdO2U9XCJvblwiKyhlWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSk7TmMuc2V0KGQsYik7TWMuc2V0KGQsZSk7ZGEoZSxbZF0pfX12YXIgUWM9ci51bnN0YWJsZV9ub3c7UWMoKTt2YXIgRj04O1xuZnVuY3Rpb24gUmMoYSl7aWYoMCE9PSgxJmEpKXJldHVybiBGPTE1LDE7aWYoMCE9PSgyJmEpKXJldHVybiBGPTE0LDI7aWYoMCE9PSg0JmEpKXJldHVybiBGPTEzLDQ7dmFyIGI9MjQmYTtpZigwIT09YilyZXR1cm4gRj0xMixiO2lmKDAhPT0oYSYzMikpcmV0dXJuIEY9MTEsMzI7Yj0xOTImYTtpZigwIT09YilyZXR1cm4gRj0xMCxiO2lmKDAhPT0oYSYyNTYpKXJldHVybiBGPTksMjU2O2I9MzU4NCZhO2lmKDAhPT1iKXJldHVybiBGPTgsYjtpZigwIT09KGEmNDA5NikpcmV0dXJuIEY9Nyw0MDk2O2I9NDE4NjExMiZhO2lmKDAhPT1iKXJldHVybiBGPTYsYjtiPTYyOTE0NTYwJmE7aWYoMCE9PWIpcmV0dXJuIEY9NSxiO2lmKGEmNjcxMDg4NjQpcmV0dXJuIEY9NCw2NzEwODg2NDtpZigwIT09KGEmMTM0MjE3NzI4KSlyZXR1cm4gRj0zLDEzNDIxNzcyODtiPTgwNTMwNjM2OCZhO2lmKDAhPT1iKXJldHVybiBGPTIsYjtpZigwIT09KDEwNzM3NDE4MjQmYSkpcmV0dXJuIEY9MSwxMDczNzQxODI0O1xuRj04O3JldHVybiBhfWZ1bmN0aW9uIFNjKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiAxNTtjYXNlIDk4OnJldHVybiAxMDtjYXNlIDk3OmNhc2UgOTY6cmV0dXJuIDg7Y2FzZSA5NTpyZXR1cm4gMjtkZWZhdWx0OnJldHVybiAwfX1mdW5jdGlvbiBUYyhhKXtzd2l0Y2goYSl7Y2FzZSAxNTpjYXNlIDE0OnJldHVybiA5OTtjYXNlIDEzOmNhc2UgMTI6Y2FzZSAxMTpjYXNlIDEwOnJldHVybiA5ODtjYXNlIDk6Y2FzZSA4OmNhc2UgNzpjYXNlIDY6Y2FzZSA0OmNhc2UgNTpyZXR1cm4gOTc7Y2FzZSAzOmNhc2UgMjpjYXNlIDE6cmV0dXJuIDk1O2Nhc2UgMDpyZXR1cm4gOTA7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDM1OCxhKSk7fX1cbmZ1bmN0aW9uIFVjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXM7aWYoMD09PWMpcmV0dXJuIEY9MDt2YXIgZD0wLGU9MCxmPWEuZXhwaXJlZExhbmVzLGc9YS5zdXNwZW5kZWRMYW5lcyxoPWEucGluZ2VkTGFuZXM7aWYoMCE9PWYpZD1mLGU9Rj0xNTtlbHNlIGlmKGY9YyYxMzQyMTc3MjcsMCE9PWYpe3ZhciBrPWYmfmc7MCE9PWs/KGQ9UmMoayksZT1GKTooaCY9ZiwwIT09aCYmKGQ9UmMoaCksZT1GKSl9ZWxzZSBmPWMmfmcsMCE9PWY/KGQ9UmMoZiksZT1GKTowIT09aCYmKGQ9UmMoaCksZT1GKTtpZigwPT09ZClyZXR1cm4gMDtkPTMxLVZjKGQpO2Q9YyYoKDA+ZD8wOjE8PGQpPDwxKS0xO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmcpKXtSYyhiKTtpZihlPD1GKXJldHVybiBiO0Y9ZX1iPWEuZW50YW5nbGVkTGFuZXM7aWYoMCE9PWIpZm9yKGE9YS5lbnRhbmdsZW1lbnRzLGImPWQ7MDxiOyljPTMxLVZjKGIpLGU9MTw8YyxkfD1hW2NdLGImPX5lO3JldHVybiBkfVxuZnVuY3Rpb24gV2MoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIFhjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTU6cmV0dXJuIDE7Y2FzZSAxNDpyZXR1cm4gMjtjYXNlIDEyOnJldHVybiBhPVljKDI0Jn5iKSwwPT09YT9YYygxMCxiKTphO2Nhc2UgMTA6cmV0dXJuIGE9WWMoMTkyJn5iKSwwPT09YT9YYyg4LGIpOmE7Y2FzZSA4OnJldHVybiBhPVljKDM1ODQmfmIpLDA9PT1hJiYoYT1ZYyg0MTg2MTEyJn5iKSwwPT09YSYmKGE9NTEyKSksYTtjYXNlIDI6cmV0dXJuIGI9WWMoODA1MzA2MzY4Jn5iKSwwPT09YiYmKGI9MjY4NDM1NDU2KSxifXRocm93IEVycm9yKHkoMzU4LGEpKTt9ZnVuY3Rpb24gWWMoYSl7cmV0dXJuIGEmLWF9ZnVuY3Rpb24gWmMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiAkYyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7dmFyIGQ9Yi0xO2Euc3VzcGVuZGVkTGFuZXMmPWQ7YS5waW5nZWRMYW5lcyY9ZDthPWEuZXZlbnRUaW1lcztiPTMxLVZjKGIpO2FbYl09Y312YXIgVmM9TWF0aC5jbHozMj9NYXRoLmNsejMyOmFkLGJkPU1hdGgubG9nLGNkPU1hdGguTE4yO2Z1bmN0aW9uIGFkKGEpe3JldHVybiAwPT09YT8zMjozMS0oYmQoYSkvY2R8MCl8MH12YXIgZGQ9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxlZD1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxmZD0hMDtmdW5jdGlvbiBnZChhLGIsYyxkKXtLYnx8SWIoKTt2YXIgZT1oZCxmPUtiO0tiPSEwO3RyeXtIYihlLGEsYixjLGQpfWZpbmFsbHl7KEtiPWYpfHxNYigpfX1mdW5jdGlvbiBpZChhLGIsYyxkKXtlZChkZCxoZC5iaW5kKG51bGwsYSxiLGMsZCkpfVxuZnVuY3Rpb24gaGQoYSxiLGMsZCl7aWYoZmQpe3ZhciBlO2lmKChlPTA9PT0oYiY0KSkmJjA8amMubGVuZ3RoJiYtMTxxYy5pbmRleE9mKGEpKWE9cmMobnVsbCxhLGIsYyxkKSxqYy5wdXNoKGEpO2Vsc2V7dmFyIGY9eWMoYSxiLGMsZCk7aWYobnVsbD09PWYpZSYmc2MoYSxkKTtlbHNle2lmKGUpe2lmKC0xPHFjLmluZGV4T2YoYSkpe2E9cmMoZixhLGIsYyxkKTtqYy5wdXNoKGEpO3JldHVybn1pZih1YyhmLGEsYixjLGQpKXJldHVybjtzYyhhLGQpfWpkKGEsYixkLG51bGwsYyl9fX19XG5mdW5jdGlvbiB5YyhhLGIsYyxkKXt2YXIgZT14YihkKTtlPXdjKGUpO2lmKG51bGwhPT1lKXt2YXIgZj1aYihlKTtpZihudWxsPT09ZillPW51bGw7ZWxzZXt2YXIgZz1mLnRhZztpZigxMz09PWcpe2U9JGIoZik7aWYobnVsbCE9PWUpcmV0dXJuIGU7ZT1udWxsfWVsc2UgaWYoMz09PWcpe2lmKGYuc3RhdGVOb2RlLmh5ZHJhdGUpcmV0dXJuIDM9PT1mLnRhZz9mLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7ZT1udWxsfWVsc2UgZiE9PWUmJihlPW51bGwpfX1qZChhLGIsZCxlLGMpO3JldHVybiBudWxsfXZhciBrZD1udWxsLGxkPW51bGwsbWQ9bnVsbDtcbmZ1bmN0aW9uIG5kKCl7aWYobWQpcmV0dXJuIG1kO3ZhciBhLGI9bGQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gbWQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBvZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBwZCgpe3JldHVybiEwfWZ1bmN0aW9uIHFkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiByZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9wZDpxZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXFkO3JldHVybiB0aGlzfW0oYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXBkKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXBkKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50OnBkfSk7cmV0dXJuIGJ9XG52YXIgc2Q9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sdGQ9cmQoc2QpLHVkPW0oe30sc2Qse3ZpZXc6MCxkZXRhaWw6MH0pLHZkPXJkKHVkKSx3ZCx4ZCx5ZCxBZD1tKHt9LHVkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXlkJiYoeWQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHdkPWEuc2NyZWVuWC15ZC5zY3JlZW5YLHhkPWEuc2NyZWVuWS15ZC5zY3JlZW5ZKTp4ZD13ZD0wLHlkPWEpO3JldHVybiB3ZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOnhkfX0pLEJkPXJkKEFkKSxDZD1tKHt9LEFkLHtkYXRhVHJhbnNmZXI6MH0pLERkPXJkKENkKSxFZD1tKHt9LHVkLHtyZWxhdGVkVGFyZ2V0OjB9KSxGZD1yZChFZCksR2Q9bSh7fSxzZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksSGQ9cmQoR2QpLElkPW0oe30sc2Qse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxKZD1yZChJZCksS2Q9bSh7fSxzZCx7ZGF0YTowfSksTGQ9cmQoS2QpLE1kPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LE5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxPZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHpkKCl7cmV0dXJuIFBkfVxudmFyIFFkPW0oe30sdWQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9TWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP05kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6emQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29kKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxSZD1yZChRZCksU2Q9bSh7fSxBZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxUZD1yZChTZCksVWQ9bSh7fSx1ZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkfSksVmQ9cmQoVWQpLFdkPW0oe30sc2Qse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksWGQ9cmQoV2QpLFlkPW0oe30sQWQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxaZD1yZChZZCksJGQ9WzksMTMsMjcsMzJdLGFlPWZhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxiZT1udWxsO2ZhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihiZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBjZT1mYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWJlLGRlPWZhJiYoIWFlfHxiZSYmODxiZSYmMTE+PWJlKSxlZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxmZT0hMTtcbmZ1bmN0aW9uIGdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09JGQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gaGUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgaWU9ITE7ZnVuY3Rpb24gamUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGhlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtmZT0hMDtyZXR1cm4gZWU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09ZWUmJmZlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGtlKGEsYil7aWYoaWUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWFlJiZnZShhLGIpPyhhPW5kKCksbWQ9bGQ9a2Q9bnVsbCxpZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gZGUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGxlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIG1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhbGVbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIG5lKGEsYixjLGQpe0ViKGQpO2I9b2UoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyB0ZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBwZT1udWxsLHFlPW51bGw7ZnVuY3Rpb24gcmUoYSl7c2UoYSwwKX1mdW5jdGlvbiB0ZShhKXt2YXIgYj11ZShhKTtpZihXYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHZlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHdlPSExO2lmKGZhKXt2YXIgeGU7aWYoZmEpe3ZhciB5ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF5ZSl7dmFyIHplPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7emUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgemUub25pbnB1dH14ZT15ZX1lbHNlIHhlPSExO3dlPXhlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIEFlKCl7cGUmJihwZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkscWU9cGU9bnVsbCl9ZnVuY3Rpb24gQmUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnRlKHFlKSl7dmFyIGI9W107bmUoYixxZSxhLHhiKGEpKTthPXJlO2lmKEtiKWEoYik7ZWxzZXtLYj0hMDt0cnl7R2IoYSxiKX1maW5hbGx5e0tiPSExLE1iKCl9fX19XG5mdW5jdGlvbiBDZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyhBZSgpLHBlPWIscWU9YyxwZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkpOlwiZm9jdXNvdXRcIj09PWEmJkFlKCl9ZnVuY3Rpb24gRGUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gdGUocWUpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gRmUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBIZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpHZSxJZT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gSmUoYSxiKXtpZihIZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIUllLmNhbGwoYixjW2RdKXx8IUhlKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24gS2UoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gTGUoYSxiKXt2YXIgYz1LZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1LZShjKX19ZnVuY3Rpb24gTWUoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9NZShhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBOZSgpe2Zvcih2YXIgYT13aW5kb3csYj1YYSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1YYShhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBPZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIFBlPWZhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsUWU9bnVsbCxSZT1udWxsLFNlPW51bGwsVGU9ITE7XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7VGV8fG51bGw9PVFlfHxRZSE9PVhhKGQpfHwoZD1RZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZPZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLFNlJiZKZShTZSxkKXx8KFNlPWQsZD1vZShSZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyB0ZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9UWUpKSl9XG5QYyhcImNhbmNlbCBjYW5jZWwgY2xpY2sgY2xpY2sgY2xvc2UgY2xvc2UgY29udGV4dG1lbnUgY29udGV4dE1lbnUgY29weSBjb3B5IGN1dCBjdXQgYXV4Y2xpY2sgYXV4Q2xpY2sgZGJsY2xpY2sgZG91YmxlQ2xpY2sgZHJhZ2VuZCBkcmFnRW5kIGRyYWdzdGFydCBkcmFnU3RhcnQgZHJvcCBkcm9wIGZvY3VzaW4gZm9jdXMgZm9jdXNvdXQgYmx1ciBpbnB1dCBpbnB1dCBpbnZhbGlkIGludmFsaWQga2V5ZG93biBrZXlEb3duIGtleXByZXNzIGtleVByZXNzIGtleXVwIGtleVVwIG1vdXNlZG93biBtb3VzZURvd24gbW91c2V1cCBtb3VzZVVwIHBhc3RlIHBhc3RlIHBhdXNlIHBhdXNlIHBsYXkgcGxheSBwb2ludGVyY2FuY2VsIHBvaW50ZXJDYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlckRvd24gcG9pbnRlcnVwIHBvaW50ZXJVcCByYXRlY2hhbmdlIHJhdGVDaGFuZ2UgcmVzZXQgcmVzZXQgc2Vla2VkIHNlZWtlZCBzdWJtaXQgc3VibWl0IHRvdWNoY2FuY2VsIHRvdWNoQ2FuY2VsIHRvdWNoZW5kIHRvdWNoRW5kIHRvdWNoc3RhcnQgdG91Y2hTdGFydCB2b2x1bWVjaGFuZ2Ugdm9sdW1lQ2hhbmdlXCIuc3BsaXQoXCIgXCIpLFxuMCk7UGMoXCJkcmFnIGRyYWcgZHJhZ2VudGVyIGRyYWdFbnRlciBkcmFnZXhpdCBkcmFnRXhpdCBkcmFnbGVhdmUgZHJhZ0xlYXZlIGRyYWdvdmVyIGRyYWdPdmVyIG1vdXNlbW92ZSBtb3VzZU1vdmUgbW91c2VvdXQgbW91c2VPdXQgbW91c2VvdmVyIG1vdXNlT3ZlciBwb2ludGVybW92ZSBwb2ludGVyTW92ZSBwb2ludGVyb3V0IHBvaW50ZXJPdXQgcG9pbnRlcm92ZXIgcG9pbnRlck92ZXIgc2Nyb2xsIHNjcm9sbCB0b2dnbGUgdG9nZ2xlIHRvdWNobW92ZSB0b3VjaE1vdmUgd2hlZWwgd2hlZWxcIi5zcGxpdChcIiBcIiksMSk7UGMoT2MsMik7Zm9yKHZhciBWZT1cImNoYW5nZSBzZWxlY3Rpb25jaGFuZ2UgdGV4dElucHV0IGNvbXBvc2l0aW9uc3RhcnQgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb251cGRhdGVcIi5zcGxpdChcIiBcIiksV2U9MDtXZTxWZS5sZW5ndGg7V2UrKylOYy5zZXQoVmVbV2VdLDApO2VhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7XG5lYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2VhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZWEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtkYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2RhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZGEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2RhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBYZT1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksWWU9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQoWGUpKTtcbmZ1bmN0aW9uIFplKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1liKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBzZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7WmUoZSxoLGwpO2Y9a319fWlmKFViKXRocm93IGE9VmIsVWI9ITEsVmI9bnVsbCxhO31cbmZ1bmN0aW9uIEcoYSxiKXt2YXIgYz0kZShiKSxkPWErXCJfX2J1YmJsZVwiO2MuaGFzKGQpfHwoYWYoYixhLDIsITEpLGMuYWRkKGQpKX12YXIgYmY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBjZihhKXthW2JmXXx8KGFbYmZdPSEwLGJhLmZvckVhY2goZnVuY3Rpb24oYil7WWUuaGFzKGIpfHxkZihiLCExLGEsbnVsbCk7ZGYoYiwhMCxhLG51bGwpfSkpfVxuZnVuY3Rpb24gZGYoYSxiLGMsZCl7dmFyIGU9NDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOjAsZj1jO1wic2VsZWN0aW9uY2hhbmdlXCI9PT1hJiY5IT09Yy5ub2RlVHlwZSYmKGY9Yy5vd25lckRvY3VtZW50KTtpZihudWxsIT09ZCYmIWImJlllLmhhcyhhKSl7aWYoXCJzY3JvbGxcIiE9PWEpcmV0dXJuO2V8PTI7Zj1kfXZhciBnPSRlKGYpLGg9YStcIl9fXCIrKGI/XCJjYXB0dXJlXCI6XCJidWJibGVcIik7Zy5oYXMoaCl8fChiJiYoZXw9NCksYWYoZixhLGUsYiksZy5hZGQoaCkpfVxuZnVuY3Rpb24gYWYoYSxiLGMsZCl7dmFyIGU9TmMuZ2V0KGIpO3N3aXRjaCh2b2lkIDA9PT1lPzI6ZSl7Y2FzZSAwOmU9Z2Q7YnJlYWs7Y2FzZSAxOmU9aWQ7YnJlYWs7ZGVmYXVsdDplPWhkfWM9ZS5iaW5kKG51bGwsYixjLGEpO2U9dm9pZCAwOyFQYnx8XCJ0b3VjaHN0YXJ0XCIhPT1iJiZcInRvdWNobW92ZVwiIT09YiYmXCJ3aGVlbFwiIT09Ynx8KGU9ITApO2Q/dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtjYXB0dXJlOiEwLHBhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITApOnZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7cGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSl9XG5mdW5jdGlvbiBqZChhLGIsYyxkLGUpe3ZhciBmPWQ7aWYoMD09PShiJjEpJiYwPT09KGImMikmJm51bGwhPT1kKWE6Zm9yKDs7KXtpZihudWxsPT09ZClyZXR1cm47dmFyIGc9ZC50YWc7aWYoMz09PWd8fDQ9PT1nKXt2YXIgaD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKGg9PT1lfHw4PT09aC5ub2RlVHlwZSYmaC5wYXJlbnROb2RlPT09ZSlicmVhaztpZig0PT09Zylmb3IoZz1kLnJldHVybjtudWxsIT09Zzspe3ZhciBrPWcudGFnO2lmKDM9PT1rfHw0PT09aylpZihrPWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saz09PWV8fDg9PT1rLm5vZGVUeXBlJiZrLnBhcmVudE5vZGU9PT1lKXJldHVybjtnPWcucmV0dXJufWZvcig7bnVsbCE9PWg7KXtnPXdjKGgpO2lmKG51bGw9PT1nKXJldHVybjtrPWcudGFnO2lmKDU9PT1rfHw2PT09ayl7ZD1mPWc7Y29udGludWUgYX1oPWgucGFyZW50Tm9kZX19ZD1kLnJldHVybn1OYihmdW5jdGlvbigpe3ZhciBkPWYsZT14YihjKSxnPVtdO1xuYTp7dmFyIGg9TWMuZ2V0KGEpO2lmKHZvaWQgMCE9PWgpe3ZhciBrPXRkLHg9YTtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9kKGMpKWJyZWFrIGE7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjprPVJkO2JyZWFrO2Nhc2UgXCJmb2N1c2luXCI6eD1cImZvY3VzXCI7az1GZDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjp4PVwiYmx1clwiO2s9RmQ7YnJlYWs7Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6az1GZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pYnJlYWsgYTtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOms9QmQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6az1cbkRkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOms9VmQ7YnJlYWs7Y2FzZSBJYzpjYXNlIEpjOmNhc2UgS2M6az1IZDticmVhaztjYXNlIExjOms9WGQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOms9dmQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6az1aZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjprPUpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOms9VGR9dmFyIHc9MCE9PShiJjQpLHo9IXcmJlwic2Nyb2xsXCI9PT1hLHU9dz9udWxsIT09aD9oK1wiQ2FwdHVyZVwiOm51bGw6aDt3PVtdO2Zvcih2YXIgdD1kLHE7bnVsbCE9PVxudDspe3E9dDt2YXIgdj1xLnN0YXRlTm9kZTs1PT09cS50YWcmJm51bGwhPT12JiYocT12LG51bGwhPT11JiYodj1PYih0LHUpLG51bGwhPXYmJncucHVzaChlZih0LHYscSkpKSk7aWYoeilicmVhazt0PXQucmV0dXJufTA8dy5sZW5ndGgmJihoPW5ldyBrKGgseCxudWxsLGMsZSksZy5wdXNoKHtldmVudDpoLGxpc3RlbmVyczp3fSkpfX1pZigwPT09KGImNykpe2E6e2g9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWE7az1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoaCYmMD09PShiJjE2KSYmKHg9Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKHdjKHgpfHx4W2ZmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKHg9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQseD14P3djKHgpOm51bGwsbnVsbCE9PVxueCYmKHo9WmIoeCkseCE9PXp8fDUhPT14LnRhZyYmNiE9PXgudGFnKSl4PW51bGx9ZWxzZSBrPW51bGwseD1kO2lmKGshPT14KXt3PUJkO3Y9XCJvbk1vdXNlTGVhdmVcIjt1PVwib25Nb3VzZUVudGVyXCI7dD1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXc9VGQsdj1cIm9uUG9pbnRlckxlYXZlXCIsdT1cIm9uUG9pbnRlckVudGVyXCIsdD1cInBvaW50ZXJcIjt6PW51bGw9PWs/aDp1ZShrKTtxPW51bGw9PXg/aDp1ZSh4KTtoPW5ldyB3KHYsdCtcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PXo7aC5yZWxhdGVkVGFyZ2V0PXE7dj1udWxsO3djKGUpPT09ZCYmKHc9bmV3IHcodSx0K1wiZW50ZXJcIix4LGMsZSksdy50YXJnZXQ9cSx3LnJlbGF0ZWRUYXJnZXQ9eix2PXcpO3o9djtpZihrJiZ4KWI6e3c9azt1PXg7dD0wO2ZvcihxPXc7cTtxPWdmKHEpKXQrKztxPTA7Zm9yKHY9dTt2O3Y9Z2YodikpcSsrO2Zvcig7MDx0LXE7KXc9Z2YodyksdC0tO2Zvcig7MDxxLXQ7KXU9XG5nZih1KSxxLS07Zm9yKDt0LS07KXtpZih3PT09dXx8bnVsbCE9PXUmJnc9PT11LmFsdGVybmF0ZSlicmVhayBiO3c9Z2Yodyk7dT1nZih1KX13PW51bGx9ZWxzZSB3PW51bGw7bnVsbCE9PWsmJmhmKGcsaCxrLHcsITEpO251bGwhPT14JiZudWxsIT09eiYmaGYoZyx6LHgsdywhMCl9fX1hOntoPWQ/dWUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgSj12ZTtlbHNlIGlmKG1lKGgpKWlmKHdlKUo9RmU7ZWxzZXtKPURlO3ZhciBLPUNlfWVsc2Uoaz1oLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09ay50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09aC50eXBlfHxcInJhZGlvXCI9PT1oLnR5cGUpJiYoSj1FZSk7aWYoSiYmKEo9SihhLGQpKSl7bmUoZyxKLGMsZSk7YnJlYWsgYX1LJiZLKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoSz1oLl93cmFwcGVyU3RhdGUpJiZcbksuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWgudHlwZSYmYmIoaCxcIm51bWJlclwiLGgudmFsdWUpfUs9ZD91ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobWUoSyl8fFwidHJ1ZVwiPT09Sy5jb250ZW50RWRpdGFibGUpUWU9SyxSZT1kLFNlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6U2U9UmU9UWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6VGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlRlPSExO1VlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUGUpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpVZShnLGMsZSl9dmFyIFE7aWYoYWUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOkw9XCJvbkNvbXBvc2l0aW9uRW5kXCI7YnJlYWsgYjtcbmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOkw9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1MPXZvaWQgMH1lbHNlIGllP2dlKGEsYykmJihMPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7TCYmKGRlJiZcImtvXCIhPT1jLmxvY2FsZSYmKGllfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09TD9cIm9uQ29tcG9zaXRpb25FbmRcIj09PUwmJmllJiYoUT1uZCgpKTooa2Q9ZSxsZD1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxpZT0hMCkpLEs9b2UoZCxMKSwwPEsubGVuZ3RoJiYoTD1uZXcgTGQoTCxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OkwsbGlzdGVuZXJzOkt9KSxRP0wuZGF0YT1ROihRPWhlKGMpLG51bGwhPT1RJiYoTC5kYXRhPVEpKSkpO2lmKFE9Y2U/amUoYSxjKTprZShhLGMpKWQ9b2UoZCxcIm9uQmVmb3JlSW5wdXRcIiksMDxkLmxlbmd0aCYmKGU9bmV3IExkKFwib25CZWZvcmVJbnB1dFwiLFxuXCJiZWZvcmVpbnB1dFwiLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmUsbGlzdGVuZXJzOmR9KSxlLmRhdGE9USl9c2UoZyxiKX0pfWZ1bmN0aW9uIGVmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gb2UoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1PYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdChlZihhLGYsZSkpLGY9T2IoYSxiKSxudWxsIT1mJiZkLnB1c2goZWYoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiBnZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gaGYoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1PYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdChlZihjLGssaCkpKTplfHwoaz1PYihjLGYpLG51bGwhPWsmJmcucHVzaChlZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfWZ1bmN0aW9uIGpmKCl7fXZhciBrZj1udWxsLGxmPW51bGw7ZnVuY3Rpb24gbWYoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gbmYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBvZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxwZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gcWYoYSl7MT09PWEubm9kZVR5cGU/YS50ZXh0Q29udGVudD1cIlwiOjk9PT1hLm5vZGVUeXBlJiYoYT1hLmJvZHksbnVsbCE9YSYmKGEudGV4dENvbnRlbnQ9XCJcIikpfVxuZnVuY3Rpb24gcmYoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9ZnVuY3Rpb24gc2YoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIiRcIj09PWN8fFwiJCFcIj09PWN8fFwiJD9cIj09PWMpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlXCIvJFwiPT09YyYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIHRmPTA7ZnVuY3Rpb24gdWYoYSl7cmV0dXJueyQkdHlwZW9mOkdhLHRvU3RyaW5nOmEsdmFsdWVPZjphfX12YXIgdmY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksd2Y9XCJfX3JlYWN0RmliZXIkXCIrdmYseGY9XCJfX3JlYWN0UHJvcHMkXCIrdmYsZmY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK3ZmLHlmPVwiX19yZWFjdEV2ZW50cyRcIit2ZjtcbmZ1bmN0aW9uIHdjKGEpe3ZhciBiPWFbd2ZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW2ZmXXx8Y1t3Zl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1zZihhKTtudWxsIT09YTspe2lmKGM9YVt3Zl0pcmV0dXJuIGM7YT1zZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2IoYSl7YT1hW3dmXXx8YVtmZl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHVlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcih5KDMzKSk7fWZ1bmN0aW9uIERiKGEpe3JldHVybiBhW3hmXXx8bnVsbH1cbmZ1bmN0aW9uICRlKGEpe3ZhciBiPWFbeWZdO3ZvaWQgMD09PWImJihiPWFbeWZdPW5ldyBTZXQpO3JldHVybiBifXZhciB6Zj1bXSxBZj0tMTtmdW5jdGlvbiBCZihhKXtyZXR1cm57Y3VycmVudDphfX1mdW5jdGlvbiBIKGEpezA+QWZ8fChhLmN1cnJlbnQ9emZbQWZdLHpmW0FmXT1udWxsLEFmLS0pfWZ1bmN0aW9uIEkoYSxiKXtBZisrO3pmW0FmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIENmPXt9LE09QmYoQ2YpLE49QmYoITEpLERmPUNmO1xuZnVuY3Rpb24gRWYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBDZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBGZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uIEdmKCl7SChOKTtIKE0pfWZ1bmN0aW9uIEhmKGEsYixjKXtpZihNLmN1cnJlbnQhPT1DZil0aHJvdyBFcnJvcih5KDE2OCkpO0koTSxiKTtJKE4sYyl9XG5mdW5jdGlvbiBJZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IEVycm9yKHkoMTA4LFJhKGIpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIG0oe30sYyxkKX1mdW5jdGlvbiBKZihhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8Q2Y7RGY9TS5jdXJyZW50O0koTSxhKTtJKE4sTi5jdXJyZW50KTtyZXR1cm4hMH1mdW5jdGlvbiBLZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IoeSgxNjkpKTtjPyhhPUlmKGEsYixEZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEgoTiksSChNKSxJKE0sYSkpOkgoTik7SShOLGMpfVxudmFyIExmPW51bGwsTWY9bnVsbCxOZj1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxPZj1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssUGY9ci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxRZj1yLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFJmPXIudW5zdGFibGVfcmVxdWVzdFBhaW50LFNmPXIudW5zdGFibGVfbm93LFRmPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsVWY9ci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxWZj1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFdmPXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksWGY9ci51bnN0YWJsZV9Mb3dQcmlvcml0eSxZZj1yLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxaZj17fSwkZj12b2lkIDAhPT1SZj9SZjpmdW5jdGlvbigpe30sYWc9bnVsbCxiZz1udWxsLGNnPSExLGRnPVNmKCksTz0xRTQ+ZGc/U2Y6ZnVuY3Rpb24oKXtyZXR1cm4gU2YoKS1kZ307XG5mdW5jdGlvbiBlZygpe3N3aXRjaChUZigpKXtjYXNlIFVmOnJldHVybiA5OTtjYXNlIFZmOnJldHVybiA5ODtjYXNlIFdmOnJldHVybiA5NztjYXNlIFhmOnJldHVybiA5NjtjYXNlIFlmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHkoMzMyKSk7fX1mdW5jdGlvbiBmZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gVWY7Y2FzZSA5ODpyZXR1cm4gVmY7Y2FzZSA5NzpyZXR1cm4gV2Y7Y2FzZSA5NjpyZXR1cm4gWGY7Y2FzZSA5NTpyZXR1cm4gWWY7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZ2coYSxiKXthPWZnKGEpO3JldHVybiBOZihhLGIpfWZ1bmN0aW9uIGhnKGEsYixjKXthPWZnKGEpO3JldHVybiBPZihhLGIsYyl9ZnVuY3Rpb24gaWcoKXtpZihudWxsIT09Ymcpe3ZhciBhPWJnO2JnPW51bGw7UGYoYSl9amcoKX1cbmZ1bmN0aW9uIGpnKCl7aWYoIWNnJiZudWxsIT09YWcpe2NnPSEwO3ZhciBhPTA7dHJ5e3ZhciBiPWFnO2dnKDk5LGZ1bmN0aW9uKCl7Zm9yKDthPGIubGVuZ3RoO2ErKyl7dmFyIGM9YlthXTtkbyBjPWMoITApO3doaWxlKG51bGwhPT1jKX19KTthZz1udWxsfWNhdGNoKGMpe3Rocm93IG51bGwhPT1hZyYmKGFnPWFnLnNsaWNlKGErMSkpLE9mKFVmLGlnKSxjO31maW5hbGx5e2NnPSExfX19dmFyIGtnPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO2Z1bmN0aW9uIGxnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifXZhciBtZz1CZihudWxsKSxuZz1udWxsLG9nPW51bGwscGc9bnVsbDtmdW5jdGlvbiBxZygpe3BnPW9nPW5nPW51bGx9XG5mdW5jdGlvbiByZyhhKXt2YXIgYj1tZy5jdXJyZW50O0gobWcpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gc2coYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoKGEuY2hpbGRMYW5lcyZiKT09PWIpaWYobnVsbD09PWN8fChjLmNoaWxkTGFuZXMmYik9PT1iKWJyZWFrO2Vsc2UgYy5jaGlsZExhbmVzfD1iO2Vsc2UgYS5jaGlsZExhbmVzfD1iLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKTthPWEucmV0dXJufX1mdW5jdGlvbiB0ZyhhLGIpe25nPWE7cGc9b2c9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJih1Zz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiB2ZyhhLGIpe2lmKHBnIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilwZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09b2cpe2lmKG51bGw9PT1uZyl0aHJvdyBFcnJvcih5KDMwOCkpO29nPWI7bmcuZGVwZW5kZW5jaWVzPXtsYW5lczowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBvZz1vZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgd2c9ITE7ZnVuY3Rpb24geGcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24geWcoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gemcoYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19ZnVuY3Rpb24gQWcoYSxiKXthPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWEpe2E9YS5zaGFyZWQ7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn19XG5mdW5jdGlvbiBCZyhhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gQ2coYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt3Zz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBuPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXtuPW4udXBkYXRlUXVldWU7dmFyIEE9bi5sYXN0QmFzZVVwZGF0ZTtBIT09ZyYmKG51bGw9PT1BP24uZmlyc3RCYXNlVXBkYXRlPWw6QS5uZXh0PWwsbi5sYXN0QmFzZVVwZGF0ZT1rKX19aWYobnVsbCE9PWYpe0E9ZS5iYXNlU3RhdGU7Zz0wO249bD1rPW51bGw7ZG97aD1mLmxhbmU7dmFyIHA9Zi5ldmVudFRpbWU7aWYoKGQmaCk9PT1oKXtudWxsIT09biYmKG49bi5uZXh0PXtldmVudFRpbWU6cCxsYW5lOjAsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgQz1hLHg9ZjtoPWI7cD1jO3N3aXRjaCh4LnRhZyl7Y2FzZSAxOkM9eC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDKXtBPUMuY2FsbChwLEEsaCk7YnJlYWsgYX1BPUM7YnJlYWsgYTtjYXNlIDM6Qy5mbGFncz1DLmZsYWdzJi00MDk3fDY0O2Nhc2UgMDpDPXgucGF5bG9hZDtoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBDP0MuY2FsbChwLEEsaCk6QztpZihudWxsPT09aHx8dm9pZCAwPT09aClicmVhayBhO0E9bSh7fSxBLGgpO2JyZWFrIGE7Y2FzZSAyOndnPSEwfX1udWxsIT09Zi5jYWxsYmFjayYmKGEuZmxhZ3N8PTMyLGg9ZS5lZmZlY3RzLG51bGw9PT1oP2UuZWZmZWN0cz1bZl06aC5wdXNoKGYpKX1lbHNlIHA9e2V2ZW50VGltZTpwLGxhbmU6aCx0YWc6Zi50YWcscGF5bG9hZDpmLnBheWxvYWQsY2FsbGJhY2s6Zi5jYWxsYmFjayxuZXh0Om51bGx9LG51bGw9PT1uPyhsPW49cCxrPUEpOm49bi5uZXh0PXAsZ3w9aDtmPWYubmV4dDtpZihudWxsPT09XG5mKWlmKGg9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09aClicmVhaztlbHNlIGY9aC5uZXh0LGgubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9aCxlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW4mJihrPUEpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW47RGd8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1BfX1mdW5jdGlvbiBFZyhhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IoeSgxOTEsZSkpO2UuY2FsbChkKX19fXZhciBGZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztcbmZ1bmN0aW9uIEdnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjptKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBLZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9aYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1IZygpLGU9SWcoYSksZj16ZyhkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1IZygpLGU9SWcoYSksZj16ZyhkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO0FnKGEsZik7SmcoYSxlLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPUhnKCksZD1JZyhhKSxlPXpnKGMsZCk7ZS50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGUuY2FsbGJhY2s9XG5iKTtBZyhhLGUpO0pnKGEsZCxjKX19O2Z1bmN0aW9uIExnKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUplKGMsZCl8fCFKZShlLGYpOiEwfVxuZnVuY3Rpb24gTWcoYSxiLGMpe3ZhciBkPSExLGU9Q2Y7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9dmcoZik6KGU9RmYoYik/RGY6TS5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/RWYoYSxlKTpDZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPUtnO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gTmcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJktnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gT2coYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1GZzt4ZyhhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PXZnKGYpOihmPUZmKGIpP0RmOk0uY3VycmVudCxlLmNvbnRleHQ9RWYoYSxmKSk7Q2coYSxjLGUsZCk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKEdnKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fFxuKGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJktnLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLENnKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQpfXZhciBQZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gUWcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHkoMTQ3LGEpKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PUZnJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHkoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHkoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBSZyhhLGIpe2lmKFwidGV4dGFyZWFcIiE9PWEudHlwZSl0aHJvdyBFcnJvcih5KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO31cbmZ1bmN0aW9uIFNnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZmxhZ3M9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9VGcoYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3M9MixcbmMpOmQ7Yi5mbGFncz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFncz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9VWcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9UWcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVZnKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPVFnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVxuV2coYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG4oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVhnKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gQShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9VWcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGM9VmcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9UWcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHRhOnJldHVybiBiPVdnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihQZyhiKXx8TGEoYikpcmV0dXJuIGI9WGcoYixcbmEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtSZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHAoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT11YT9uKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgdGE6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoUGcoYyl8fExhKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm4oYSxiLGMsZCxudWxsKTtSZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEMoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8XG5udWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09dWE/bihiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgdGE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoUGcoZCl8fExhKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG4oYixhLGQsZSxudWxsKTtSZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHgoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsdD1udWxsLHU9Zyx6PWc9MCxxPW51bGw7bnVsbCE9PXUmJno8aC5sZW5ndGg7eisrKXt1LmluZGV4Pno/KHE9dSx1PW51bGwpOnE9dS5zaWJsaW5nO3ZhciBuPXAoZSx1LGhbel0sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT1xKTticmVha31hJiZ1JiZudWxsPT09XG5uLmFsdGVybmF0ZSYmYihlLHUpO2c9ZihuLGcseik7bnVsbD09PXQ/bD1uOnQuc2libGluZz1uO3Q9bjt1PXF9aWYoej09PWgubGVuZ3RoKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDt6PGgubGVuZ3RoO3orKyl1PUEoZSxoW3pdLGspLG51bGwhPT11JiYoZz1mKHUsZyx6KSxudWxsPT09dD9sPXU6dC5zaWJsaW5nPXUsdD11KTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7ejxoLmxlbmd0aDt6KyspcT1DKHUsZSx6LGhbel0sayksbnVsbCE9PXEmJihhJiZudWxsIT09cS5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1xLmtleT96OnEua2V5KSxnPWYocSxnLHopLG51bGw9PT10P2w9cTp0LnNpYmxpbmc9cSx0PXEpO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gdyhlLGcsaCxrKXt2YXIgbD1MYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcih5KDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PVxuaCl0aHJvdyBFcnJvcih5KDE1MSkpO2Zvcih2YXIgdD1sPW51bGwsdT1nLHo9Zz0wLHE9bnVsbCxuPWgubmV4dCgpO251bGwhPT11JiYhbi5kb25lO3orKyxuPWgubmV4dCgpKXt1LmluZGV4Pno/KHE9dSx1PW51bGwpOnE9dS5zaWJsaW5nO3ZhciB3PXAoZSx1LG4udmFsdWUsayk7aWYobnVsbD09PXcpe251bGw9PT11JiYodT1xKTticmVha31hJiZ1JiZudWxsPT09dy5hbHRlcm5hdGUmJmIoZSx1KTtnPWYodyxnLHopO251bGw9PT10P2w9dzp0LnNpYmxpbmc9dzt0PXc7dT1xfWlmKG4uZG9uZSlyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7IW4uZG9uZTt6Kyssbj1oLm5leHQoKSluPUEoZSxuLnZhbHVlLGspLG51bGwhPT1uJiYoZz1mKG4sZyx6KSxudWxsPT09dD9sPW46dC5zaWJsaW5nPW4sdD1uKTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7IW4uZG9uZTt6Kyssbj1oLm5leHQoKSluPUModSxlLHosbi52YWx1ZSxrKSxudWxsIT09biYmKGEmJm51bGwhPT1uLmFsdGVybmF0ZSYmXG51LmRlbGV0ZShudWxsPT09bi5rZXk/ejpuLmtleSksZz1mKG4sZyx6KSxudWxsPT09dD9sPW46dC5zaWJsaW5nPW4sdD1uKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT11YSYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBzYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe3N3aXRjaChrLnRhZyl7Y2FzZSA3OmlmKGYudHlwZT09PXVhKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWJyZWFrO2RlZmF1bHQ6aWYoay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7XG5kPWUoayxmLnByb3BzKTtkLnJlZj1RZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PXVhPyhkPVhnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1WZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1RZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgdGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9XG5XZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1VZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihQZyhmKSlyZXR1cm4geChhLGQsZixoKTtpZihMYShmKSlyZXR1cm4gdyhhLGQsZixoKTtsJiZSZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAyMjpjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnRocm93IEVycm9yKHkoMTUyLFJhKGEudHlwZSl8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIFlnPVNnKCEwKSxaZz1TZyghMSksJGc9e30sYWg9QmYoJGcpLGJoPUJmKCRnKSxjaD1CZigkZyk7XG5mdW5jdGlvbiBkaChhKXtpZihhPT09JGcpdGhyb3cgRXJyb3IoeSgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBlaChhLGIpe0koY2gsYik7SShiaCxhKTtJKGFoLCRnKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOm1iKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1tYihiLGEpfUgoYWgpO0koYWgsYil9ZnVuY3Rpb24gZmgoKXtIKGFoKTtIKGJoKTtIKGNoKX1mdW5jdGlvbiBnaChhKXtkaChjaC5jdXJyZW50KTt2YXIgYj1kaChhaC5jdXJyZW50KTt2YXIgYz1tYihiLGEudHlwZSk7YiE9PWMmJihJKGJoLGEpLEkoYWgsYykpfWZ1bmN0aW9uIGhoKGEpe2JoLmN1cnJlbnQ9PT1hJiYoSChhaCksSChiaCkpfXZhciBQPUJmKDApO1xuZnVuY3Rpb24gaWgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8XCIkP1wiPT09Yy5kYXRhfHxcIiQhXCI9PT1jLmRhdGEpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZmxhZ3MmNjQpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgamg9bnVsbCxraD1udWxsLGxoPSExO1xuZnVuY3Rpb24gbWgoYSxiKXt2YXIgYz1uaCg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5mbGFncz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gb2goYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHBoKGEpe2lmKGxoKXt2YXIgYj1raDtpZihiKXt2YXIgYz1iO2lmKCFvaChhLGIpKXtiPXJmKGMubmV4dFNpYmxpbmcpO2lmKCFifHwhb2goYSxiKSl7YS5mbGFncz1hLmZsYWdzJi0xMDI1fDI7bGg9ITE7amg9YTtyZXR1cm59bWgoamgsYyl9amg9YTtraD1yZihiLmZpcnN0Q2hpbGQpfWVsc2UgYS5mbGFncz1hLmZsYWdzJi0xMDI1fDIsbGg9ITEsamg9YX19ZnVuY3Rpb24gcWgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO2poPWF9XG5mdW5jdGlvbiByaChhKXtpZihhIT09amgpcmV0dXJuITE7aWYoIWxoKXJldHVybiBxaChhKSxsaD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIW5mKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1raDtiOyltaChhLGIpLGI9cmYoYi5uZXh0U2libGluZyk7cWgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih5KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiLyRcIj09PWMpe2lmKDA9PT1iKXtraD1yZihhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlXCIkXCIhPT1jJiZcIiQhXCIhPT1jJiZcIiQ/XCIhPT1jfHxiKyt9YT1hLm5leHRTaWJsaW5nfWtoPW51bGx9fWVsc2Uga2g9amg/cmYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9XG5mdW5jdGlvbiBzaCgpe2toPWpoPW51bGw7bGg9ITF9dmFyIHRoPVtdO2Z1bmN0aW9uIHVoKCl7Zm9yKHZhciBhPTA7YTx0aC5sZW5ndGg7YSsrKXRoW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7dGgubGVuZ3RoPTB9dmFyIHZoPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsd2g9cmEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcseGg9MCxSPW51bGwsUz1udWxsLFQ9bnVsbCx5aD0hMSx6aD0hMTtmdW5jdGlvbiBBaCgpe3Rocm93IEVycm9yKHkoMzIxKSk7fWZ1bmN0aW9uIEJoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBDaChhLGIsYyxkLGUsZil7eGg9ZjtSPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDt2aC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP0RoOkVoO2E9YyhkLGUpO2lmKHpoKXtmPTA7ZG97emg9ITE7aWYoISgyNT5mKSl0aHJvdyBFcnJvcih5KDMwMSkpO2YrPTE7VD1TPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO3ZoLmN1cnJlbnQ9Rmg7YT1jKGQsZSl9d2hpbGUoemgpfXZoLmN1cnJlbnQ9R2g7Yj1udWxsIT09UyYmbnVsbCE9PVMubmV4dDt4aD0wO1Q9Uz1SPW51bGw7eWg9ITE7aWYoYil0aHJvdyBFcnJvcih5KDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIEhoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlPVQ9YTpUPVQubmV4dD1hO3JldHVybiBUfVxuZnVuY3Rpb24gSWgoKXtpZihudWxsPT09Uyl7dmFyIGE9Ui5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Uy5uZXh0O3ZhciBiPW51bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZTpULm5leHQ7aWYobnVsbCE9PWIpVD1iLFM9YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHkoMzEwKSk7Uz1hO2E9e21lbW9pemVkU3RhdGU6Uy5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpTLmJhc2VTdGF0ZSxiYXNlUXVldWU6Uy5iYXNlUXVldWUscXVldWU6Uy5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YX1yZXR1cm4gVH1mdW5jdGlvbiBKaChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIEtoKGEpe3ZhciBiPUloKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHkoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9UyxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtlPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9Zj1udWxsLGs9ZTtkb3t2YXIgbD1rLmxhbmU7aWYoKHhoJmwpPT09bCludWxsIT09aCYmKGg9aC5uZXh0PXtsYW5lOjAsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWsuZWFnZXJSZWR1Y2VyPT09YT9rLmVhZ2VyU3RhdGU6YShkLGsuYWN0aW9uKTtlbHNle3ZhciBuPXtsYW5lOmwsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixcbmVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWg/KGc9aD1uLGY9ZCk6aD1oLm5leHQ9bjtSLmxhbmVzfD1sO0RnfD1sfWs9ay5uZXh0fXdoaWxlKG51bGwhPT1rJiZrIT09ZSk7bnVsbD09PWg/Zj1kOmgubmV4dD1nO0hlKGQsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1mO2IuYmFzZVF1ZXVlPWg7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBMaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7SGUoZixiLm1lbW9pemVkU3RhdGUpfHwodWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1cbmZ1bmN0aW9uIE1oKGEsYixjKXt2YXIgZD1iLl9nZXRWZXJzaW9uO2Q9ZChiLl9zb3VyY2UpO3ZhciBlPWIuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk7aWYobnVsbCE9PWUpYT1lPT09ZDtlbHNlIGlmKGE9YS5tdXRhYmxlUmVhZExhbmVzLGE9KHhoJmEpPT09YSliLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PWQsdGgucHVzaChiKTtpZihhKXJldHVybiBjKGIuX3NvdXJjZSk7dGgucHVzaChiKTt0aHJvdyBFcnJvcih5KDM1MCkpO31cbmZ1bmN0aW9uIE5oKGEsYixjLGQpe3ZhciBlPVU7aWYobnVsbD09PWUpdGhyb3cgRXJyb3IoeSgzNDkpKTt2YXIgZj1iLl9nZXRWZXJzaW9uLGc9ZihiLl9zb3VyY2UpLGg9dmguY3VycmVudCxrPWgudXNlU3RhdGUoZnVuY3Rpb24oKXtyZXR1cm4gTWgoZSxiLGMpfSksbD1rWzFdLG49a1swXTtrPVQ7dmFyIEE9YS5tZW1vaXplZFN0YXRlLHA9QS5yZWZzLEM9cC5nZXRTbmFwc2hvdCx4PUEuc291cmNlO0E9QS5zdWJzY3JpYmU7dmFyIHc9UjthLm1lbW9pemVkU3RhdGU9e3JlZnM6cCxzb3VyY2U6YixzdWJzY3JpYmU6ZH07aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtwLmdldFNuYXBzaG90PWM7cC5zZXRTbmFwc2hvdD1sO3ZhciBhPWYoYi5fc291cmNlKTtpZighSGUoZyxhKSl7YT1jKGIuX3NvdXJjZSk7SGUobixhKXx8KGwoYSksYT1JZyh3KSxlLm11dGFibGVSZWFkTGFuZXN8PWEmZS5wZW5kaW5nTGFuZXMpO2E9ZS5tdXRhYmxlUmVhZExhbmVzO2UuZW50YW5nbGVkTGFuZXN8PWE7Zm9yKHZhciBkPVxuZS5lbnRhbmdsZW1lbnRzLGg9YTswPGg7KXt2YXIgaz0zMS1WYyhoKSx2PTE8PGs7ZFtrXXw9YTtoJj1+dn19fSxbYyxiLGRdKTtoLnVzZUVmZmVjdChmdW5jdGlvbigpe3JldHVybiBkKGIuX3NvdXJjZSxmdW5jdGlvbigpe3ZhciBhPXAuZ2V0U25hcHNob3QsYz1wLnNldFNuYXBzaG90O3RyeXtjKGEoYi5fc291cmNlKSk7dmFyIGQ9SWcodyk7ZS5tdXRhYmxlUmVhZExhbmVzfD1kJmUucGVuZGluZ0xhbmVzfWNhdGNoKHEpe2MoZnVuY3Rpb24oKXt0aHJvdyBxO30pfX0pfSxbYixkXSk7SGUoQyxjKSYmSGUoeCxiKSYmSGUoQSxkKXx8KGE9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6bn0sYS5kaXNwYXRjaD1sPU9oLmJpbmQobnVsbCxSLGEpLGsucXVldWU9YSxrLmJhc2VRdWV1ZT1udWxsLG49TWgoZSxiLGMpLGsubWVtb2l6ZWRTdGF0ZT1rLmJhc2VTdGF0ZT1uKTtyZXR1cm4gbn1cbmZ1bmN0aW9uIFBoKGEsYixjKXt2YXIgZD1JaCgpO3JldHVybiBOaChkLGEsYixjKX1mdW5jdGlvbiBRaChhKXt2YXIgYj1IaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpKaCxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIFJoKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPVIudXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbH0sUi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBTaChhKXt2YXIgYj1IaCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfWZ1bmN0aW9uIFRoKCl7cmV0dXJuIEloKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiBVaChhLGIsYyxkKXt2YXIgZT1IaCgpO1IuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPVJoKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiBWaChhLGIsYyxkKXt2YXIgZT1JaCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1TKXt2YXIgZz1TLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJkJoKGQsZy5kZXBzKSl7UmgoYixjLGYsZCk7cmV0dXJufX1SLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyxmLGQpfWZ1bmN0aW9uIFdoKGEsYil7cmV0dXJuIFVoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWGgoYSxiKXtyZXR1cm4gVmgoNTE2LDQsYSxiKX1mdW5jdGlvbiBZaChhLGIpe3JldHVybiBWaCg0LDIsYSxiKX1mdW5jdGlvbiBaaChhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fVxuZnVuY3Rpb24gJGgoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBWaCg0LDIsWmguYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gYWkoKXt9ZnVuY3Rpb24gYmkoYSxiKXt2YXIgYz1JaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmQmgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gY2koYSxiKXt2YXIgYz1JaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmQmgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBkaShhLGIpe3ZhciBjPWVnKCk7Z2coOTg+Yz85ODpjLGZ1bmN0aW9uKCl7YSghMCl9KTtnZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYz13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7YSghMSksYigpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1jfX0pfVxuZnVuY3Rpb24gT2goYSxiLGMpe3ZhciBkPUhnKCksZT1JZyhhKSxmPXtsYW5lOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sZz1iLnBlbmRpbmc7bnVsbD09PWc/Zi5uZXh0PWY6KGYubmV4dD1nLm5leHQsZy5uZXh0PWYpO2IucGVuZGluZz1mO2c9YS5hbHRlcm5hdGU7aWYoYT09PVJ8fG51bGwhPT1nJiZnPT09Uil6aD15aD0hMDtlbHNle2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWd8fDA9PT1nLmxhbmVzKSYmKGc9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1nKSl0cnl7dmFyIGg9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxrPWcoaCxjKTtmLmVhZ2VyUmVkdWNlcj1nO2YuZWFnZXJTdGF0ZT1rO2lmKEhlKGssaCkpcmV0dXJufWNhdGNoKGwpe31maW5hbGx5e31KZyhhLGUsZCl9fVxudmFyIEdoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpBaCx1c2VDb250ZXh0OkFoLHVzZUVmZmVjdDpBaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkFoLHVzZUxheW91dEVmZmVjdDpBaCx1c2VNZW1vOkFoLHVzZVJlZHVjZXI6QWgsdXNlUmVmOkFoLHVzZVN0YXRlOkFoLHVzZURlYnVnVmFsdWU6QWgsdXNlRGVmZXJyZWRWYWx1ZTpBaCx1c2VUcmFuc2l0aW9uOkFoLHVzZU11dGFibGVTb3VyY2U6QWgsdXNlT3BhcXVlSWRlbnRpZmllcjpBaCx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LERoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe0hoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OldoLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBVaCg0LDIsWmguYmluZChudWxsLFxuYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFVoKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9SGgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9SGgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD1PaC5iaW5kKG51bGwsUixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6U2gsdXNlU3RhdGU6UWgsdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPVFoKGEpLGM9YlswXSxkPWJbMV07V2goZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO1xud2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPVFoKCExKSxiPWFbMF07YT1kaS5iaW5kKG51bGwsYVsxXSk7U2goYSk7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7ZC5tZW1vaXplZFN0YXRlPXtyZWZzOntnZXRTbmFwc2hvdDpiLHNldFNuYXBzaG90Om51bGx9LHNvdXJjZTphLHN1YnNjcmliZTpjfTtyZXR1cm4gTmgoZCxhLGIsYyl9LHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtpZihsaCl7dmFyIGE9ITEsYj11ZihmdW5jdGlvbigpe2F8fChhPSEwLGMoXCJyOlwiKyh0ZisrKS50b1N0cmluZygzNikpKTt0aHJvdyBFcnJvcih5KDM1NSkpO30pLGM9UWgoYilbMV07MD09PShSLm1vZGUmMikmJihSLmZsYWdzfD01MTYsUmgoNSxmdW5jdGlvbigpe2MoXCJyOlwiKyh0ZisrKS50b1N0cmluZygzNikpfSxcbnZvaWQgMCxudWxsKSk7cmV0dXJuIGJ9Yj1cInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KTtRaChiKTtyZXR1cm4gYn0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxFaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6YmksdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6WGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTokaCx1c2VMYXlvdXRFZmZlY3Q6WWgsdXNlTWVtbzpjaSx1c2VSZWR1Y2VyOktoLHVzZVJlZjpUaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBLaChKaCl9LHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1LaChKaCksYz1iWzBdLGQ9YlsxXTtYaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPUtoKEpoKVswXTtyZXR1cm5bVGgoKS5jdXJyZW50LFxuYV19LHVzZU11dGFibGVTb3VyY2U6UGgsdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe3JldHVybiBLaChKaClbMF19LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRmg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpMaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gTGgoSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9TGgoSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1MaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gTGgoSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LGVpPXJhLlJlYWN0Q3VycmVudE93bmVyLHVnPSExO2Z1bmN0aW9uIGZpKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WmcoYixudWxsLGMsZCk6WWcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gZ2koYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3RnKGIsZSk7ZD1DaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF1ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS01MTcsYS5sYW5lcyY9fmUsaGkoYSxiLGUpO2IuZmxhZ3N8PTE7ZmkoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBpaShhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIWppKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLGtpKGEsYixnLGQsZSxmKTthPVZnKGMudHlwZSxudWxsLGQsYixiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZigwPT09KGUmZikmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6SmUsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gaGkoYSxiLGYpO2IuZmxhZ3N8PTE7YT1UZyhnLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGtpKGEsYixjLGQsZSxmKXtpZihudWxsIT09YSYmSmUoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmKWlmKHVnPSExLDAhPT0oZiZlKSkwIT09KGEuZmxhZ3MmMTYzODQpJiYodWc9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcyxoaShhLGIsZik7cmV0dXJuIGxpKGEsYixjLGQsZil9XG5mdW5jdGlvbiBtaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZXx8XCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsYyk7ZWxzZSBpZigwIT09KGMmMTA3Mzc0MTgyNCkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MH0sbmkoYixudWxsIT09Zj9mLmJhc2VMYW5lczpjKTtlbHNlIHJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmF9LG5pKGIsYSksbnVsbDtlbHNlIG51bGwhPT1mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOmQ9YyxuaShiLGQpO2ZpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gb2koYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5mbGFnc3w9MTI4fWZ1bmN0aW9uIGxpKGEsYixjLGQsZSl7dmFyIGY9RmYoYyk/RGY6TS5jdXJyZW50O2Y9RWYoYixmKTt0ZyhiLGUpO2M9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gcGkoYSxiLGMsZCxlKXtpZihGZihjKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO3RnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLE1nKGIsYyxkKSxPZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD12ZyhsKToobD1GZihjKT9EZjpNLmN1cnJlbnQsbD1FZihiLGwpKTt2YXIgbj1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxBPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBufHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmTmcoYixnLGQsbCk7d2c9ITE7dmFyIHA9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cDtDZyhiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8cCE9PWt8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuJiYoR2coYixjLG4sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXdnfHxMZyhiLGMsaCxkLHAsayxsKSk/KEF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTt5ZyhhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOmxnKGIudHlwZSxoKTtnLnByb3BzPWw7QT1iLnBlbmRpbmdQcm9wcztwPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPXZnKGspOihrPUZmKGMpP0RmOk0uY3VycmVudCxrPUVmKGIsaykpO3ZhciBDPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBDfHxcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09QXx8cCE9PWspJiZOZyhiLGcsZCxrKTt3Zz0hMTtwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2ghPT1BfHxwIT09eHx8Ti5jdXJyZW50fHx3Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIEMmJihHZyhiLGMsQyxkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKGw9d2d8fExnKGIsYyxsLGQscCx4LGspKT8obnx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxcbngsayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZmxhZ3N8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxcbmg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTI1NiksZD0hMSl9cmV0dXJuIHFpKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIHFpKGEsYixjLGQsZSxmKXtvaShhLGIpO3ZhciBnPTAhPT0oYi5mbGFncyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZLZihiLGMsITEpLGhpKGEsYixmKTtkPWIuc3RhdGVOb2RlO2VpLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9WWcoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1ZZyhiLG51bGwsaCxmKSk6ZmkoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmS2YoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiByaShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0hmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkhmKGEsYi5jb250ZXh0LCExKTtlaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgc2k9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeUxhbmU6MH07XG5mdW5jdGlvbiB0aShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1QLmN1cnJlbnQsZj0hMSxnOyhnPTAhPT0oYi5mbGFncyY2NCkpfHwoZz1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2c/KGY9ITAsYi5mbGFncyY9LTY1KTpudWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZXx8dm9pZCAwPT09ZC5mYWxsYmFja3x8ITA9PT1kLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwoZXw9MSk7SShQLGUmMSk7aWYobnVsbD09PWEpe3ZvaWQgMCE9PWQuZmFsbGJhY2smJnBoKGIpO2E9ZC5jaGlsZHJlbjtlPWQuZmFsbGJhY2s7aWYoZilyZXR1cm4gYT11aShiLGEsZSxjKSxiLmNoaWxkLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczpjfSxiLm1lbW9pemVkU3RhdGU9c2ksYTtpZihcIm51bWJlclwiPT09dHlwZW9mIGQudW5zdGFibGVfZXhwZWN0ZWRMb2FkVGltZSlyZXR1cm4gYT11aShiLGEsZSxjKSxiLmNoaWxkLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczpjfSxcbmIubWVtb2l6ZWRTdGF0ZT1zaSxiLmxhbmVzPTMzNTU0NDMyLGE7Yz12aSh7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjphfSxiLm1vZGUsYyxudWxsKTtjLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWN9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTp7YmFzZUxhbmVzOmUuYmFzZUxhbmVzfGN9LGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPXNpLGQ7Yz14aShhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31pZihmKXJldHVybiBkPXdpKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLGYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT97YmFzZUxhbmVzOmN9Olxue2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9ZnVuY3Rpb24gdWkoYSxiLGMsZCl7dmFyIGU9YS5tb2RlLGY9YS5jaGlsZDtiPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Yn07MD09PShlJjIpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9Yik6Zj12aShiLGUsMCxudWxsKTtjPVhnKGMsZSxkLG51bGwpO2YucmV0dXJuPWE7Yy5yZXR1cm49YTtmLnNpYmxpbmc9YzthLmNoaWxkPWY7cmV0dXJuIGN9XG5mdW5jdGlvbiB4aShhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO2E9ZS5zaWJsaW5nO2M9VGcoZSx7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpjfSk7MD09PShiLm1vZGUmMikmJihjLmxhbmVzPWQpO2MucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihhLm5leHRFZmZlY3Q9bnVsbCxhLmZsYWdzPTgsYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YSk7cmV0dXJuIGIuY2hpbGQ9Y31cbmZ1bmN0aW9uIHdpKGEsYixjLGQsZSl7dmFyIGY9Yi5tb2RlLGc9YS5jaGlsZDthPWcuc2libGluZzt2YXIgaD17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmN9OzA9PT0oZiYyKSYmYi5jaGlsZCE9PWc/KGM9Yi5jaGlsZCxjLmNoaWxkTGFuZXM9MCxjLnBlbmRpbmdQcm9wcz1oLGc9Yy5sYXN0RWZmZWN0LG51bGwhPT1nPyhiLmZpcnN0RWZmZWN0PWMuZmlyc3RFZmZlY3QsYi5sYXN0RWZmZWN0PWcsZy5uZXh0RWZmZWN0PW51bGwpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGwpOmM9VGcoZyxoKTtudWxsIT09YT9kPVRnKGEsZCk6KGQ9WGcoZCxmLGUsbnVsbCksZC5mbGFnc3w9Mik7ZC5yZXR1cm49YjtjLnJldHVybj1iO2Muc2libGluZz1kO2IuY2hpbGQ9YztyZXR1cm4gZH1mdW5jdGlvbiB5aShhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtzZyhhLnJldHVybixiKX1cbmZ1bmN0aW9uIHppKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbE1vZGU6ZSxsYXN0RWZmZWN0OmZ9OihnLmlzQmFja3dhcmRzPWIsZy5yZW5kZXJpbmc9bnVsbCxnLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGcubGFzdD1kLGcudGFpbD1jLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBBaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO2ZpKGEsYixkLmNoaWxkcmVuLGMpO2Q9UC5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5mbGFncyY2NCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ5aShhLGMpO2Vsc2UgaWYoMTk9PT1hLnRhZyl5aShhLGMpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1JKFAsZCk7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PWloKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7emkoYiwhMSxlLGMsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09aWgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfXppKGIsITAsYyxudWxsLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwidG9nZXRoZXJcIjp6aShiLCExLG51bGwsbnVsbCx2b2lkIDAsYi5sYXN0RWZmZWN0KTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaGkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO0RnfD1iLmxhbmVzO2lmKDAhPT0oYyZiLmNoaWxkTGFuZXMpKXtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IoeSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9VGcoYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVRnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9cmV0dXJuIG51bGx9dmFyIEJpLENpLERpLEVpO1xuQmk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O0NpPWZ1bmN0aW9uKCl7fTtcbkRpPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEubWVtb2l6ZWRQcm9wcztpZihlIT09ZCl7YT1iLnN0YXRlTm9kZTtkaChhaC5jdXJyZW50KTt2YXIgZj1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjplPVlhKGEsZSk7ZD1ZYShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZWIoYSxlKTtkPWViKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1tKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9bSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9Z2IoYSxlKTtkPWdiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9amYpfXZiKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09XG5sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoY2EuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fFxuKGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLGMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZHKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09ayYmay4kJHR5cGVvZj09PUdhP2sudG9TdHJpbmcoKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsXG5jKTt2YXIgbD1mO2lmKGIudXBkYXRlUXVldWU9bCliLmZsYWdzfD00fX07RWk9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmZsYWdzfD00KX07ZnVuY3Rpb24gRmkoYSxiKXtpZighbGgpc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIEdpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTpyZXR1cm4gRmYoYi50eXBlKSYmR2YoKSxudWxsO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2Q9Yi5zdGF0ZU5vZGU7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKXJoKGIpP2IuZmxhZ3N8PTQ6ZC5oeWRyYXRlfHwoYi5mbGFnc3w9MjU2KTtDaShiKTtyZXR1cm4gbnVsbDtjYXNlIDU6aGgoYik7dmFyIGU9ZGgoY2guY3VycmVudCk7Yz1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKURpKGEsYixjLGQsZSksYS5yZWYhPT1iLnJlZiYmKGIuZmxhZ3N8PTEyOCk7ZWxzZXtpZighZCl7aWYobnVsbD09PVxuYi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjYpKTtyZXR1cm4gbnVsbH1hPWRoKGFoLmN1cnJlbnQpO2lmKHJoKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW3dmXT1iO2RbeGZdPWY7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpHKFwiY2FuY2VsXCIsZCk7RyhcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihhPTA7YTxYZS5sZW5ndGg7YSsrKUcoWGVbYV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGQpO0coXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoZCxmKTtHKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtHKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGQsZiksRyhcImludmFsaWRcIixkKX12YihjLGYpO2E9bnVsbDtmb3IodmFyIGcgaW4gZilmLmhhc093blByb3BlcnR5KGcpJiYoZT1mW2ddLFwiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBlP2QudGV4dENvbnRlbnQhPT1lJiYoYT1bXCJjaGlsZHJlblwiLGVdKTpcIm51bWJlclwiPT09dHlwZW9mIGUmJmQudGV4dENvbnRlbnQhPT1cIlwiK2UmJihhPVtcImNoaWxkcmVuXCIsXCJcIitlXSk6Y2EuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWUmJlwib25TY3JvbGxcIj09PWcmJkcoXCJzY3JvbGxcIixkKSk7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGQpO2NiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoZCk7amIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9XG5qZil9ZD1hO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDthPT09a2IuaHRtbCYmKGE9bGIoYykpO2E9PT1rYi5odG1sP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoYyx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChjKSxcInNlbGVjdFwiPT09YyYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsYyk7YVt3Zl09YjthW3hmXT1kO0JpKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTtnPXdiKGMsZCk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpHKFwiY2FuY2VsXCIsYSk7RyhcImNsb3NlXCIsYSk7XG5lPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8WGUubGVuZ3RoO2UrKylHKFhlW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGEpO0coXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpaYShhLGQpO2U9WWEoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtlPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihhLGQpO2U9XG5nYihhLGQpO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9dmIoYyxlKTt2YXIgaD1lO2ZvcihmIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGs9aFtmXTtcInN0eWxlXCI9PT1mP3RiKGEsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZvYihhLGspKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Y3x8XCJcIiE9PWspJiZwYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmcGIoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihjYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZHKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmcWEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtjYihhLGQsITEpO1xuYnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoYSk7amIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK1NhKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Zj1kLnZhbHVlO251bGwhPWY/ZmIoYSwhIWQubXVsdGlwbGUsZiwhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJmZiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9amYpfW1mKGMsZCkmJihiLmZsYWdzfD00KX1udWxsIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlFaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjYpKTtcbmM9ZGgoY2guY3VycmVudCk7ZGgoYWguY3VycmVudCk7cmgoYik/KGQ9Yi5zdGF0ZU5vZGUsYz1iLm1lbW9pemVkUHJvcHMsZFt3Zl09YixkLm5vZGVWYWx1ZSE9PWMmJihiLmZsYWdzfD00KSk6KGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW3dmXT1iLGIuc3RhdGVOb2RlPWQpfXJldHVybiBudWxsO2Nhc2UgMTM6SChQKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZmxhZ3MmNjQpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2M9ITE7bnVsbD09PWE/dm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLmZhbGxiYWNrJiZyaChiKTpjPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoZCYmIWMmJjAhPT0oYi5tb2RlJjIpKWlmKG51bGw9PT1hJiYhMCE9PWIubWVtb2l6ZWRQcm9wcy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8MCE9PShQLmN1cnJlbnQmMSkpMD09PVYmJihWPTMpO2Vsc2V7aWYoMD09PVZ8fDM9PT1WKVY9XG40O251bGw9PT1VfHwwPT09KERnJjEzNDIxNzcyNykmJjA9PT0oSGkmMTM0MjE3NzI3KXx8SWkoVSxXKX1pZihkfHxjKWIuZmxhZ3N8PTQ7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLENpKGIpLG51bGw9PT1hJiZjZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHJnKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gRmYoYi50eXBlKSYmR2YoKSxudWxsO2Nhc2UgMTk6SChQKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtmPTAhPT0oYi5mbGFncyY2NCk7Zz1kLnJlbmRlcmluZztpZihudWxsPT09ZylpZihmKUZpKGQsITEpO2Vsc2V7aWYoMCE9PVZ8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPWloKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD02NDtGaShkLCExKTtmPWcudXBkYXRlUXVldWU7bnVsbCE9PWYmJihiLnVwZGF0ZVF1ZXVlPWYsYi5mbGFnc3w9NCk7XG5udWxsPT09ZC5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0O2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTIsZi5uZXh0RWZmZWN0PW51bGwsZi5maXJzdEVmZmVjdD1udWxsLGYubGFzdEVmZmVjdD1udWxsLGc9Zi5hbHRlcm5hdGUsbnVsbD09PWc/KGYuY2hpbGRMYW5lcz0wLGYubGFuZXM9YSxmLmNoaWxkPW51bGwsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLm1lbW9pemVkUHJvcHM9Zy5tZW1vaXplZFByb3BzLGYubWVtb2l6ZWRTdGF0ZT1nLm1lbW9pemVkU3RhdGUsZi51cGRhdGVRdWV1ZT1nLnVwZGF0ZVF1ZXVlLGYudHlwZT1nLnR5cGUsYT1nLmRlcGVuZGVuY2llcyxcbmYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7SShQLFAuY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9YS5zaWJsaW5nfW51bGwhPT1kLnRhaWwmJk8oKT5KaSYmKGIuZmxhZ3N8PTY0LGY9ITAsRmkoZCwhMSksYi5sYW5lcz0zMzU1NDQzMil9ZWxzZXtpZighZilpZihhPWloKGcpLG51bGwhPT1hKXtpZihiLmZsYWdzfD02NCxmPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxGaShkLCEwKSxudWxsPT09ZC50YWlsJiZcImhpZGRlblwiPT09ZC50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhbGgpcmV0dXJuIGI9Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdCxudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKSxudWxsfWVsc2UgMipPKCktZC5yZW5kZXJpbmdTdGFydFRpbWU+SmkmJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9XG42NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpO2QuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9ZC5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxkLmxhc3Q9Zyl9cmV0dXJuIG51bGwhPT1kLnRhaWw/KGM9ZC50YWlsLGQucmVuZGVyaW5nPWMsZC50YWlsPWMuc2libGluZyxkLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0LGQucmVuZGVyaW5nU3RhcnRUaW1lPU8oKSxjLnNpYmxpbmc9bnVsbCxiPVAuY3VycmVudCxJKFAsZj9iJjF8MjpiJjEpLGMpOm51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBLaSgpLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09KG51bGwhPT1iLm1lbW9pemVkU3RhdGUpJiZcInVuc3RhYmxlLWRlZmVyLXdpdGhvdXQtaGlkaW5nXCIhPT1kLm1vZGUmJihiLmZsYWdzfD00KSxudWxsfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gTGkoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6RmYoYS50eXBlKSYmR2YoKTt2YXIgYj1hLmZsYWdzO3JldHVybiBiJjQwOTY/KGEuZmxhZ3M9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2I9YS5mbGFncztpZigwIT09KGImNjQpKXRocm93IEVycm9yKHkoMjg1KSk7YS5mbGFncz1iJi00MDk3fDY0O3JldHVybiBhO2Nhc2UgNTpyZXR1cm4gaGgoYSksbnVsbDtjYXNlIDEzOnJldHVybiBIKFApLGI9YS5mbGFncyxiJjQwOTY/KGEuZmxhZ3M9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEgoUCksbnVsbDtjYXNlIDQ6cmV0dXJuIGZoKCksbnVsbDtjYXNlIDEwOnJldHVybiByZyhhKSxudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gTWkoYSxiKXt0cnl7dmFyIGM9XCJcIixkPWI7ZG8gYys9UWEoZCksZD1kLnJldHVybjt3aGlsZShkKTt2YXIgZT1jfWNhdGNoKGYpe2U9XCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIitmLm1lc3NhZ2UrXCJcXG5cIitmLnN0YWNrfXJldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmV9fWZ1bmN0aW9uIE5pKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBPaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBQaShhLGIsYyl7Yz16ZygtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtRaXx8KFFpPSEwLFJpPWQpO05pKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gU2koYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe05pKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1UaT9UaT1uZXcgU2V0KFt0aGlzXSk6VGkuYWRkKHRoaXMpLE5pKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfXZhciBVaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtcbmZ1bmN0aW9uIFZpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe1dpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBYaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOnJldHVybjtjYXNlIDE6aWYoYi5mbGFncyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOmxnKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9cmV0dXJuO2Nhc2UgMzpiLmZsYWdzJjI1NiYmcWYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7cmV0dXJuO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fVxuZnVuY3Rpb24gWWkoYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOmI9Yy51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXthPWI9Yi5uZXh0O2Rve2lmKDM9PT0oYS50YWcmMykpe3ZhciBkPWEuY3JlYXRlO2EuZGVzdHJveT1kKCl9YT1hLm5leHR9d2hpbGUoYSE9PWIpfWI9Yy51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXthPWI9Yi5uZXh0O2Rve3ZhciBlPWE7ZD1lLm5leHQ7ZT1lLnRhZzswIT09KGUmNCkmJjAhPT0oZSYxKSYmKFppKGMsYSksJGkoYyxhKSk7YT1kfXdoaWxlKGEhPT1iKX1yZXR1cm47Y2FzZSAxOmE9Yy5zdGF0ZU5vZGU7Yy5mbGFncyY0JiYobnVsbD09PWI/YS5jb21wb25lbnREaWRNb3VudCgpOihkPWMuZWxlbWVudFR5cGU9PT1jLnR5cGU/Yi5tZW1vaXplZFByb3BzOmxnKGMudHlwZSxiLm1lbW9pemVkUHJvcHMpLGEuY29tcG9uZW50RGlkVXBkYXRlKGQsXG5iLm1lbW9pemVkU3RhdGUsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSkpKTtiPWMudXBkYXRlUXVldWU7bnVsbCE9PWImJkVnKGMsYixhKTtyZXR1cm47Y2FzZSAzOmI9Yy51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YT1udWxsO2lmKG51bGwhPT1jLmNoaWxkKXN3aXRjaChjLmNoaWxkLnRhZyl7Y2FzZSA1OmE9Yy5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmE9Yy5jaGlsZC5zdGF0ZU5vZGV9RWcoYyxiLGEpfXJldHVybjtjYXNlIDU6YT1jLnN0YXRlTm9kZTtudWxsPT09YiYmYy5mbGFncyY0JiZtZihjLnR5cGUsYy5tZW1vaXplZFByb3BzKSYmYS5mb2N1cygpO3JldHVybjtjYXNlIDY6cmV0dXJuO2Nhc2UgNDpyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsPT09Yy5tZW1vaXplZFN0YXRlJiYoYz1jLmFsdGVybmF0ZSxudWxsIT09YyYmKGM9Yy5tZW1vaXplZFN0YXRlLG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbCE9PWMmJkNjKGMpKSkpO1xucmV0dXJuO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6Y2FzZSAyMzpjYXNlIDI0OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIGFqKGEsYil7Zm9yKHZhciBjPWE7Oyl7aWYoNT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihiKWQ9ZC5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5zZXRQcm9wZXJ0eT9kLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmQuZGlzcGxheT1cIm5vbmVcIjtlbHNle2Q9Yy5zdGF0ZU5vZGU7dmFyIGU9Yy5tZW1vaXplZFByb3BzLnN0eWxlO2U9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsO2Quc3R5bGUuZGlzcGxheT1zYihcImRpc3BsYXlcIixlKX19ZWxzZSBpZig2PT09Yy50YWcpYy5zdGF0ZU5vZGUubm9kZVZhbHVlPWI/XCJcIjpjLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigoMjMhPT1jLnRhZyYmMjQhPT1jLnRhZ3x8bnVsbD09PWMubWVtb2l6ZWRTdGF0ZXx8Yz09PWEpJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PVxuYSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YSlyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIGJqKGEsYil7aWYoTWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBNZi5vbkNvbW1pdEZpYmVyVW5tb3VudCl0cnl7TWYub25Db21taXRGaWJlclVubW91bnQoTGYsYil9Y2F0Y2goZil7fXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6YT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hJiYoYT1hLmxhc3RFZmZlY3QsbnVsbCE9PWEpKXt2YXIgYz1hPWEubmV4dDtkb3t2YXIgZD1jLGU9ZC5kZXN0cm95O2Q9ZC50YWc7aWYodm9pZCAwIT09ZSlpZigwIT09KGQmNCkpWmkoYixjKTtlbHNle2Q9Yjt0cnl7ZSgpfWNhdGNoKGYpe1dpKGQsZil9fWM9Yy5uZXh0fXdoaWxlKGMhPT1hKX1icmVhaztjYXNlIDE6VmkoYik7YT1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7YS5wcm9wcz1iLm1lbW9pemVkUHJvcHMsYS5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsYS5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGYpe1dpKGIsXG5mKX1icmVhaztjYXNlIDU6VmkoYik7YnJlYWs7Y2FzZSA0OmNqKGEsYil9fWZ1bmN0aW9uIGRqKGEpe2EuYWx0ZXJuYXRlPW51bGw7YS5jaGlsZD1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5maXJzdEVmZmVjdD1udWxsO2EubGFzdEVmZmVjdD1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5yZXR1cm49bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGx9ZnVuY3Rpb24gZWooYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBmaihhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihlaihiKSlicmVhayBhO2I9Yi5yZXR1cm59dGhyb3cgRXJyb3IoeSgxNjApKTt9dmFyIGM9YjtiPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgxNjEpKTt9Yy5mbGFncyYxNiYmKHBiKGIsXCJcIiksYy5mbGFncyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGVqKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZmxhZ3MmMiljb250aW51ZSBiO2lmKG51bGw9PT1cbmMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmZsYWdzJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWQ/Z2ooYSxjLGIpOmhqKGEsYyxiKX1cbmZ1bmN0aW9uIGdqKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1qZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihnaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KWdqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIGhqKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoaGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOyloaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBjaihhLGIpe2Zvcih2YXIgYz1iLGQ9ITEsZSxmOzspe2lmKCFkKXtkPWMucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZCl0aHJvdyBFcnJvcih5KDE2MCkpO2U9ZC5zdGF0ZU5vZGU7c3dpdGNoKGQudGFnKXtjYXNlIDU6Zj0hMTticmVhayBhO2Nhc2UgMzplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGE7Y2FzZSA0OmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYX1kPWQucmV0dXJufWQ9ITB9aWYoNT09PWMudGFnfHw2PT09Yy50YWcpe2E6Zm9yKHZhciBnPWEsaD1jLGs9aDs7KWlmKGJqKGcsayksbnVsbCE9PWsuY2hpbGQmJjQhPT1rLnRhZylrLmNoaWxkLnJldHVybj1rLGs9ay5jaGlsZDtlbHNle2lmKGs9PT1oKWJyZWFrIGE7Zm9yKDtudWxsPT09ay5zaWJsaW5nOyl7aWYobnVsbD09PWsucmV0dXJufHxrLnJldHVybj09PWgpYnJlYWsgYTtrPWsucmV0dXJufWsuc2libGluZy5yZXR1cm49ay5yZXR1cm47az1rLnNpYmxpbmd9Zj8oZz1lLGg9Yy5zdGF0ZU5vZGUsXG44PT09Zy5ub2RlVHlwZT9nLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaCk6Zy5yZW1vdmVDaGlsZChoKSk6ZS5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09Yy50YWcpe2lmKG51bGwhPT1jLmNoaWxkKXtlPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zj0hMDtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihiaihhLGMpLG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybjs0PT09Yy50YWcmJihkPSExKX1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIGlqKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjp2YXIgYz1iLnVwZGF0ZVF1ZXVlO2M9bnVsbCE9PWM/Yy5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWMpe3ZhciBkPWM9Yy5uZXh0O2RvIDM9PT0oZC50YWcmMykmJihhPWQuZGVzdHJveSxkLmRlc3Ryb3k9dm9pZCAwLHZvaWQgMCE9PWEmJmEoKSksZD1kLm5leHQ7d2hpbGUoZCE9PWMpfXJldHVybjtjYXNlIDE6cmV0dXJuO2Nhc2UgNTpjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe2Q9Yi5tZW1vaXplZFByb3BzO3ZhciBlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW3hmXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiYkYShjLGQpO3diKGEsZSk7Yj13YihhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz1cbjIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz90YihjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/b2IoYyxoKTpcImNoaWxkcmVuXCI9PT1nP3BiKGMsaCk6cWEoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOmFiKGMsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YT1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxmPWQudmFsdWUsbnVsbCE9Zj9mYihjLCEhZC5tdWx0aXBsZSxmLCExKTphIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/ZmIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOmZiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9XG5iLm1lbW9pemVkUHJvcHM7cmV0dXJuO2Nhc2UgMzpjPWIuc3RhdGVOb2RlO2MuaHlkcmF0ZSYmKGMuaHlkcmF0ZT0hMSxDYyhjLmNvbnRhaW5lckluZm8pKTtyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsIT09Yi5tZW1vaXplZFN0YXRlJiYoamo9TygpLGFqKGIuY2hpbGQsITApKTtraihiKTtyZXR1cm47Y2FzZSAxOTpraihiKTtyZXR1cm47Y2FzZSAxNzpyZXR1cm47Y2FzZSAyMzpjYXNlIDI0OmFqKGIsbnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSk7cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fWZ1bmN0aW9uIGtqKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IFVpKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9bGouYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBtaihhLGIpe3JldHVybiBudWxsIT09YSYmKGE9YS5tZW1vaXplZFN0YXRlLG51bGw9PT1hfHxudWxsIT09YS5kZWh5ZHJhdGVkKT8oYj1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWImJm51bGw9PT1iLmRlaHlkcmF0ZWQpOiExfXZhciBuaj1NYXRoLmNlaWwsb2o9cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixwaj1yYS5SZWFjdEN1cnJlbnRPd25lcixYPTAsVT1udWxsLFk9bnVsbCxXPTAscWo9MCxyaj1CZigwKSxWPTAsc2o9bnVsbCx0aj0wLERnPTAsSGk9MCx1aj0wLHZqPW51bGwsamo9MCxKaT1JbmZpbml0eTtmdW5jdGlvbiB3aigpe0ppPU8oKSs1MDB9dmFyIFo9bnVsbCxRaT0hMSxSaT1udWxsLFRpPW51bGwseGo9ITEseWo9bnVsbCx6aj05MCxBaj1bXSxCaj1bXSxDaj1udWxsLERqPTAsRWo9bnVsbCxGaj0tMSxHaj0wLEhqPTAsSWo9bnVsbCxKaj0hMTtmdW5jdGlvbiBIZygpe3JldHVybiAwIT09KFgmNDgpP08oKTotMSE9PUZqP0ZqOkZqPU8oKX1cbmZ1bmN0aW9uIElnKGEpe2E9YS5tb2RlO2lmKDA9PT0oYSYyKSlyZXR1cm4gMTtpZigwPT09KGEmNCkpcmV0dXJuIDk5PT09ZWcoKT8xOjI7MD09PUdqJiYoR2o9dGopO2lmKDAhPT1rZy50cmFuc2l0aW9uKXswIT09SGomJihIaj1udWxsIT09dmo/dmoucGVuZGluZ0xhbmVzOjApO2E9R2o7dmFyIGI9NDE4NjExMiZ+SGo7YiY9LWI7MD09PWImJihhPTQxODYxMTImfmEsYj1hJi1hLDA9PT1iJiYoYj04MTkyKSk7cmV0dXJuIGJ9YT1lZygpOzAhPT0oWCY0KSYmOTg9PT1hP2E9WGMoMTIsR2opOihhPVNjKGEpLGE9WGMoYSxHaikpO3JldHVybiBhfVxuZnVuY3Rpb24gSmcoYSxiLGMpe2lmKDUwPERqKXRocm93IERqPTAsRWo9bnVsbCxFcnJvcih5KDE4NSkpO2E9S2ooYSxiKTtpZihudWxsPT09YSlyZXR1cm4gbnVsbDskYyhhLGIsYyk7YT09PVUmJihIaXw9Yiw0PT09ViYmSWkoYSxXKSk7dmFyIGQ9ZWcoKTsxPT09Yj8wIT09KFgmOCkmJjA9PT0oWCY0OCk/TGooYSk6KE1qKGEsYyksMD09PVgmJih3aigpLGlnKCkpKTooMD09PShYJjQpfHw5OCE9PWQmJjk5IT09ZHx8KG51bGw9PT1Daj9Daj1uZXcgU2V0KFthXSk6Q2ouYWRkKGEpKSxNaihhLGMpKTt2aj1hfWZ1bmN0aW9uIEtqKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH1cbmZ1bmN0aW9uIE1qKGEsYil7Zm9yKHZhciBjPWEuY2FsbGJhY2tOb2RlLGQ9YS5zdXNwZW5kZWRMYW5lcyxlPWEucGluZ2VkTGFuZXMsZj1hLmV4cGlyYXRpb25UaW1lcyxnPWEucGVuZGluZ0xhbmVzOzA8Zzspe3ZhciBoPTMxLVZjKGcpLGs9MTw8aCxsPWZbaF07aWYoLTE9PT1sKXtpZigwPT09KGsmZCl8fDAhPT0oayZlKSl7bD1iO1JjKGspO3ZhciBuPUY7ZltoXT0xMDw9bj9sKzI1MDo2PD1uP2wrNUUzOi0xfX1lbHNlIGw8PWImJihhLmV4cGlyZWRMYW5lc3w9ayk7ZyY9fmt9ZD1VYyhhLGE9PT1VP1c6MCk7Yj1GO2lmKDA9PT1kKW51bGwhPT1jJiYoYyE9PVpmJiZQZihjKSxhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tQcmlvcml0eT0wKTtlbHNle2lmKG51bGwhPT1jKXtpZihhLmNhbGxiYWNrUHJpb3JpdHk9PT1iKXJldHVybjtjIT09WmYmJlBmKGMpfTE1PT09Yj8oYz1Mai5iaW5kKG51bGwsYSksbnVsbD09PWFnPyhhZz1bY10sYmc9T2YoVWYsamcpKTphZy5wdXNoKGMpLFxuYz1aZik6MTQ9PT1iP2M9aGcoOTksTGouYmluZChudWxsLGEpKTooYz1UYyhiKSxjPWhnKGMsTmouYmluZChudWxsLGEpKSk7YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBOaihhKXtGaj0tMTtIaj1Haj0wO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTt2YXIgYj1hLmNhbGxiYWNrTm9kZTtpZihPaigpJiZhLmNhbGxiYWNrTm9kZSE9PWIpcmV0dXJuIG51bGw7dmFyIGM9VWMoYSxhPT09VT9XOjApO2lmKDA9PT1jKXJldHVybiBudWxsO3ZhciBkPWM7dmFyIGU9WDtYfD0xNjt2YXIgZj1QaigpO2lmKFUhPT1hfHxXIT09ZCl3aigpLFFqKGEsZCk7ZG8gdHJ5e1JqKCk7YnJlYWt9Y2F0Y2goaCl7U2ooYSxoKX13aGlsZSgxKTtxZygpO29qLmN1cnJlbnQ9ZjtYPWU7bnVsbCE9PVk/ZD0wOihVPW51bGwsVz0wLGQ9Vik7aWYoMCE9PSh0aiZIaSkpUWooYSwwKTtlbHNlIGlmKDAhPT1kKXsyPT09ZCYmKFh8PTY0LGEuaHlkcmF0ZSYmKGEuaHlkcmF0ZT0hMSxxZihhLmNvbnRhaW5lckluZm8pKSxjPVdjKGEpLDAhPT1jJiYoZD1UaihhLGMpKSk7aWYoMT09PWQpdGhyb3cgYj1zaixRaihhLDApLElpKGEsYyksTWooYSxPKCkpLGI7YS5maW5pc2hlZFdvcms9XG5hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1jO3N3aXRjaChkKXtjYXNlIDA6Y2FzZSAxOnRocm93IEVycm9yKHkoMzQ1KSk7Y2FzZSAyOlVqKGEpO2JyZWFrO2Nhc2UgMzpJaShhLGMpO2lmKChjJjYyOTE0NTYwKT09PWMmJihkPWpqKzUwMC1PKCksMTA8ZCkpe2lmKDAhPT1VYyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZjKSE9PWMpe0hnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZlO2JyZWFrfWEudGltZW91dEhhbmRsZT1vZihVai5iaW5kKG51bGwsYSksZCk7YnJlYWt9VWooYSk7YnJlYWs7Y2FzZSA0OklpKGEsYyk7aWYoKGMmNDE4NjExMik9PT1jKWJyZWFrO2Q9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8Yzspe3ZhciBnPTMxLVZjKGMpO2Y9MTw8ZztnPWRbZ107Zz5lJiYoZT1nKTtjJj1+Zn1jPWU7Yz1PKCktYztjPSgxMjA+Yz8xMjA6NDgwPmM/NDgwOjEwODA+Yz8xMDgwOjE5MjA+Yz8xOTIwOjNFMz5jPzNFMzo0MzIwPlxuYz80MzIwOjE5NjAqbmooYy8xOTYwKSktYztpZigxMDxjKXthLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGMpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNTpVaihhKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMzI5KSk7fX1NaihhLE8oKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yj9Oai5iaW5kKG51bGwsYSk6bnVsbH1mdW5jdGlvbiBJaShhLGIpe2ImPX51ajtiJj1+SGk7YS5zdXNwZW5kZWRMYW5lc3w9YjthLnBpbmdlZExhbmVzJj1+Yjtmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGI7KXt2YXIgYz0zMS1WYyhiKSxkPTE8PGM7YVtjXT0tMTtiJj1+ZH19XG5mdW5jdGlvbiBMaihhKXtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7T2ooKTtpZihhPT09VSYmMCE9PShhLmV4cGlyZWRMYW5lcyZXKSl7dmFyIGI9Vzt2YXIgYz1UaihhLGIpOzAhPT0odGomSGkpJiYoYj1VYyhhLGIpLGM9VGooYSxiKSl9ZWxzZSBiPVVjKGEsMCksYz1UaihhLGIpOzAhPT1hLnRhZyYmMj09PWMmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYj1XYyhhKSwwIT09YiYmKGM9VGooYSxiKSkpO2lmKDE9PT1jKXRocm93IGM9c2osUWooYSwwKSxJaShhLGIpLE1qKGEsTygpKSxjO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7VWooYSk7TWooYSxPKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gVmooKXtpZihudWxsIT09Q2ope3ZhciBhPUNqO0NqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2EuZXhwaXJlZExhbmVzfD0yNCZhLnBlbmRpbmdMYW5lcztNaihhLE8oKSl9KX1pZygpfWZ1bmN0aW9uIFdqKGEsYil7dmFyIGM9WDtYfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fWZ1bmN0aW9uIFhqKGEsYil7dmFyIGM9WDtYJj0tMjtYfD04O3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fWZ1bmN0aW9uIG5pKGEsYil7SShyaixxaik7cWp8PWI7dGp8PWJ9ZnVuY3Rpb24gS2koKXtxaj1yai5jdXJyZW50O0gocmopfVxuZnVuY3Rpb24gUWooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEscGYoYykpO2lmKG51bGwhPT1ZKWZvcihjPVkucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmR2YoKTticmVhaztjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTticmVhaztjYXNlIDU6aGgoZCk7YnJlYWs7Y2FzZSA0OmZoKCk7YnJlYWs7Y2FzZSAxMzpIKFApO2JyZWFrO2Nhc2UgMTk6SChQKTticmVhaztjYXNlIDEwOnJnKGQpO2JyZWFrO2Nhc2UgMjM6Y2FzZSAyNDpLaSgpfWM9Yy5yZXR1cm59VT1hO1k9VGcoYS5jdXJyZW50LG51bGwpO1c9cWo9dGo9YjtWPTA7c2o9bnVsbDt1aj1IaT1EZz0wfVxuZnVuY3Rpb24gU2ooYSxiKXtkb3t2YXIgYz1ZO3RyeXtxZygpO3ZoLmN1cnJlbnQ9R2g7aWYoeWgpe2Zvcih2YXIgZD1SLm1lbW9pemVkU3RhdGU7bnVsbCE9PWQ7KXt2YXIgZT1kLnF1ZXVlO251bGwhPT1lJiYoZS5wZW5kaW5nPW51bGwpO2Q9ZC5uZXh0fXloPSExfXhoPTA7VD1TPVI9bnVsbDt6aD0hMTtwai5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7Vj0xO3NqPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9VztoLmZsYWdzfD0yMDQ4O2guZmlyc3RFZmZlY3Q9aC5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9aztpZigwPT09KGgubW9kZSYyKSl7dmFyIG49aC5hbHRlcm5hdGU7bj8oaC51cGRhdGVRdWV1ZT1uLnVwZGF0ZVF1ZXVlLGgubWVtb2l6ZWRTdGF0ZT1uLm1lbW9pemVkU3RhdGUsaC5sYW5lcz1uLmxhbmVzKTpcbihoLnVwZGF0ZVF1ZXVlPW51bGwsaC5tZW1vaXplZFN0YXRlPW51bGwpfXZhciBBPTAhPT0oUC5jdXJyZW50JjEpLHA9Zztkb3t2YXIgQztpZihDPTEzPT09cC50YWcpe3ZhciB4PXAubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09eClDPW51bGwhPT14LmRlaHlkcmF0ZWQ/ITA6ITE7ZWxzZXt2YXIgdz1wLm1lbW9pemVkUHJvcHM7Qz12b2lkIDA9PT13LmZhbGxiYWNrPyExOiEwIT09dy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDpBPyExOiEwfX1pZihDKXt2YXIgej1wLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT16KXt2YXIgdT1uZXcgU2V0O3UuYWRkKGwpO3AudXBkYXRlUXVldWU9dX1lbHNlIHouYWRkKGwpO2lmKDA9PT0ocC5tb2RlJjIpKXtwLmZsYWdzfD02NDtoLmZsYWdzfD0xNjM4NDtoLmZsYWdzJj0tMjk4MTtpZigxPT09aC50YWcpaWYobnVsbD09PWguYWx0ZXJuYXRlKWgudGFnPTE3O2Vsc2V7dmFyIHQ9emcoLTEsMSk7dC50YWc9MjtBZyhoLHQpfWgubGFuZXN8PTE7YnJlYWsgYX1rPVxudm9pZCAwO2g9Yjt2YXIgcT1mLnBpbmdDYWNoZTtudWxsPT09cT8ocT1mLnBpbmdDYWNoZT1uZXcgT2ksaz1uZXcgU2V0LHEuc2V0KGwsaykpOihrPXEuZ2V0KGwpLHZvaWQgMD09PWsmJihrPW5ldyBTZXQscS5zZXQobCxrKSkpO2lmKCFrLmhhcyhoKSl7ay5hZGQoaCk7dmFyIHY9WWouYmluZChudWxsLGYsbCxoKTtsLnRoZW4odix2KX1wLmZsYWdzfD00MDk2O3AubGFuZXM9YjticmVhayBhfXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApO2s9RXJyb3IoKFJhKGgudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIil9NSE9PVYmJihWPTIpO2s9TWkoayxoKTtwPVxuZztkb3tzd2l0Y2gocC50YWcpe2Nhc2UgMzpmPWs7cC5mbGFnc3w9NDA5NjtiJj0tYjtwLmxhbmVzfD1iO3ZhciBKPVBpKHAsZixiKTtCZyhwLEopO2JyZWFrIGE7Y2FzZSAxOmY9azt2YXIgSz1wLnR5cGUsUT1wLnN0YXRlTm9kZTtpZigwPT09KHAuZmxhZ3MmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEsuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09USYmXCJmdW5jdGlvblwiPT09dHlwZW9mIFEuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoUSkpKSl7cC5mbGFnc3w9NDA5NjtiJj0tYjtwLmxhbmVzfD1iO3ZhciBMPVNpKHAsZixiKTtCZyhwLEwpO2JyZWFrIGF9fXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApfVpqKGMpfWNhdGNoKHZhKXtiPXZhO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9XG5mdW5jdGlvbiBQaigpe3ZhciBhPW9qLmN1cnJlbnQ7b2ouY3VycmVudD1HaDtyZXR1cm4gbnVsbD09PWE/R2g6YX1mdW5jdGlvbiBUaihhLGIpe3ZhciBjPVg7WHw9MTY7dmFyIGQ9UGooKTtVPT09YSYmVz09PWJ8fFFqKGEsYik7ZG8gdHJ5e2FrKCk7YnJlYWt9Y2F0Y2goZSl7U2ooYSxlKX13aGlsZSgxKTtxZygpO1g9Yztvai5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IoeSgyNjEpKTtVPW51bGw7Vz0wO3JldHVybiBWfWZ1bmN0aW9uIGFrKCl7Zm9yKDtudWxsIT09WTspYmsoWSl9ZnVuY3Rpb24gUmooKXtmb3IoO251bGwhPT1ZJiYhUWYoKTspYmsoWSl9ZnVuY3Rpb24gYmsoYSl7dmFyIGI9Y2soYS5hbHRlcm5hdGUsYSxxaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1pqKGEpOlk9Yjtwai5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBaaihhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjIwNDgpKXtjPUdpKGMsYixxaik7aWYobnVsbCE9PWMpe1k9YztyZXR1cm59Yz1iO2lmKDI0IT09Yy50YWcmJjIzIT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fDAhPT0ocWomMTA3Mzc0MTgyNCl8fDA9PT0oYy5tb2RlJjQpKXtmb3IodmFyIGQ9MCxlPWMuY2hpbGQ7bnVsbCE9PWU7KWR8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGU9ZS5zaWJsaW5nO2MuY2hpbGRMYW5lcz1kfW51bGwhPT1hJiYwPT09KGEuZmxhZ3MmMjA0OCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9Yi5maXJzdEVmZmVjdCksbnVsbCE9PWIubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0KSwxPGIuZmxhZ3MmJihudWxsIT09XG5hLmxhc3RFZmZlY3Q/YS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YjphLmZpcnN0RWZmZWN0PWIsYS5sYXN0RWZmZWN0PWIpKX1lbHNle2M9TGkoYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTIwNDc7WT1jO3JldHVybn1udWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5mbGFnc3w9MjA0OCl9Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1WJiYoVj01KX1mdW5jdGlvbiBVaihhKXt2YXIgYj1lZygpO2dnKDk5LGRrLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGRrKGEsYil7ZG8gT2ooKTt3aGlsZShudWxsIT09eWopO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTt2YXIgYz1hLmZpbmlzaGVkV29yaztpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IoeSgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO3ZhciBkPWMubGFuZXN8Yy5jaGlsZExhbmVzLGU9ZCxmPWEucGVuZGluZ0xhbmVzJn5lO2EucGVuZGluZ0xhbmVzPWU7YS5zdXNwZW5kZWRMYW5lcz0wO2EucGluZ2VkTGFuZXM9MDthLmV4cGlyZWRMYW5lcyY9ZTthLm11dGFibGVSZWFkTGFuZXMmPWU7YS5lbnRhbmdsZWRMYW5lcyY9ZTtlPWEuZW50YW5nbGVtZW50cztmb3IodmFyIGc9YS5ldmVudFRpbWVzLGg9YS5leHBpcmF0aW9uVGltZXM7MDxmOyl7dmFyIGs9MzEtVmMoZiksbD0xPDxrO2Vba109MDtnW2tdPS0xO2hba109LTE7ZiY9fmx9bnVsbCE9PVxuQ2omJjA9PT0oZCYyNCkmJkNqLmhhcyhhKSYmQ2ouZGVsZXRlKGEpO2E9PT1VJiYoWT1VPW51bGwsVz0wKTsxPGMuZmxhZ3M/bnVsbCE9PWMubGFzdEVmZmVjdD8oYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxkPWMuZmlyc3RFZmZlY3QpOmQ9YzpkPWMuZmlyc3RFZmZlY3Q7aWYobnVsbCE9PWQpe2U9WDtYfD0zMjtwai5jdXJyZW50PW51bGw7a2Y9ZmQ7Zz1OZSgpO2lmKE9lKGcpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBnKWg9e3N0YXJ0Omcuc2VsZWN0aW9uU3RhcnQsZW5kOmcuc2VsZWN0aW9uRW5kfTtlbHNlIGE6aWYoaD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3csKGw9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCkpJiYwIT09bC5yYW5nZUNvdW50KXtoPWwuYW5jaG9yTm9kZTtmPWwuYW5jaG9yT2Zmc2V0O2s9bC5mb2N1c05vZGU7bD1sLmZvY3VzT2Zmc2V0O3RyeXtoLm5vZGVUeXBlLGsubm9kZVR5cGV9Y2F0Y2godmEpe2g9bnVsbDtcbmJyZWFrIGF9dmFyIG49MCxBPS0xLHA9LTEsQz0wLHg9MCx3PWcsej1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHU7Oyl7dyE9PWh8fDAhPT1mJiYzIT09dy5ub2RlVHlwZXx8KEE9bitmKTt3IT09a3x8MCE9PWwmJjMhPT13Lm5vZGVUeXBlfHwocD1uK2wpOzM9PT13Lm5vZGVUeXBlJiYobis9dy5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHU9dy5maXJzdENoaWxkKSlicmVhazt6PXc7dz11fWZvcig7Oyl7aWYodz09PWcpYnJlYWsgYjt6PT09aCYmKytDPT09ZiYmKEE9bik7ej09PWsmJisreD09PWwmJihwPW4pO2lmKG51bGwhPT0odT13Lm5leHRTaWJsaW5nKSlicmVhazt3PXo7ej13LnBhcmVudE5vZGV9dz11fWg9LTE9PT1BfHwtMT09PXA/bnVsbDp7c3RhcnQ6QSxlbmQ6cH19ZWxzZSBoPW51bGw7aD1ofHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBoPW51bGw7bGY9e2ZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07ZmQ9ITE7SWo9bnVsbDtKaj0hMTtaPWQ7ZG8gdHJ5e2VrKCl9Y2F0Y2godmEpe2lmKG51bGw9PT1cblopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7SWo9bnVsbDtaPWQ7ZG8gdHJ5e2ZvcihnPWE7bnVsbCE9PVo7KXt2YXIgdD1aLmZsYWdzO3QmMTYmJnBiKFouc3RhdGVOb2RlLFwiXCIpO2lmKHQmMTI4KXt2YXIgcT1aLmFsdGVybmF0ZTtpZihudWxsIT09cSl7dmFyIHY9cS5yZWY7bnVsbCE9PXYmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdj92KG51bGwpOnYuY3VycmVudD1udWxsKX19c3dpdGNoKHQmMTAzOCl7Y2FzZSAyOmZqKFopO1ouZmxhZ3MmPS0zO2JyZWFrO2Nhc2UgNjpmaihaKTtaLmZsYWdzJj0tMztpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDEwMjQ6Wi5mbGFncyY9LTEwMjU7YnJlYWs7Y2FzZSAxMDI4OlouZmxhZ3MmPS0xMDI1O2lqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgNDppaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDg6aD1aO2NqKGcsaCk7dmFyIEo9aC5hbHRlcm5hdGU7ZGooaCk7bnVsbCE9PVxuSiYmZGooSil9Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTt2PWxmO3E9TmUoKTt0PXYuZm9jdXNlZEVsZW07Zz12LnNlbGVjdGlvblJhbmdlO2lmKHEhPT10JiZ0JiZ0Lm93bmVyRG9jdW1lbnQmJk1lKHQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsdCkpe251bGwhPT1nJiZPZSh0KSYmKHE9Zy5zdGFydCx2PWcuZW5kLHZvaWQgMD09PXYmJih2PXEpLFwic2VsZWN0aW9uU3RhcnRcImluIHQ/KHQuc2VsZWN0aW9uU3RhcnQ9cSx0LnNlbGVjdGlvbkVuZD1NYXRoLm1pbih2LHQudmFsdWUubGVuZ3RoKSk6KHY9KHE9dC5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJnEuZGVmYXVsdFZpZXd8fHdpbmRvdyx2LmdldFNlbGVjdGlvbiYmKHY9di5nZXRTZWxlY3Rpb24oKSxoPXQudGV4dENvbnRlbnQubGVuZ3RoLEo9TWF0aC5taW4oZy5zdGFydCxoKSxnPXZvaWQgMD09PVxuZy5lbmQ/SjpNYXRoLm1pbihnLmVuZCxoKSwhdi5leHRlbmQmJko+ZyYmKGg9ZyxnPUosSj1oKSxoPUxlKHQsSiksZj1MZSh0LGcpLGgmJmYmJigxIT09di5yYW5nZUNvdW50fHx2LmFuY2hvck5vZGUhPT1oLm5vZGV8fHYuYW5jaG9yT2Zmc2V0IT09aC5vZmZzZXR8fHYuZm9jdXNOb2RlIT09Zi5ub2RlfHx2LmZvY3VzT2Zmc2V0IT09Zi5vZmZzZXQpJiYocT1xLmNyZWF0ZVJhbmdlKCkscS5zZXRTdGFydChoLm5vZGUsaC5vZmZzZXQpLHYucmVtb3ZlQWxsUmFuZ2VzKCksSj5nPyh2LmFkZFJhbmdlKHEpLHYuZXh0ZW5kKGYubm9kZSxmLm9mZnNldCkpOihxLnNldEVuZChmLm5vZGUsZi5vZmZzZXQpLHYuYWRkUmFuZ2UocSkpKSkpKTtxPVtdO2Zvcih2PXQ7dj12LnBhcmVudE5vZGU7KTE9PT12Lm5vZGVUeXBlJiZxLnB1c2goe2VsZW1lbnQ6dixsZWZ0OnYuc2Nyb2xsTGVmdCx0b3A6di5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgdC5mb2N1cyYmdC5mb2N1cygpO2Zvcih0PVxuMDt0PHEubGVuZ3RoO3QrKyl2PXFbdF0sdi5lbGVtZW50LnNjcm9sbExlZnQ9di5sZWZ0LHYuZWxlbWVudC5zY3JvbGxUb3A9di50b3B9ZmQ9ISFrZjtsZj1rZj1udWxsO2EuY3VycmVudD1jO1o9ZDtkbyB0cnl7Zm9yKHQ9YTtudWxsIT09Wjspe3ZhciBLPVouZmxhZ3M7SyYzNiYmWWkodCxaLmFsdGVybmF0ZSxaKTtpZihLJjEyOCl7cT12b2lkIDA7dmFyIFE9Wi5yZWY7aWYobnVsbCE9PVEpe3ZhciBMPVouc3RhdGVOb2RlO3N3aXRjaChaLnRhZyl7Y2FzZSA1OnE9TDticmVhaztkZWZhdWx0OnE9TH1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUT9RKHEpOlEuY3VycmVudD1xfX1aPVoubmV4dEVmZmVjdH19Y2F0Y2godmEpe2lmKG51bGw9PT1aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO1o9bnVsbDskZigpO1g9ZX1lbHNlIGEuY3VycmVudD1jO2lmKHhqKXhqPSExLHlqPWEsemo9YjtlbHNlIGZvcihaPWQ7bnVsbCE9PVo7KWI9XG5aLm5leHRFZmZlY3QsWi5uZXh0RWZmZWN0PW51bGwsWi5mbGFncyY4JiYoSz1aLEsuc2libGluZz1udWxsLEsuc3RhdGVOb2RlPW51bGwpLFo9YjtkPWEucGVuZGluZ0xhbmVzOzA9PT1kJiYoVGk9bnVsbCk7MT09PWQ/YT09PUVqP0RqKys6KERqPTAsRWo9YSk6RGo9MDtjPWMuc3RhdGVOb2RlO2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclJvb3QpdHJ5e01mLm9uQ29tbWl0RmliZXJSb290KExmLGMsdm9pZCAwLDY0PT09KGMuY3VycmVudC5mbGFncyY2NCkpfWNhdGNoKHZhKXt9TWooYSxPKCkpO2lmKFFpKXRocm93IFFpPSExLGE9UmksUmk9bnVsbCxhO2lmKDAhPT0oWCY4KSlyZXR1cm4gbnVsbDtpZygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gZWsoKXtmb3IoO251bGwhPT1aOyl7dmFyIGE9Wi5hbHRlcm5hdGU7Smp8fG51bGw9PT1Janx8KDAhPT0oWi5mbGFncyY4KT9kYyhaLElqKSYmKEpqPSEwKToxMz09PVoudGFnJiZtaihhLFopJiZkYyhaLElqKSYmKEpqPSEwKSk7dmFyIGI9Wi5mbGFnczswIT09KGImMjU2KSYmWGkoYSxaKTswPT09KGImNTEyKXx8eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSk7Wj1aLm5leHRFZmZlY3R9fWZ1bmN0aW9uIE9qKCl7aWYoOTAhPT16ail7dmFyIGE9OTc8emo/OTc6emo7emo9OTA7cmV0dXJuIGdnKGEsZmspfXJldHVybiExfWZ1bmN0aW9uICRpKGEsYil7QWoucHVzaChiLGEpO3hqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpfWZ1bmN0aW9uIFppKGEsYil7QmoucHVzaChiLGEpO3hqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpfVxuZnVuY3Rpb24gZmsoKXtpZihudWxsPT09eWopcmV0dXJuITE7dmFyIGE9eWo7eWo9bnVsbDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzMxKSk7dmFyIGI9WDtYfD0zMjt2YXIgYz1CajtCaj1bXTtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrPTIpe3ZhciBlPWNbZF0sZj1jW2QrMV0sZz1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyl0cnl7ZygpfWNhdGNoKGspe2lmKG51bGw9PT1mKXRocm93IEVycm9yKHkoMzMwKSk7V2koZixrKX19Yz1BajtBaj1bXTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCs9Mil7ZT1jW2RdO2Y9Y1tkKzFdO3RyeXt2YXIgaD1lLmNyZWF0ZTtlLmRlc3Ryb3k9aCgpfWNhdGNoKGspe2lmKG51bGw9PT1mKXRocm93IEVycm9yKHkoMzMwKSk7V2koZixrKX19Zm9yKGg9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1oOylhPWgubmV4dEVmZmVjdCxoLm5leHRFZmZlY3Q9bnVsbCxoLmZsYWdzJjgmJihoLnNpYmxpbmc9XG5udWxsLGguc3RhdGVOb2RlPW51bGwpLGg9YTtYPWI7aWcoKTtyZXR1cm4hMH1mdW5jdGlvbiBnayhhLGIsYyl7Yj1NaShjLGIpO2I9UGkoYSxiLDEpO0FnKGEsYik7Yj1IZygpO2E9S2ooYSwxKTtudWxsIT09YSYmKCRjKGEsMSxiKSxNaihhLGIpKX1cbmZ1bmN0aW9uIFdpKGEsYil7aWYoMz09PWEudGFnKWdrKGEsYSxiKTtlbHNlIGZvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKDM9PT1jLnRhZyl7Z2soYyxhLGIpO2JyZWFrfWVsc2UgaWYoMT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoZCkpKXthPU1pKGIsYSk7dmFyIGU9U2koYyxhLDEpO0FnKGMsZSk7ZT1IZygpO2M9S2ooYywxKTtpZihudWxsIT09YykkYyhjLDEsZSksTWooYyxlKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl0cnl7ZC5jb21wb25lbnREaWRDYXRjaChiLGEpfWNhdGNoKGYpe31icmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBZaihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9SGcoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7VT09PWEmJihXJmMpPT09YyYmKDQ9PT1WfHwzPT09ViYmKFcmNjI5MTQ1NjApPT09VyYmNTAwPk8oKS1qaj9RaihhLDApOnVqfD1jKTtNaihhLGIpfWZ1bmN0aW9uIGxqKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9MDswPT09YiYmKGI9YS5tb2RlLDA9PT0oYiYyKT9iPTE6MD09PShiJjQpP2I9OTk9PT1lZygpPzE6MjooMD09PUdqJiYoR2o9dGopLGI9WWMoNjI5MTQ1NjAmfkdqKSwwPT09YiYmKGI9NDE5NDMwNCkpKTtjPUhnKCk7YT1LaihhLGIpO251bGwhPT1hJiYoJGMoYSxiLGMpLE1qKGEsYykpfXZhciBjaztcbmNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLmxhbmVzO2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxOLmN1cnJlbnQpdWc9ITA7ZWxzZSBpZigwIT09KGMmZCkpdWc9MCE9PShhLmZsYWdzJjE2Mzg0KT8hMDohMTtlbHNle3VnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOnJpKGIpO3NoKCk7YnJlYWs7Y2FzZSA1OmdoKGIpO2JyZWFrO2Nhc2UgMTpGZihiLnR5cGUpJiZKZihiKTticmVhaztjYXNlIDQ6ZWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOmQ9Yi5tZW1vaXplZFByb3BzLnZhbHVlO3ZhciBlPWIudHlwZS5fY29udGV4dDtJKG1nLGUuX2N1cnJlbnRWYWx1ZSk7ZS5fY3VycmVudFZhbHVlPWQ7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtpZigwIT09KGMmYi5jaGlsZC5jaGlsZExhbmVzKSlyZXR1cm4gdGkoYSxiLGMpO0koUCxQLmN1cnJlbnQmMSk7Yj1oaShhLGIsYyk7cmV0dXJuIG51bGwhPT1cbmI/Yi5zaWJsaW5nOm51bGx9SShQLFAuY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJmIuY2hpbGRMYW5lcyk7aWYoMCE9PShhLmZsYWdzJjY0KSl7aWYoZClyZXR1cm4gQWkoYSxiLGMpO2IuZmxhZ3N8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7SShQLFAuY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gYi5sYW5lcz0wLG1pKGEsYixjKX1yZXR1cm4gaGkoYSxiLGMpfWVsc2UgdWc9ITE7Yi5sYW5lcz0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1FZihiLE0uY3VycmVudCk7dGcoYixjKTtlPUNoKG51bGwsYixkLGEsZSxjKTtiLmZsYWdzfD0xO2lmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtpZihGZihkKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7eGcoYik7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJkdnKGIsZCxnLGEpO2UudXBkYXRlcj1LZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxzPWI7T2coYixkLGEsYyk7Yj1xaShudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxmaShudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7YTp7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7XG5hPWIucGVuZGluZ1Byb3BzO2Y9ZS5faW5pdDtlPWYoZS5fcGF5bG9hZCk7Yi50eXBlPWU7Zj1iLnRhZz1oayhlKTthPWxnKGUsYSk7c3dpdGNoKGYpe2Nhc2UgMDpiPWxpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1waShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPWdpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9aWkobnVsbCxiLGUsbGcoZS50eXBlLGEpLGQsYyk7YnJlYWsgYX10aHJvdyBFcnJvcih5KDMwNixlLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLGxpKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLHBpKGEsYixkLGUsYyk7Y2FzZSAzOnJpKGIpO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09YXx8bnVsbD09PWQpdGhyb3cgRXJyb3IoeSgyODIpKTtcbmQ9Yi5wZW5kaW5nUHJvcHM7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDt5ZyhhLGIpO0NnKGIsZCxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpc2goKSxiPWhpKGEsYixjKTtlbHNle2U9Yi5zdGF0ZU5vZGU7aWYoZj1lLmh5ZHJhdGUpa2g9cmYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxqaD1iLGY9bGg9ITA7aWYoZil7YT1lLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE7aWYobnVsbCE9YSlmb3IoZT0wO2U8YS5sZW5ndGg7ZSs9MilmPWFbZV0sZi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1hW2UrMV0sdGgucHVzaChmKTtjPVpnKGIsbnVsbCxkLGMpO2ZvcihiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDEwMjQsYz1jLnNpYmxpbmd9ZWxzZSBmaShhLGIsZCxjKSxzaCgpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIGdoKGIpLG51bGw9PT1hJiZcbnBoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sbmYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJm5mKGQsZikmJihiLmZsYWdzfD0xNiksb2koYSxiKSxmaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJnBoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gdGkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gZWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9WWcoYixudWxsLGQsYyk6ZmkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLGdpKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbmMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTt2YXIgaD1iLnR5cGUuX2NvbnRleHQ7SShtZyxoLl9jdXJyZW50VmFsdWUpO2guX2N1cnJlbnRWYWx1ZT1mO2lmKG51bGwhPT1nKWlmKGg9Zy52YWx1ZSxmPUhlKGgsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MCwwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFOLmN1cnJlbnQpe2I9aGkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGg9Yi5jaGlsZCxudWxsIT09aCYmKGgucmV0dXJuPWIpO251bGwhPT1oOyl7dmFyIGs9aC5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWspe2c9aC5jaGlsZDtmb3IodmFyIGw9XG5rLmZpcnN0Q29udGV4dDtudWxsIT09bDspe2lmKGwuY29udGV4dD09PWQmJjAhPT0obC5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGw9emcoLTEsYyYtYyksbC50YWc9MixBZyhoLGwpKTtoLmxhbmVzfD1jO2w9aC5hbHRlcm5hdGU7bnVsbCE9PWwmJihsLmxhbmVzfD1jKTtzZyhoLnJldHVybixjKTtrLmxhbmVzfD1jO2JyZWFrfWw9bC5uZXh0fX1lbHNlIGc9MTA9PT1oLnRhZz9oLnR5cGU9PT1iLnR5cGU/bnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPWd9ZmkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sdGcoYixjKSxlPXZnKGUsXG5mLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZmxhZ3N8PTEsZmkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPWxnKGUsYi5wZW5kaW5nUHJvcHMpLGY9bGcoZS50eXBlLGYpLGlpKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBraShhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxiLnRhZz0xLEZmKGQpPyhhPSEwLEpmKGIpKTphPSExLHRnKGIsYyksTWcoYixkLGUpLE9nKGIsZCxlLGMpLHFpKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gQWkoYSxiLGMpO2Nhc2UgMjM6cmV0dXJuIG1pKGEsYixjKTtjYXNlIDI0OnJldHVybiBtaShhLGIsYyl9dGhyb3cgRXJyb3IoeSgxNTYsYi50YWcpKTtcbn07ZnVuY3Rpb24gaWsoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmZsYWdzPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIG5oKGEsYixjLGQpe3JldHVybiBuZXcgaWsoYSxiLGMsZCl9ZnVuY3Rpb24gamkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1cbmZ1bmN0aW9uIGhrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBqaShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09QWEpcmV0dXJuIDExO2lmKGE9PT1EYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBUZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPW5oKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFZnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlqaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB1YTpyZXR1cm4gWGcoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBIYTpnPTg7ZXw9MTY7YnJlYWs7Y2FzZSB3YTpnPTg7ZXw9MTticmVhaztjYXNlIHhhOnJldHVybiBhPW5oKDEyLGMsYixlfDgpLGEuZWxlbWVudFR5cGU9eGEsYS50eXBlPXhhLGEubGFuZXM9ZixhO2Nhc2UgQmE6cmV0dXJuIGE9bmgoMTMsYyxiLGUpLGEudHlwZT1CYSxhLmVsZW1lbnRUeXBlPUJhLGEubGFuZXM9ZixhO2Nhc2UgQ2E6cmV0dXJuIGE9bmgoMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9Q2EsYS5sYW5lcz1mLGE7Y2FzZSBJYTpyZXR1cm4gdmkoYyxlLGYsYik7Y2FzZSBKYTpyZXR1cm4gYT1uaCgyNCxjLGIsZSksYS5lbGVtZW50VHlwZT1KYSxhLmxhbmVzPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB5YTpnPTEwO2JyZWFrIGE7Y2FzZSB6YTpnPTk7YnJlYWsgYTtjYXNlIEFhOmc9MTE7YnJlYWsgYTtjYXNlIERhOmc9MTQ7YnJlYWsgYTtjYXNlIEVhOmc9MTY7ZD1udWxsO2JyZWFrIGE7Y2FzZSBGYTpnPTIyO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1uaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIFhnKGEsYixjLGQpe2E9bmgoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHZpKGEsYixjLGQpe2E9bmgoMjMsYSxkLGIpO2EuZWxlbWVudFR5cGU9SWE7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIFVnKGEsYixjKXthPW5oKDYsYSxudWxsLGIpO2EubGFuZXM9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFdnKGEsYixjKXtiPW5oKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmxhbmVzPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gamsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9WmMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9WmMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9WmMoMCk7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPW51bGx9XG5mdW5jdGlvbiBrayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOnRhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuZnVuY3Rpb24gbGsoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9SGcoKSxnPUlnKGUpO2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFscztiOntpZihaYihjKSE9PWN8fDEhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDE3MCkpO3ZhciBoPWM7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aD1oLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEZmKGgudHlwZSkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19aD1oLnJldHVybn13aGlsZShudWxsIT09aCk7dGhyb3cgRXJyb3IoeSgxNzEpKTt9aWYoMT09PWMudGFnKXt2YXIgaz1jLnR5cGU7aWYoRmYoaykpe2M9SWYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9Q2Y7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj16ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1cbmQmJihiLmNhbGxiYWNrPWQpO0FnKGUsYik7SmcoZSxnLGYpO3JldHVybiBnfWZ1bmN0aW9uIG1rKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gbmsoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7dmFyIGM9YS5yZXRyeUxhbmU7YS5yZXRyeUxhbmU9MCE9PWMmJmM8Yj9jOmJ9fWZ1bmN0aW9uIG9rKGEsYil7bmsoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJm5rKGEsYil9ZnVuY3Rpb24gcGsoKXtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHFrKGEsYixjKXt2YXIgZD1udWxsIT1jJiZudWxsIT1jLmh5ZHJhdGlvbk9wdGlvbnMmJmMuaHlkcmF0aW9uT3B0aW9ucy5tdXRhYmxlU291cmNlc3x8bnVsbDtjPW5ldyBqayhhLGIsbnVsbCE9YyYmITA9PT1jLmh5ZHJhdGUpO2I9bmgoMyxudWxsLG51bGwsMj09PWI/NzoxPT09Yj8zOjApO2MuY3VycmVudD1iO2Iuc3RhdGVOb2RlPWM7eGcoYik7YVtmZl09Yy5jdXJyZW50O2NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtpZihkKWZvcihhPTA7YTxkLmxlbmd0aDthKyspe2I9ZFthXTt2YXIgZT1iLl9nZXRWZXJzaW9uO2U9ZShiLl9zb3VyY2UpO251bGw9PWMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2IsZV06Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYixlKX10aGlzLl9pbnRlcm5hbFJvb3Q9Y31cbnFrLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7bGsoYSx0aGlzLl9pbnRlcm5hbFJvb3QsbnVsbCxudWxsKX07cWsucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3QsYj1hLmNvbnRhaW5lckluZm87bGsobnVsbCxhLG51bGwsZnVuY3Rpb24oKXtiW2ZmXT1udWxsfSl9O2Z1bmN0aW9uIHJrKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1cbmZ1bmN0aW9uIHNrKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgcWsoYSwwLGI/e2h5ZHJhdGU6ITB9OnZvaWQgMCl9XG5mdW5jdGlvbiB0ayhhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPW1rKGcpO2guY2FsbChhKX19bGsoYixnLGEsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1zayhjLGQpO2c9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtrLmNhbGwoYSl9fVhqKGZ1bmN0aW9uKCl7bGsoYixnLGEsZSl9KX1yZXR1cm4gbWsoZyl9ZWM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKTtKZyhhLDQsYik7b2soYSw0KX19O2ZjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw2NzEwODg2NCxiKTtvayhhLDY3MTA4ODY0KX19O1xuZ2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKSxjPUlnKGEpO0pnKGEsYyxiKTtvayhhLGMpfX07aGM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYigpfTtcbnliPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6YWIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPURiKGQpO2lmKCFlKXRocm93IEVycm9yKHkoOTApKTtXYShkKTthYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmZiKGEsISFjLm11bHRpcGxlLGIsITEpfX07R2I9V2o7XG5IYj1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVg7WHw9NDt0cnl7cmV0dXJuIGdnKDk4LGEuYmluZChudWxsLGIsYyxkLGUpKX1maW5hbGx5e1g9ZiwwPT09WCYmKHdqKCksaWcoKSl9fTtJYj1mdW5jdGlvbigpezA9PT0oWCY0OSkmJihWaigpLE9qKCkpfTtKYj1mdW5jdGlvbihhLGIpe3ZhciBjPVg7WHw9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX07ZnVuY3Rpb24gdWsoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4ga2soYSxiLG51bGwsYyl9dmFyIHZrPXtFdmVudHM6W0NiLHVlLERiLEViLEZiLE9qLHtjdXJyZW50OiExfV19LHdrPXtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp3YyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE3LjAuMVwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn07XG52YXIgeGs9e2J1bmRsZVR5cGU6d2suYnVuZGxlVHlwZSx2ZXJzaW9uOndrLnZlcnNpb24scmVuZGVyZXJQYWNrYWdlTmFtZTp3ay5yZW5kZXJlclBhY2thZ2VOYW1lLHJlbmRlcmVyQ29uZmlnOndrLnJlbmRlcmVyQ29uZmlnLG92ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLG92ZXJyaWRlUHJvcHNEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGg6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOnJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1jYyhhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2suZmluZEZpYmVyQnlIb3N0SW5zdGFuY2V8fFxucGssZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB5az1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXlrLmlzRGlzYWJsZWQmJnlrLnN1cHBvcnRzRmliZXIpdHJ5e0xmPXlrLmluamVjdCh4ayksTWY9eWt9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXZrO2V4cG9ydHMuY3JlYXRlUG9ydGFsPXVrO1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcih5KDE4OCkpO3Rocm93IEVycm9yKHkoMjY4LE9iamVjdC5rZXlzKGEpKSk7fWE9Y2MoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtleHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhLGIpe3ZhciBjPVg7aWYoMCE9PShjJjQ4KSlyZXR1cm4gYShiKTtYfD0xO3RyeXtpZihhKXJldHVybiBnZyg5OSxhLmJpbmQobnVsbCxiKSl9ZmluYWxseXtYPWMsaWcoKX19O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCEwLGMpfTtcbmV4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4gdGsobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighcmsoYSkpdGhyb3cgRXJyb3IoeSg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFhqKGZ1bmN0aW9uKCl7dGsobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW2ZmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9V2o7ZXhwb3J0cy51bnN0YWJsZV9jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdWsoYSxiLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsKX07XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFyayhjKSl0aHJvdyBFcnJvcih5KDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHkoMzgpKTtyZXR1cm4gdGsoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMVwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG52YXIga2V5TGlzdCA9IE9iamVjdC5rZXlzO1xudmFyIGhhc1Byb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGhhc0VsZW1lbnRUeXBlID0gdHlwZW9mIEVsZW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG5mdW5jdGlvbiBlcXVhbChhLCBiKSB7XG4gIC8vIGZhc3QtZGVlcC1lcXVhbCBpbmRleC5qcyAyLjAuMVxuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgJiYgYiAmJiB0eXBlb2YgYSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgYiA9PSAnb2JqZWN0Jykge1xuICAgIHZhciBhcnJBID0gaXNBcnJheShhKVxuICAgICAgLCBhcnJCID0gaXNBcnJheShiKVxuICAgICAgLCBpXG4gICAgICAsIGxlbmd0aFxuICAgICAgLCBrZXk7XG5cbiAgICBpZiAoYXJyQSAmJiBhcnJCKSB7XG4gICAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggIT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgICAgaWYgKCFlcXVhbChhW2ldLCBiW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGFyckEgIT0gYXJyQikgcmV0dXJuIGZhbHNlO1xuXG4gICAgdmFyIGRhdGVBID0gYSBpbnN0YW5jZW9mIERhdGVcbiAgICAgICwgZGF0ZUIgPSBiIGluc3RhbmNlb2YgRGF0ZTtcbiAgICBpZiAoZGF0ZUEgIT0gZGF0ZUIpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZGF0ZUEgJiYgZGF0ZUIpIHJldHVybiBhLmdldFRpbWUoKSA9PSBiLmdldFRpbWUoKTtcblxuICAgIHZhciByZWdleHBBID0gYSBpbnN0YW5jZW9mIFJlZ0V4cFxuICAgICAgLCByZWdleHBCID0gYiBpbnN0YW5jZW9mIFJlZ0V4cDtcbiAgICBpZiAocmVnZXhwQSAhPSByZWdleHBCKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHJlZ2V4cEEgJiYgcmVnZXhwQikgcmV0dXJuIGEudG9TdHJpbmcoKSA9PSBiLnRvU3RyaW5nKCk7XG5cbiAgICB2YXIga2V5cyA9IGtleUxpc3QoYSk7XG4gICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG5cbiAgICBpZiAobGVuZ3RoICE9PSBrZXlMaXN0KGIpLmxlbmd0aClcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgIGlmICghaGFzUHJvcC5jYWxsKGIsIGtleXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gZW5kIGZhc3QtZGVlcC1lcXVhbFxuXG4gICAgLy8gc3RhcnQgcmVhY3QtZmFzdC1jb21wYXJlXG4gICAgLy8gY3VzdG9tIGhhbmRsaW5nIGZvciBET00gZWxlbWVudHNcbiAgICBpZiAoaGFzRWxlbWVudFR5cGUgJiYgYSBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgYiBpbnN0YW5jZW9mIEVsZW1lbnQpXG4gICAgICByZXR1cm4gYSA9PT0gYjtcblxuICAgIC8vIGN1c3RvbSBoYW5kbGluZyBmb3IgUmVhY3RcbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBpZiAoa2V5ID09PSAnX293bmVyJyAmJiBhLiQkdHlwZW9mKSB7XG4gICAgICAgIC8vIFJlYWN0LXNwZWNpZmljOiBhdm9pZCB0cmF2ZXJzaW5nIFJlYWN0IGVsZW1lbnRzJyBfb3duZXIuXG4gICAgICAgIC8vICBfb3duZXIgY29udGFpbnMgY2lyY3VsYXIgcmVmZXJlbmNlc1xuICAgICAgICAvLyBhbmQgaXMgbm90IG5lZWRlZCB3aGVuIGNvbXBhcmluZyB0aGUgYWN0dWFsIGVsZW1lbnRzIChhbmQgbm90IHRoZWlyIG93bmVycylcbiAgICAgICAgLy8gLiQkdHlwZW9mIGFuZCAuX3N0b3JlIG9uIGp1c3QgcmVhc29uYWJsZSBtYXJrZXJzIG9mIGEgcmVhY3QgZWxlbWVudFxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGFsbCBvdGhlciBwcm9wZXJ0aWVzIHNob3VsZCBiZSB0cmF2ZXJzZWQgYXMgdXN1YWxcbiAgICAgICAgaWYgKCFlcXVhbChhW2tleV0sIGJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZW5kIHJlYWN0LWZhc3QtY29tcGFyZVxuXG4gICAgLy8gZmFzdC1kZWVwLWVxdWFsIGluZGV4LmpzIDIuMC4xXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gYSAhPT0gYSAmJiBiICE9PSBiO1xufVxuLy8gZW5kIGZhc3QtZGVlcC1lcXVhbFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGV4cG9ydGVkRXF1YWwoYSwgYikge1xuICB0cnkge1xuICAgIHJldHVybiBlcXVhbChhLCBiKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoKGVycm9yLm1lc3NhZ2UgJiYgZXJyb3IubWVzc2FnZS5tYXRjaCgvc3RhY2t8cmVjdXJzaW9uL2kpKSB8fCAoZXJyb3IubnVtYmVyID09PSAtMjE0NjgyODI2MCkpIHtcbiAgICAgIC8vIHdhcm4gb24gY2lyY3VsYXIgcmVmZXJlbmNlcywgZG9uJ3QgY3Jhc2hcbiAgICAgIC8vIGJyb3dzZXJzIGdpdmUgdGhpcyBkaWZmZXJlbnQgZXJyb3JzIG5hbWUgYW5kIG1lc3NhZ2VzOlxuICAgICAgLy8gY2hyb21lL3NhZmFyaTogXCJSYW5nZUVycm9yXCIsIFwiTWF4aW11bSBjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIlxuICAgICAgLy8gZmlyZWZveDogXCJJbnRlcm5hbEVycm9yXCIsIHRvbyBtdWNoIHJlY3Vyc2lvblwiXG4gICAgICAvLyBlZGdlOiBcIkVycm9yXCIsIFwiT3V0IG9mIHN0YWNrIHNwYWNlXCJcbiAgICAgIGNvbnNvbGUud2FybignV2FybmluZzogcmVhY3QtZmFzdC1jb21wYXJlIGRvZXMgbm90IGhhbmRsZSBjaXJjdWxhciByZWZlcmVuY2VzLicsIGVycm9yLm5hbWUsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBzb21lIG90aGVyIGVycm9yLiB3ZSBzaG91bGQgZGVmaW5pdGVseSBrbm93IGFib3V0IHRoZXNlXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG4iLCJcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQoZSl7cmV0dXJuIGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZcImRlZmF1bHRcImluIGU/ZS5kZWZhdWx0OmV9T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIFJlYWN0PV9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO2Z1bmN0aW9uIEFwcENvbnRhaW5lcihlKXtyZXR1cm4gQXBwQ29udGFpbmVyLndhcm5BYm91dEhNUkRpc2FibGVkJiYoQXBwQ29udGFpbmVyLndhcm5BYm91dEhNUkRpc2FibGVkPSEwLGNvbnNvbGUuZXJyb3IoXCJSZWFjdC1Ib3QtTG9hZGVyOiBtaXNjb25maWd1cmF0aW9uIGRldGVjdGVkLCB1c2luZyBwcm9kdWN0aW9uIHZlcnNpb24gaW4gbm9uLXByb2R1Y3Rpb24gZW52aXJvbm1lbnQuXCIpLGNvbnNvbGUuZXJyb3IoXCJSZWFjdC1Ib3QtTG9hZGVyOiBIb3QgTW9kdWxlIFJlcGxhY2VtZW50IGlzIG5vdCBlbmFibGVkLlwiKSksUmVhY3QuQ2hpbGRyZW4ub25seShlLmNoaWxkcmVuKX1BcHBDb250YWluZXIud2FybkFib3V0SE1SRGlzYWJsZWQ9ITE7dmFyIGhvdD1mdW5jdGlvbiBlKCl7cmV0dXJuIGUuc2hvdWxkV3JhcFdpdGhBcHBDb250YWluZXI/ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKG4pe3JldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEFwcENvbnRhaW5lcixudWxsLFJlYWN0LmNyZWF0ZUVsZW1lbnQoZSxuKSl9fTpmdW5jdGlvbihlKXtyZXR1cm4gZX19O2hvdC5zaG91bGRXcmFwV2l0aEFwcENvbnRhaW5lcj0hMTt2YXIgYXJlQ29tcG9uZW50c0VxdWFsPWZ1bmN0aW9uKGUsbil7cmV0dXJuIGU9PT1ufSxzZXRDb25maWc9ZnVuY3Rpb24oKXt9LGNvbGQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LGNvbmZpZ3VyZUNvbXBvbmVudD1mdW5jdGlvbigpe307ZXhwb3J0cy5BcHBDb250YWluZXI9QXBwQ29udGFpbmVyLGV4cG9ydHMuaG90PWhvdCxleHBvcnRzLmFyZUNvbXBvbmVudHNFcXVhbD1hcmVDb21wb25lbnRzRXF1YWwsZXhwb3J0cy5zZXRDb25maWc9c2V0Q29uZmlnLGV4cG9ydHMuY29sZD1jb2xkLGV4cG9ydHMuY29uZmlndXJlQ29tcG9uZW50PWNvbmZpZ3VyZUNvbXBvbmVudDtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKCFtb2R1bGUuaG90IHx8IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvcmVhY3QtaG90LWxvYWRlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvcmVhY3QtaG90LWxvYWRlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGhvdCA9IHJlcXVpcmUoJy4vaW5kZXgnKS5ob3Q7XG4gIGlmIChtb2R1bGUuaG90KSB7XG4gICAgdmFyIGNhY2hlID0gcmVxdWlyZS5jYWNoZTtcblxuICAgIGlmICghbW9kdWxlLnBhcmVudHMgfHwgbW9kdWxlLnBhcmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdSZWFjdC1Ib3QtTG9hZGVyOiBgcmVhY3QtaG90LWxvYWRlci9yb290YCBpcyBub3Qgc3VwcG9ydGVkIG9uIHlvdXIgc3lzdGVtLiAnICtcbiAgICAgICAgJ1BsZWFzZSB1c2UgYGltcG9ydCB7aG90fSBmcm9tIFwicmVhY3QtaG90LWxvYWRlclwiYCBpbnN0ZWFkJ1xuICAgICAgKTtcbiAgICB9XG4gICAgLy8gYWNjZXNzIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSBjYWNoZVttb2R1bGUucGFyZW50c1swXV07XG4gICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1JlYWN0LUhvdC1Mb2FkZXI6IGByZWFjdC1ob3QtbG9hZGVyL3Jvb3RgIGlzIG5vdCBzdXBwb3J0ZWQgb24geW91ciBzeXN0ZW0uICcgK1xuICAgICAgICAnUGxlYXNlIHVzZSBgaW1wb3J0IHtob3R9IGZyb20gXCJyZWFjdC1ob3QtbG9hZGVyXCJgIGluc3RlYWQnXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gYSBjYWNoZVxuICAgIGRlbGV0ZSBjYWNoZVttb2R1bGUuaWRdO1xuXG4gICAgLy8gc2V0dXAgaG90IGZvciBjYWxsZXJcbiAgICBleHBvcnRzLmhvdCA9IGhvdChwYXJlbnQpO1xuICB9IGVsc2Uge1xuICAgIGZhbGxiYWNrSG90KCk7XG4gIH1cbn0gZWxzZSB7XG4gIC8vIHByb2QgbW9kZVxuICBmYWxsYmFja0hvdCgpO1xufVxuXG5mdW5jdGlvbiBmYWxsYmFja0hvdCgpIHtcbiAgZXhwb3J0cy5ob3QgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBhO1xuICB9O1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYj02MDEwMyxjPTYwMTA2LGQ9NjAxMDcsZT02MDEwOCxmPTYwMTE0LGc9NjAxMDksaD02MDExMCxrPTYwMTEyLGw9NjAxMTMsbT02MDEyMCxuPTYwMTE1LHA9NjAxMTYscT02MDEyMSxyPTYwMTIyLHU9NjAxMTcsdj02MDEyOSx3PTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIHg9U3ltYm9sLmZvcjtiPXgoXCJyZWFjdC5lbGVtZW50XCIpO2M9eChcInJlYWN0LnBvcnRhbFwiKTtkPXgoXCJyZWFjdC5mcmFnbWVudFwiKTtlPXgoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtmPXgoXCJyZWFjdC5wcm9maWxlclwiKTtnPXgoXCJyZWFjdC5wcm92aWRlclwiKTtoPXgoXCJyZWFjdC5jb250ZXh0XCIpO2s9eChcInJlYWN0LmZvcndhcmRfcmVmXCIpO2w9eChcInJlYWN0LnN1c3BlbnNlXCIpO209eChcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik7bj14KFwicmVhY3QubWVtb1wiKTtwPXgoXCJyZWFjdC5sYXp5XCIpO3E9eChcInJlYWN0LmJsb2NrXCIpO3I9eChcInJlYWN0LnNlcnZlci5ibG9ja1wiKTt1PXgoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTt2PXgoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO3c9eChcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIil9XG5mdW5jdGlvbiB5KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB0PWEuJCR0eXBlb2Y7c3dpdGNoKHQpe2Nhc2UgYjpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBkOmNhc2UgZjpjYXNlIGU6Y2FzZSBsOmNhc2UgbTpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBoOmNhc2UgazpjYXNlIHA6Y2FzZSBuOmNhc2UgZzpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB0fX1jYXNlIGM6cmV0dXJuIHR9fX12YXIgej1nLEE9YixCPWssQz1kLEQ9cCxFPW4sRj1jLEc9ZixIPWUsST1sO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWg7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9ejtleHBvcnRzLkVsZW1lbnQ9QTtleHBvcnRzLkZvcndhcmRSZWY9QjtleHBvcnRzLkZyYWdtZW50PUM7ZXhwb3J0cy5MYXp5PUQ7ZXhwb3J0cy5NZW1vPUU7ZXhwb3J0cy5Qb3J0YWw9RjtleHBvcnRzLlByb2ZpbGVyPUc7ZXhwb3J0cy5TdHJpY3RNb2RlPUg7XG5leHBvcnRzLlN1c3BlbnNlPUk7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWh9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1nfTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Yn07ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1rfTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1kfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PXB9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09bn07XG5leHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Y307ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Zn07ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1lfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1sfTtleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZHx8YT09PWZ8fGE9PT12fHxhPT09ZXx8YT09PWx8fGE9PT1tfHxhPT09d3x8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT1wfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PWd8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PXV8fGEuJCR0eXBlb2Y9PT1xfHxhWzBdPT09cik/ITA6ITF9O1xuZXhwb3J0cy50eXBlT2Y9eTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9cblN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSx3PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHk9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7XG5mdW5jdGlvbiB6KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSB0OmNhc2UgcjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gQShhKXtyZXR1cm4geihhKT09PW19ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO1xuZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiBBKGEpfHx6KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPUE7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXR9O1xuZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1wfTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT13fHxhLiQkdHlwZW9mPT09eHx8YS4kJHR5cGVvZj09PXl8fGEuJCR0eXBlb2Y9PT12KX07ZXhwb3J0cy50eXBlT2Y9ejtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucywgb3B0aW9ucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnLCBmbGFncyhvcHRpb25zKSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIik7dmFyIGY9cmVxdWlyZShcInJlYWN0XCIpLGc9NjAxMDM7ZXhwb3J0cy5GcmFnbWVudD02MDEwNztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgaD1TeW1ib2wuZm9yO2c9aChcInJlYWN0LmVsZW1lbnRcIik7ZXhwb3J0cy5GcmFnbWVudD1oKFwicmVhY3QuZnJhZ21lbnRcIil9dmFyIG09Zi5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixuPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkscD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gcShjLGEsayl7dmFyIGIsZD17fSxlPW51bGwsbD1udWxsO3ZvaWQgMCE9PWsmJihlPVwiXCIrayk7dm9pZCAwIT09YS5rZXkmJihlPVwiXCIrYS5rZXkpO3ZvaWQgMCE9PWEucmVmJiYobD1hLnJlZik7Zm9yKGIgaW4gYSluLmNhbGwoYSxiKSYmIXAuaGFzT3duUHJvcGVydHkoYikmJihkW2JdPWFbYl0pO2lmKGMmJmMuZGVmYXVsdFByb3BzKWZvcihiIGluIGE9Yy5kZWZhdWx0UHJvcHMsYSl2b2lkIDA9PT1kW2JdJiYoZFtiXT1hW2JdKTtyZXR1cm57JCR0eXBlb2Y6Zyx0eXBlOmMsa2V5OmUscmVmOmwscHJvcHM6ZCxfb3duZXI6bS5jdXJyZW50fX1leHBvcnRzLmpzeD1xO2V4cG9ydHMuanN4cz1xO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPTYwMTAzLHA9NjAxMDY7ZXhwb3J0cy5GcmFnbWVudD02MDEwNztleHBvcnRzLlN0cmljdE1vZGU9NjAxMDg7ZXhwb3J0cy5Qcm9maWxlcj02MDExNDt2YXIgcT02MDEwOSxyPTYwMTEwLHQ9NjAxMTI7ZXhwb3J0cy5TdXNwZW5zZT02MDExMzt2YXIgdT02MDExNSx2PTYwMTE2O1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIHc9U3ltYm9sLmZvcjtuPXcoXCJyZWFjdC5lbGVtZW50XCIpO3A9dyhcInJlYWN0LnBvcnRhbFwiKTtleHBvcnRzLkZyYWdtZW50PXcoXCJyZWFjdC5mcmFnbWVudFwiKTtleHBvcnRzLlN0cmljdE1vZGU9dyhcInJlYWN0LnN0cmljdF9tb2RlXCIpO2V4cG9ydHMuUHJvZmlsZXI9dyhcInJlYWN0LnByb2ZpbGVyXCIpO3E9dyhcInJlYWN0LnByb3ZpZGVyXCIpO3I9dyhcInJlYWN0LmNvbnRleHRcIik7dD13KFwicmVhY3QuZm9yd2FyZF9yZWZcIik7ZXhwb3J0cy5TdXNwZW5zZT13KFwicmVhY3Quc3VzcGVuc2VcIik7dT13KFwicmVhY3QubWVtb1wiKTt2PXcoXCJyZWFjdC5sYXp5XCIpfXZhciB4PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIHkoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXgmJmFbeF18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiB6KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIEE9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEI9e307ZnVuY3Rpb24gQyhhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfUMucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Qy5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKHooODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0MucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gRCgpe31ELnByb3RvdHlwZT1DLnByb3RvdHlwZTtmdW5jdGlvbiBFKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9dmFyIEY9RS5wcm90b3R5cGU9bmV3IEQ7Ri5jb25zdHJ1Y3Rvcj1FO2woRixDLnByb3RvdHlwZSk7Ri5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgRz17Y3VycmVudDpudWxsfSxIPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksST17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gSihhLGIsYyl7dmFyIGUsZD17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilILmNhbGwoYixlKSYmIUkuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZylkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09ZFtlXSYmKGRbZV09Z1tlXSk7cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmQsX293bmVyOkcuY3VycmVudH19XG5mdW5jdGlvbiBLKGEsYil7cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBMKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1ufWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTT0vXFwvKy9nO2Z1bmN0aW9uIE4oYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBPKGEsYixjLGUsZCl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIG46Y2FzZSBwOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxkPWQoaCksYT1cIlwiPT09ZT9cIi5cIitOKGgsMCk6ZSxBcnJheS5pc0FycmF5KGQpPyhjPVwiXCIsbnVsbCE9YSYmKGM9YS5yZXBsYWNlKE0sXCIkJi9cIikrXCIvXCIpLE8oZCxiLGMsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1kJiYoTChkKSYmKGQ9SyhkLGMrKCFkLmtleXx8aCYmaC5rZXk9PT1kLmtleT9cIlwiOihcIlwiK2Qua2V5KS5yZXBsYWNlKE0sXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goZCkpLDE7aD0wO2U9XCJcIj09PWU/XCIuXCI6ZStcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgZz1cbjA7ZzxhLmxlbmd0aDtnKyspe2s9YVtnXTt2YXIgZj1lK04oayxnKTtoKz1PKGssYixjLGYsZCl9ZWxzZSBpZihmPXkoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWUrTihrLGcrKyksaCs9TyhrLGIsYyxmLGQpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1cIlwiK2EsRXJyb3IoeigzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKSk7cmV0dXJuIGh9ZnVuY3Rpb24gUChhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZT1bXSxkPTA7TyhhLGUsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoYyxhLGQrKyl9KTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFEoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTthLl9zdGF0dXM9MDthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdDt0aHJvdyBhLl9yZXN1bHQ7fXZhciBSPXtjdXJyZW50Om51bGx9O2Z1bmN0aW9uIFMoKXt2YXIgYT1SLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoeigzMjEpKTtyZXR1cm4gYX12YXIgVD17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpSLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOnt0cmFuc2l0aW9uOjB9LFJlYWN0Q3VycmVudE93bmVyOkcsSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpsfTtcbmV4cG9ydHMuQ2hpbGRyZW49e21hcDpQLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe1AoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxjKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtQKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUChhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFMKGEpKXRocm93IEVycm9yKHooMTQzKSk7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1DO2V4cG9ydHMuUHVyZUNvbXBvbmVudD1FO2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VDtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcih6KDI2NyxhKSk7dmFyIGU9bCh7fSxhLnByb3BzKSxkPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1HLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUguY2FsbChiLGYpJiYhSS5oYXNPd25Qcm9wZXJ0eShmKSYmKGVbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZillLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7Zm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxcbmtleTpkLHJlZjprLHByb3BzOmUsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjpyLF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6cSxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9SjtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9Si5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O2V4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dCxyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TDtcbmV4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixfcGF5bG9hZDp7X3N0YXR1czotMSxfcmVzdWx0OmF9LF9pbml0OlF9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6dSx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ29udGV4dChhLGIpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VSZWR1Y2VyKGEsYixjKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFMoKS51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFMoKS51c2VTdGF0ZShhKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTcuMC4yXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjIwLjJcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGYsZyxoLGs7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fVxuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIHQ9bnVsbCx1PW51bGwsdz1mdW5jdGlvbigpe2lmKG51bGwhPT10KXRyeXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO3QoITAsYSk7dD1udWxsfWNhdGNoKGIpe3Rocm93IHNldFRpbWVvdXQodywwKSxiO319O2Y9ZnVuY3Rpb24oYSl7bnVsbCE9PXQ/c2V0VGltZW91dChmLDAsYSk6KHQ9YSxzZXRUaW1lb3V0KHcsMCkpfTtnPWZ1bmN0aW9uKGEsYil7dT1zZXRUaW1lb3V0KGEsYil9O2g9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodSl9O2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4hMX07az1leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKCl7fX1lbHNle3ZhciB4PXdpbmRvdy5zZXRUaW1lb3V0LHk9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciB6PVxud2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIik7XCJmdW5jdGlvblwiIT09dHlwZW9mIHomJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvcmVhY3QtcG9seWZpbGxzXCIpfXZhciBBPSExLEI9bnVsbCxDPS0xLEQ9NSxFPTA7ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1cbkV9O2s9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOkQ9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O3ZhciBGPW5ldyBNZXNzYWdlQ2hhbm5lbCxHPUYucG9ydDI7Ri5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24oKXtpZihudWxsIT09Qil7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtFPWErRDt0cnl7QighMCxhKT9HLnBvc3RNZXNzYWdlKG51bGwpOihBPSExLEI9bnVsbCl9Y2F0Y2goYil7dGhyb3cgRy5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBBPSExfTtmPWZ1bmN0aW9uKGEpe0I9YTtBfHwoQT0hMCxHLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0M9XG54KGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9O2g9ZnVuY3Rpb24oKXt5KEMpO0M9LTF9fWZ1bmN0aW9uIEgoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKHZvaWQgMCE9PWUmJjA8SShlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gSihhKXthPWFbMF07cmV0dXJuIHZvaWQgMD09PWE/bnVsbDphfVxuZnVuY3Rpb24gSyhhKXt2YXIgYj1hWzBdO2lmKHZvaWQgMCE9PWIpe3ZhciBjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlOyl7dmFyIG09MiooZCsxKS0xLG49YVttXSx2PW0rMSxyPWFbdl07aWYodm9pZCAwIT09biYmMD5JKG4sYykpdm9pZCAwIT09ciYmMD5JKHIsbik/KGFbZF09cixhW3ZdPWMsZD12KTooYVtkXT1uLGFbbV09YyxkPW0pO2Vsc2UgaWYodm9pZCAwIT09ciYmMD5JKHIsYykpYVtkXT1yLGFbdl09YyxkPXY7ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBJKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfXZhciBMPVtdLE09W10sTj0xLE89bnVsbCxQPTMsUT0hMSxSPSExLFM9ITE7XG5mdW5jdGlvbiBUKGEpe2Zvcih2YXIgYj1KKE0pO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spSyhNKTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKUsoTSksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxIKEwsYik7ZWxzZSBicmVhaztiPUooTSl9fWZ1bmN0aW9uIFUoYSl7Uz0hMTtUKGEpO2lmKCFSKWlmKG51bGwhPT1KKEwpKVI9ITAsZihWKTtlbHNle3ZhciBiPUooTSk7bnVsbCE9PWImJmcoVSxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBWKGEsYil7Uj0hMTtTJiYoUz0hMSxoKCkpO1E9ITA7dmFyIGM9UDt0cnl7VChiKTtmb3IoTz1KKEwpO251bGwhPT1PJiYoIShPLmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZCgpKTspe3ZhciBkPU8uY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe08uY2FsbGJhY2s9bnVsbDtQPU8ucHJpb3JpdHlMZXZlbDt2YXIgZT1kKE8uZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9PLmNhbGxiYWNrPWU6Tz09PUooTCkmJksoTCk7VChiKX1lbHNlIEsoTCk7Tz1KKEwpfWlmKG51bGwhPT1PKXZhciBtPSEwO2Vsc2V7dmFyIG49SihNKTtudWxsIT09biYmZyhVLG4uc3RhcnRUaW1lLWIpO209ITF9cmV0dXJuIG19ZmluYWxseXtPPW51bGwsUD1jLFE9ITF9fXZhciBXPWs7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtcbmV4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7Unx8UXx8KFI9ITAsZihWKSl9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gUH07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBKKEwpfTtcbmV4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goUCl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9UH12YXIgYz1QO1A9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1A9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PVc7ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1QO1A9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e1A9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWM/KGM9Yy5kZWxheSxjPVwibnVtYmVyXCI9PT10eXBlb2YgYyYmMDxjP2QrYzpkKTpjPWQ7c3dpdGNoKGEpe2Nhc2UgMTp2YXIgZT0tMTticmVhaztjYXNlIDI6ZT0yNTA7YnJlYWs7Y2FzZSA1OmU9MTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6ZT0xRTQ7YnJlYWs7ZGVmYXVsdDplPTVFM31lPWMrZTthPXtpZDpOKyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmMsZXhwaXJhdGlvblRpbWU6ZSxzb3J0SW5kZXg6LTF9O2M+ZD8oYS5zb3J0SW5kZXg9YyxIKE0sYSksbnVsbD09PUooTCkmJmE9PT1KKE0pJiYoUz9oKCk6Uz0hMCxnKFUsYy1kKSkpOihhLnNvcnRJbmRleD1lLEgoTCxhKSxSfHxRfHwoUj0hMCxmKFYpKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UDtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1QO1A9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7UD1jfX19O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8vXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIsIGNvbXBhcmUsIGNvbXBhcmVDb250ZXh0KSB7XG4gIHZhciByZXQgPSBjb21wYXJlID8gY29tcGFyZS5jYWxsKGNvbXBhcmVDb250ZXh0LCBvYmpBLCBvYmpCKSA6IHZvaWQgMDtcblxuICBpZiAocmV0ICE9PSB2b2lkIDApIHtcbiAgICByZXR1cm4gISFyZXQ7XG4gIH1cblxuICBpZiAob2JqQSA9PT0gb2JqQikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSBcIm9iamVjdFwiIHx8ICFvYmpBIHx8IHR5cGVvZiBvYmpCICE9PSBcIm9iamVjdFwiIHx8ICFvYmpCKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBiSGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmJpbmQob2JqQik7XG5cbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwga2V5c0EubGVuZ3RoOyBpZHgrKykge1xuICAgIHZhciBrZXkgPSBrZXlzQVtpZHhdO1xuXG4gICAgaWYgKCFiSGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZUEgPSBvYmpBW2tleV07XG4gICAgdmFyIHZhbHVlQiA9IG9iakJba2V5XTtcblxuICAgIHJldCA9IGNvbXBhcmUgPyBjb21wYXJlLmNhbGwoY29tcGFyZUNvbnRleHQsIHZhbHVlQSwgdmFsdWVCLCBrZXkpIDogdm9pZCAwO1xuXG4gICAgaWYgKHJldCA9PT0gZmFsc2UgfHwgKHJldCA9PT0gdm9pZCAwICYmIHZhbHVlQSAhPT0gdmFsdWVCKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufSIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvLCBmcm9tKSB7XG4gIGlmIChmcm9tID09PSB1bmRlZmluZWQpIGZyb20gPSAnJztcblxuICB2YXIgdG9QYXJ0cyA9ICh0byAmJiB0by5zcGxpdCgnLycpKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IChmcm9tICYmIGZyb20uc3BsaXQoJy8nKSkgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcblxuICBpZiAoXG4gICAgbXVzdEVuZEFicyAmJlxuICAgIGZyb21QYXJ0c1swXSAhPT0gJycgJiZcbiAgICAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKVxuICApXG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lO1xuIiwidmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnO1xuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4ICsgXCI6IFwiICsgKG1lc3NhZ2UgfHwgJycpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaW52YXJpYW50O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHJlc29sdmVQYXRobmFtZSBmcm9tICdyZXNvbHZlLXBhdGhuYW1lJztcbmltcG9ydCB2YWx1ZUVxdWFsIGZyb20gJ3ZhbHVlLWVxdWFsJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIHBhdGgudG9Mb3dlckNhc2UoKS5pbmRleE9mKHByZWZpeC50b0xvd2VyQ2FzZSgpKSA9PT0gMCAmJiAnLz8jJy5pbmRleE9mKHBhdGguY2hhckF0KHByZWZpeC5sZW5ndGgpKSAhPT0gLTE7XG59XG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuXG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG5cbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuICByZXR1cm4gcGF0aDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbjtcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcnO1xuXG4gICAgaWYgKGxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLnNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgbG9jYXRpb24uc2VhcmNoID0gJz8nICsgbG9jYXRpb24uc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLmhhc2guY2hhckF0KDApICE9PSAnIycpIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBsb2NhdGlvbi5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQgJiYgbG9jYXRpb24uc3RhdGUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9jYXRpb24ucGF0aG5hbWUgPSBkZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBVUklFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFVSSUVycm9yKCdQYXRobmFtZSBcIicgKyBsb2NhdGlvbi5wYXRobmFtZSArICdcIiBjb3VsZCBub3QgYmUgZGVjb2RlZC4gJyArICdUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYW4gaW52YWxpZCBwZXJjZW50LWVuY29kaW5nLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkpIGxvY2F0aW9uLmtleSA9IGtleTtcblxuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgLy8gUmVzb2x2ZSBpbmNvbXBsZXRlL3JlbGF0aXZlIHBhdGhuYW1lIHJlbGF0aXZlIHRvIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSByZXNvbHZlUGF0aG5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gJy8nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiB2YWx1ZUVxdWFsKGEuc3RhdGUsIGIuc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpIHtcbiAgdmFyIHByb21wdCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKSA6IHZvaWQgMDtcbiAgICBwcm9tcHQgPSBuZXh0UHJvbXB0O1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJykgOiB2b2lkIDA7XG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn1cblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5mdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnk7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBicm93c2VyIGZpcmVzIHBvcHN0YXRlIG9uIGhhc2ggY2hhbmdlLlxuICogSUUxMCBhbmQgSUUxMSBkbyBub3QuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cblxuZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufVxuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZm9yY2VSZWZyZXNoID0gX3Byb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkpIHJldHVybjtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ICsgMSk7XG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQkMSA9ICdoYXNoY2hhbmdlJztcbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG5mdW5jdGlvbiBzdHJpcEhhc2godXJsKSB7XG4gIHZhciBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xufVxuXG5mdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn1cblxuZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpICsgJyMnICsgcGF0aCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IF9wcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB2b2lkIDAgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsJCQxKGEsIGIpIHtcbiAgICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2g7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG4gICAgICBpZiAoIWZvcmNlTmV4dFBvcCAmJiBsb2NhdGlvbnNBcmVFcXVhbCQkMShwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gY3JlYXRlUGF0aChsb2NhdGlvbikpIHJldHVybjsgLy8gSWdub3JlIHRoaXMgY2hhbmdlOyB3ZSBhbHJlYWR5IHNldFN0YXRlIGluIHB1c2gvcmVwbGFjZS5cblxuICAgICAgaWdub3JlUGF0aCA9IG51bGw7XG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgodG9Mb2NhdGlvbikpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoZnJvbUxvY2F0aW9uKSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH0gLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG5cblxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFtjcmVhdGVQYXRoKGluaXRpYWxMb2NhdGlvbildOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHZhciBiYXNlVGFnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpO1xuICAgIHZhciBocmVmID0gJyc7XG5cbiAgICBpZiAoYmFzZVRhZyAmJiBiYXNlVGFnLmdldEF0dHJpYnV0ZSgnaHJlZicpKSB7XG4gICAgICBocmVmID0gc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaHJlZiArICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ICsgMSk7XG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdIYXNoIGhpc3RvcnkgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aDsgYSBuZXcgZW50cnkgd2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2snKSA6IHZvaWQgMDtcbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKSA6IHZvaWQgMDtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gX3Byb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHZvaWQgMCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IF9wcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgY3JlYXRlS2V5KCkpIDogY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgZW50cnkua2V5IHx8IGNyZWF0ZUtleSgpKTtcbiAgfSk7IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGNyZWF0ZVBhdGg7XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG4gICAgICB2YXIgbmV4dEVudHJpZXMgPSBoaXN0b3J5LmVudHJpZXMuc2xpY2UoMCk7XG5cbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcChoaXN0b3J5LmluZGV4ICsgbiwgMCwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aCAtIDEpO1xuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5leHBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgcGFyc2VQYXRoLCBjcmVhdGVQYXRoIH07XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbnZhciBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgPSAxMDczNzQxODIzO1xudmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB7fTtcblxuZnVuY3Rpb24gZ2V0VW5pcXVlSWQoKSB7XG4gIHZhciBrZXkgPSAnX19nbG9iYWxfdW5pcXVlX2lkX18nO1xuICByZXR1cm4gY29tbW9uanNHbG9iYWxba2V5XSA9IChjb21tb25qc0dsb2JhbFtrZXldIHx8IDApICsgMTtcbn1cblxuZnVuY3Rpb24gb2JqZWN0SXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RW1pdHRlcih2YWx1ZSkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBvbjogZnVuY3Rpb24gb24oaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24gb2ZmKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiBoICE9PSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIodmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0Q29udGV4dChkZWZhdWx0VmFsdWUsIGNhbGN1bGF0ZUNoYW5nZWRCaXRzKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXgsIF9Db25zdW1lciRjb250ZXh0VHlwZTtcblxuICB2YXIgY29udGV4dFByb3AgPSAnX19jcmVhdGUtcmVhY3QtY29udGV4dC0nICsgZ2V0VW5pcXVlSWQoKSArICdfXyc7XG5cbiAgdmFyIFByb3ZpZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cztcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZygoY2hhbmdlZEJpdHMgJiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQpID09PSBjaGFuZ2VkQml0cywgJ2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgJyArICczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJyArIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHZhciBDb25zdW1lciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHNMb29zZShDb25zdW1lciwgX0NvbXBvbmVudDIpO1xuXG4gICAgZnVuY3Rpb24gQ29uc3VtZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyO1xuXG4gICAgICBfdGhpczIgPSBfQ29tcG9uZW50Mi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpczIuc3RhdGUgPSB7XG4gICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgfTtcblxuICAgICAgX3RoaXMyLm9uVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gX3RoaXMyLm9ic2VydmVkQml0cyB8IDA7XG5cbiAgICAgICAgaWYgKChvYnNlcnZlZEJpdHMgJiBjaGFuZ2VkQml0cykgIT09IDApIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBfdGhpczI7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90bzIgPSBDb25zdW1lci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IG5leHRQcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IHRoaXMucHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub2ZmKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5nZXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG9ubHlDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKSh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbnN1bWVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgQ29uc3VtZXIuY29udGV4dFR5cGVzID0gKF9Db25zdW1lciRjb250ZXh0VHlwZSA9IHt9LCBfQ29uc3VtZXIkY29udGV4dFR5cGVbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlKTtcbiAgcmV0dXJuIHtcbiAgICBQcm92aWRlcjogUHJvdmlkZXIsXG4gICAgQ29uc3VtZXI6IENvbnN1bWVyXG4gIH07XG59XG5cbnZhciBpbmRleCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQgfHwgY3JlYXRlUmVhY3RDb250ZXh0O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBjcmVhdGVOYW1lZENvbnRleHQgZnJvbSBcIi4vY3JlYXRlTmFtZUNvbnRleHRcIjtcblxuY29uc3QgaGlzdG9yeUNvbnRleHQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlci1IaXN0b3J5XCIpO1xuZXhwb3J0IGRlZmF1bHQgaGlzdG9yeUNvbnRleHQ7XG4iLCIvLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5pbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tIFwibWluaS1jcmVhdGUtcmVhY3QtY29udGV4dFwiO1xuXG5jb25zdCBjcmVhdGVOYW1lZENvbnRleHQgPSBuYW1lID0+IHtcbiAgY29uc3QgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG5cbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVOYW1lZENvbnRleHQ7XG4iLCIvLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5pbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tIFwibWluaS1jcmVhdGUtcmVhY3QtY29udGV4dFwiO1xuXG5jb25zdCBjcmVhdGVOYW1lZENvbnRleHQgPSBuYW1lID0+IHtcbiAgY29uc3QgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG5cbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG5jb25zdCBjb250ZXh0ID0gLyojX19QVVJFX18qLyBjcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXJcIik7XG5leHBvcnQgZGVmYXVsdCBjb250ZXh0O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInRpbnktd2FybmluZ1wiO1xuXG5pbXBvcnQgSGlzdG9yeUNvbnRleHQgZnJvbSBcIi4vSGlzdG9yeUNvbnRleHQuanNcIjtcbmltcG9ydCBSb3V0ZXJDb250ZXh0IGZyb20gXCIuL1JvdXRlckNvbnRleHQuanNcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cbmNsYXNzIFJvdXRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHsgcGF0aDogXCIvXCIsIHVybDogXCIvXCIsIHBhcmFtczoge30sIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIiB9O1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9O1xuXG4gICAgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2suIFdlIGhhdmUgdG8gc3RhcnQgbGlzdGVuaW5nIGZvciBsb2NhdGlvblxuICAgIC8vIGNoYW5nZXMgaGVyZSBpbiB0aGUgY29uc3RydWN0b3IgaW4gY2FzZSB0aGVyZSBhcmUgYW55IDxSZWRpcmVjdD5zXG4gICAgLy8gb24gdGhlIGluaXRpYWwgcmVuZGVyLiBJZiB0aGVyZSBhcmUsIHRoZXkgd2lsbCByZXBsYWNlL3B1c2ggd2hlblxuICAgIC8vIHRoZXkgbW91bnQgYW5kIHNpbmNlIGNETSBmaXJlcyBpbiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cywgd2UgbWF5XG4gICAgLy8gZ2V0IGEgbmV3IGxvY2F0aW9uIGJlZm9yZSB0aGUgPFJvdXRlcj4gaXMgbW91bnRlZC5cbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICB0aGlzLnVubGlzdGVuID0gcHJvcHMuaGlzdG9yeS5saXN0ZW4obG9jYXRpb24gPT4ge1xuICAgICAgICBpZiAodGhpcy5faXNNb3VudGVkKSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdMb2NhdGlvbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvY2F0aW9uOiB0aGlzLl9wZW5kaW5nTG9jYXRpb24gfSk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHRoaXMudW5saXN0ZW4oKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFJvdXRlckNvbnRleHQuUHJvdmlkZXJcbiAgICAgICAgdmFsdWU9e3tcbiAgICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgICAgbG9jYXRpb246IHRoaXMuc3RhdGUubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2g6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHRoaXMuc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpLFxuICAgICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuc3RhdGljQ29udGV4dFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8SGlzdG9yeUNvbnRleHQuUHJvdmlkZXJcbiAgICAgICAgICBjaGlsZHJlbj17dGhpcy5wcm9wcy5jaGlsZHJlbiB8fCBudWxsfVxuICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLmhpc3Rvcnl9XG4gICAgICAgIC8+XG4gICAgICA8L1JvdXRlckNvbnRleHQuUHJvdmlkZXI+XG4gICAgKTtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24ocHJldlByb3BzKSB7XG4gICAgd2FybmluZyhcbiAgICAgIHByZXZQcm9wcy5oaXN0b3J5ID09PSB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICBcIllvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT5cIlxuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwidGlueS13YXJuaW5nXCI7XG5cbmltcG9ydCBSb3V0ZXIgZnJvbSBcIi4vUm91dGVyLmpzXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgbG9jYXRpb24gaW4gbWVtb3J5LlxuICovXG5jbGFzcyBNZW1vcnlSb3V0ZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBoaXN0b3J5ID0gY3JlYXRlSGlzdG9yeSh0aGlzLnByb3BzKTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIDxSb3V0ZXIgaGlzdG9yeT17dGhpcy5oaXN0b3J5fSBjaGlsZHJlbj17dGhpcy5wcm9wcy5jaGlsZHJlbn0gLz47XG4gIH1cbn1cblxuaWYgKF9fREVWX18pIHtcbiAgTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGluaXRpYWxJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgIHdhcm5pbmcoXG4gICAgICAhdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArXG4gICAgICAgIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIlxuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1lbW9yeVJvdXRlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuY2xhc3MgTGlmZWN5Y2xlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25VcGRhdGUpIHRoaXMucHJvcHMub25VcGRhdGUuY2FsbCh0aGlzLCB0aGlzLCBwcmV2UHJvcHMpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExpZmVjeWNsZTtcbiIsImltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSBcInBhdGgtdG8tcmVnZXhwXCI7XG5cbmNvbnN0IGNhY2hlID0ge307XG5jb25zdCBjYWNoZUxpbWl0ID0gMTAwMDA7XG5sZXQgY2FjaGVDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgsIG9wdGlvbnMpIHtcbiAgY29uc3QgY2FjaGVLZXkgPSBgJHtvcHRpb25zLmVuZH0ke29wdGlvbnMuc3RyaWN0fSR7b3B0aW9ucy5zZW5zaXRpdmV9YDtcbiAgY29uc3QgcGF0aENhY2hlID0gY2FjaGVbY2FjaGVLZXldIHx8IChjYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKHBhdGhDYWNoZVtwYXRoXSkgcmV0dXJuIHBhdGhDYWNoZVtwYXRoXTtcblxuICBjb25zdCBrZXlzID0gW107XG4gIGNvbnN0IHJlZ2V4cCA9IHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcbiAgY29uc3QgcmVzdWx0ID0geyByZWdleHAsIGtleXMgfTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBwYXRoQ2FjaGVbcGF0aF0gPSByZXN1bHQ7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGguXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHsgcGF0aDogb3B0aW9ucyB9O1xuICB9XG5cbiAgY29uc3QgeyBwYXRoLCBleGFjdCA9IGZhbHNlLCBzdHJpY3QgPSBmYWxzZSwgc2Vuc2l0aXZlID0gZmFsc2UgfSA9IG9wdGlvbnM7XG5cbiAgY29uc3QgcGF0aHMgPSBbXS5jb25jYXQocGF0aCk7XG5cbiAgcmV0dXJuIHBhdGhzLnJlZHVjZSgobWF0Y2hlZCwgcGF0aCkgPT4ge1xuICAgIGlmICghcGF0aCAmJiBwYXRoICE9PSBcIlwiKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG5cbiAgICBjb25zdCB7IHJlZ2V4cCwga2V5cyB9ID0gY29tcGlsZVBhdGgocGF0aCwge1xuICAgICAgZW5kOiBleGFjdCxcbiAgICAgIHN0cmljdCxcbiAgICAgIHNlbnNpdGl2ZVxuICAgIH0pO1xuICAgIGNvbnN0IG1hdGNoID0gcmVnZXhwLmV4ZWMocGF0aG5hbWUpO1xuXG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cbiAgICBjb25zdCBbdXJsLCAuLi52YWx1ZXNdID0gbWF0Y2g7XG4gICAgY29uc3QgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG5cbiAgICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbiAgICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgICAgaXNFeGFjdCwgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgICBwYXJhbXM6IGtleXMucmVkdWNlKChtZW1vLCBrZXksIGluZGV4KSA9PiB7XG4gICAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCB7fSlcbiAgICB9O1xuICB9LCBudWxsKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hQYXRoO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlIH0gZnJvbSBcInJlYWN0LWlzXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJ0aW55LWludmFyaWFudFwiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInRpbnktd2FybmluZ1wiO1xuXG5pbXBvcnQgUm91dGVyQ29udGV4dCBmcm9tIFwiLi9Sb3V0ZXJDb250ZXh0LmpzXCI7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gXCIuL21hdGNoUGF0aC5qc1wiO1xuXG5mdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgcGF0aCkge1xuICBjb25zdCB2YWx1ZSA9IGNoaWxkcmVuKHByb3BzKTtcblxuICB3YXJuaW5nKFxuICAgIHZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgXCJZb3UgcmV0dXJuZWQgYHVuZGVmaW5lZGAgZnJvbSB0aGUgYGNoaWxkcmVuYCBmdW5jdGlvbiBvZiBcIiArXG4gICAgICBgPFJvdXRlJHtwYXRoID8gYCBwYXRoPVwiJHtwYXRofVwiYCA6IFwiXCJ9PiwgYnV0IHlvdSBgICtcbiAgICAgIFwic2hvdWxkIGhhdmUgcmV0dXJuZWQgYSBSZWFjdCBlbGVtZW50IG9yIGBudWxsYFwiXG4gICk7XG5cbiAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuY2xhc3MgUm91dGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICB7Y29udGV4dCA9PiB7XG4gICAgICAgICAgaW52YXJpYW50KGNvbnRleHQsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgICAgICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgICAgICAgY29uc3QgbWF0Y2ggPSB0aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2hcbiAgICAgICAgICAgID8gdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoIC8vIDxTd2l0Y2g+IGFscmVhZHkgY29tcHV0ZWQgdGhlIG1hdGNoIGZvciB1c1xuICAgICAgICAgICAgOiB0aGlzLnByb3BzLnBhdGhcbiAgICAgICAgICAgID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCB0aGlzLnByb3BzKVxuICAgICAgICAgICAgOiBjb250ZXh0Lm1hdGNoO1xuXG4gICAgICAgICAgY29uc3QgcHJvcHMgPSB7IC4uLmNvbnRleHQsIGxvY2F0aW9uLCBtYXRjaCB9O1xuXG4gICAgICAgICAgbGV0IHsgY2hpbGRyZW4sIGNvbXBvbmVudCwgcmVuZGVyIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICAgICAgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgICAgICAvLyBkZWZhdWx0LCBzbyB1c2UgbnVsbCBpZiB0aGF0J3MgdGhlIGNhc2UuXG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Um91dGVyQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17cHJvcHN9PlxuICAgICAgICAgICAgICB7cHJvcHMubWF0Y2hcbiAgICAgICAgICAgICAgICA/IGNoaWxkcmVuXG4gICAgICAgICAgICAgICAgICA/IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICAgICAgICAgID8gX19ERVZfX1xuICAgICAgICAgICAgICAgICAgICAgID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgdGhpcy5wcm9wcy5wYXRoKVxuICAgICAgICAgICAgICAgICAgICAgIDogY2hpbGRyZW4ocHJvcHMpXG4gICAgICAgICAgICAgICAgICAgIDogY2hpbGRyZW5cbiAgICAgICAgICAgICAgICAgIDogY29tcG9uZW50XG4gICAgICAgICAgICAgICAgICA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcylcbiAgICAgICAgICAgICAgICAgIDogcmVuZGVyXG4gICAgICAgICAgICAgICAgICA/IHJlbmRlcihwcm9wcylcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICAgIDogdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgICAgICA/IF9fREVWX19cbiAgICAgICAgICAgICAgICAgID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgdGhpcy5wcm9wcy5wYXRoKVxuICAgICAgICAgICAgICAgICAgOiBjaGlsZHJlbihwcm9wcylcbiAgICAgICAgICAgICAgICA6IG51bGx9XG4gICAgICAgICAgICA8L1JvdXRlckNvbnRleHQuUHJvdmlkZXI+XG4gICAgICAgICAgKTtcbiAgICAgICAgfX1cbiAgICAgIDwvUm91dGVyQ29udGV4dC5Db25zdW1lcj5cbiAgICApO1xuICB9XG59XG5cbmlmIChfX0RFVl9fKSB7XG4gIFJvdXRlLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gICAgY29tcG9uZW50OiAocHJvcHMsIHByb3BOYW1lKSA9PiB7XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdICYmICFpc1ZhbGlkRWxlbWVudFR5cGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAgIGBJbnZhbGlkIHByb3AgJ2NvbXBvbmVudCcgc3VwcGxpZWQgdG8gJ1JvdXRlJzogdGhlIHByb3AgaXMgbm90IGEgdmFsaWQgUmVhY3QgY29tcG9uZW50YFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBhdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpXG4gICAgXSksXG4gICAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2xcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbigpIHtcbiAgICB3YXJuaW5nKFxuICAgICAgIShcbiAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlbiAmJlxuICAgICAgICAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmXG4gICAgICAgIHRoaXMucHJvcHMuY29tcG9uZW50XG4gICAgICApLFxuICAgICAgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiXG4gICAgKTtcblxuICAgIHdhcm5pbmcoXG4gICAgICAhKFxuICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuICYmXG4gICAgICAgICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiZcbiAgICAgICAgdGhpcy5wcm9wcy5yZW5kZXJcbiAgICAgICksXG4gICAgICBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCJcbiAgICApO1xuXG4gICAgd2FybmluZyhcbiAgICAgICEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLFxuICAgICAgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSByZW5kZXI+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIlxuICAgICk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uKHByZXZQcm9wcykge1xuICAgIHdhcm5pbmcoXG4gICAgICAhKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksXG4gICAgICAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLidcbiAgICApO1xuXG4gICAgd2FybmluZyhcbiAgICAgICEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSxcbiAgICAgICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nXG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUm91dGU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgY3JlYXRlUGF0aCB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJ0aW55LWludmFyaWFudFwiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInRpbnktd2FybmluZ1wiO1xuXG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlci5qc1wiO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiID8gcGF0aCA6IFwiL1wiICsgcGF0aDtcbn1cblxuZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4ge1xuICAgIC4uLmxvY2F0aW9uLFxuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIGNvbnN0IGJhc2UgPSBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpO1xuXG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5sb2NhdGlvbixcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59XG5cbmZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cbmNsYXNzIFN0YXRpY1JvdXRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIG5hdmlnYXRlVG8obG9jYXRpb24sIGFjdGlvbikge1xuICAgIGNvbnN0IHsgYmFzZW5hbWUgPSBcIlwiLCBjb250ZXh0ID0ge30gfSA9IHRoaXMucHJvcHM7XG4gICAgY29udGV4dC5hY3Rpb24gPSBhY3Rpb247XG4gICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICB9XG5cbiAgaGFuZGxlUHVzaCA9IGxvY2F0aW9uID0+IHRoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICBoYW5kbGVSZXBsYWNlID0gbG9jYXRpb24gPT4gdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlJFUExBQ0VcIik7XG4gIGhhbmRsZUxpc3RlbiA9ICgpID0+IG5vb3A7XG4gIGhhbmRsZUJsb2NrID0gKCkgPT4gbm9vcDtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBiYXNlbmFtZSA9IFwiXCIsIGNvbnRleHQgPSB7fSwgbG9jYXRpb24gPSBcIi9cIiwgLi4ucmVzdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGhpc3RvcnkgPSB7XG4gICAgICBjcmVhdGVIcmVmOiBwYXRoID0+IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSksXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuXG4gICAgcmV0dXJuIDxSb3V0ZXIgey4uLnJlc3R9IGhpc3Rvcnk9e2hpc3Rvcnl9IHN0YXRpY0NvbnRleHQ9e2NvbnRleHR9IC8+O1xuICB9XG59XG5cbmlmIChfX0RFVl9fKSB7XG4gIFN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgIHdhcm5pbmcoXG4gICAgICAhdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArXG4gICAgICAgIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIlxuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXRpY1JvdXRlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwidGlueS13YXJuaW5nXCI7XG5cbmltcG9ydCBSb3V0ZXJDb250ZXh0IGZyb20gXCIuL1JvdXRlckNvbnRleHQuanNcIjtcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoLmpzXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cbmNsYXNzIFN3aXRjaCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFJvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICAgICAgIHtjb250ZXh0ID0+IHtcbiAgICAgICAgICBpbnZhcmlhbnQoY29udGV4dCwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgICAgICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XG5cbiAgICAgICAgICBsZXQgZWxlbWVudCwgbWF0Y2g7XG5cbiAgICAgICAgICAvLyBXZSB1c2UgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCBpbnN0ZWFkIG9mIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKS5maW5kKClcbiAgICAgICAgICAvLyBoZXJlIGJlY2F1c2UgdG9BcnJheSBhZGRzIGtleXMgdG8gYWxsIGNoaWxkIGVsZW1lbnRzIGFuZCB3ZSBkbyBub3Qgd2FudFxuICAgICAgICAgIC8vIHRvIHRyaWdnZXIgYW4gdW5tb3VudC9yZW1vdW50IGZvciB0d28gPFJvdXRlPnMgdGhhdCByZW5kZXIgdGhlIHNhbWVcbiAgICAgICAgICAvLyBjb21wb25lbnQgYXQgZGlmZmVyZW50IFVSTHMuXG4gICAgICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCh0aGlzLnByb3BzLmNoaWxkcmVuLCBjaGlsZCA9PiB7XG4gICAgICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICAgICAgZWxlbWVudCA9IGNoaWxkO1xuXG4gICAgICAgICAgICAgIGNvbnN0IHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG5cbiAgICAgICAgICAgICAgbWF0Y2ggPSBwYXRoXG4gICAgICAgICAgICAgICAgPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHsgLi4uY2hpbGQucHJvcHMsIHBhdGggfSlcbiAgICAgICAgICAgICAgICA6IGNvbnRleHQubWF0Y2g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gbWF0Y2hcbiAgICAgICAgICAgID8gUmVhY3QuY2xvbmVFbGVtZW50KGVsZW1lbnQsIHsgbG9jYXRpb24sIGNvbXB1dGVkTWF0Y2g6IG1hdGNoIH0pXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIH19XG4gICAgICA8L1JvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICAgKTtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24ocHJldlByb3BzKSB7XG4gICAgd2FybmluZyhcbiAgICAgICEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSxcbiAgICAgICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLidcbiAgICApO1xuXG4gICAgd2FybmluZyhcbiAgICAgICEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSxcbiAgICAgICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJ1xuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN3aXRjaDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5cbmltcG9ydCBDb250ZXh0IGZyb20gXCIuL1JvdXRlckNvbnRleHQuanNcIjtcbmltcG9ydCBIaXN0b3J5Q29udGV4dCBmcm9tIFwiLi9IaXN0b3J5Q29udGV4dC5qc1wiO1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tIFwiLi9tYXRjaFBhdGguanNcIjtcblxuY29uc3QgdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQ7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VIaXN0b3J5KCkge1xuICBpZiAoX19ERVZfXykge1xuICAgIGludmFyaWFudChcbiAgICAgIHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIsXG4gICAgICBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChIaXN0b3J5Q29udGV4dCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiLFxuICAgICAgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlTG9jYXRpb24oKVwiXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KENvbnRleHQpLmxvY2F0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBpZiAoX19ERVZfXykge1xuICAgIGludmFyaWFudChcbiAgICAgIHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIsXG4gICAgICBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VQYXJhbXMoKVwiXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IG1hdGNoID0gdXNlQ29udGV4dChDb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2gucGFyYW1zIDoge307XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VSb3V0ZU1hdGNoKHBhdGgpIHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiLFxuICAgICAgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUm91dGVNYXRjaCgpXCJcbiAgICApO1xuICB9XG5cbiAgY29uc3QgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBjb25zdCBtYXRjaCA9IHVzZUNvbnRleHQoQ29udGV4dCkubWF0Y2g7XG5cbiAgcmV0dXJuIHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHBhdGgpIDogbWF0Y2g7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSBhcyBjcmVhdGVIaXN0b3J5IH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ0aW55LXdhcm5pbmdcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgSFRNTDUgaGlzdG9yeS5cbiAqL1xuY2xhc3MgQnJvd3NlclJvdXRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KHRoaXMucHJvcHMpO1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gPFJvdXRlciBoaXN0b3J5PXt0aGlzLmhpc3Rvcnl9IGNoaWxkcmVuPXt0aGlzLnByb3BzLmNoaWxkcmVufSAvPjtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBCcm93c2VyUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXJcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgIHdhcm5pbmcoXG4gICAgICAhdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgK1xuICAgICAgICBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiXG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQnJvd3NlclJvdXRlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbmltcG9ydCB7IGNyZWF0ZUhhc2hIaXN0b3J5IGFzIGNyZWF0ZUhpc3RvcnkgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInRpbnktd2FybmluZ1wiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuY2xhc3MgSGFzaFJvdXRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KHRoaXMucHJvcHMpO1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gPFJvdXRlciBoaXN0b3J5PXt0aGlzLmhpc3Rvcnl9IGNoaWxkcmVuPXt0aGlzLnByb3BzLmNoaWxkcmVufSAvPjtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBIYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbXCJoYXNoYmFuZ1wiLCBcIm5vc2xhc2hcIiwgXCJzbGFzaFwiXSlcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgIHdhcm5pbmcoXG4gICAgICAhdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgK1xuICAgICAgICBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiXG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgSGFzaFJvdXRlcjtcbiIsImltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSBcImhpc3RvcnlcIjtcblxuZXhwb3J0IGNvbnN0IHJlc29sdmVUb0xvY2F0aW9uID0gKHRvLCBjdXJyZW50TG9jYXRpb24pID0+XG4gIHR5cGVvZiB0byA9PT0gXCJmdW5jdGlvblwiID8gdG8oY3VycmVudExvY2F0aW9uKSA6IHRvO1xuXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplVG9Mb2NhdGlvbiA9ICh0bywgY3VycmVudExvY2F0aW9uKSA9PiB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCJcbiAgICA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBjdXJyZW50TG9jYXRpb24pXG4gICAgOiB0bztcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBfX1JvdXRlckNvbnRleHQgYXMgUm91dGVyQ29udGV4dCB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5pbXBvcnQge1xuICByZXNvbHZlVG9Mb2NhdGlvbixcbiAgbm9ybWFsaXplVG9Mb2NhdGlvblxufSBmcm9tIFwiLi91dGlscy9sb2NhdGlvblV0aWxzLmpzXCI7XG5cbi8vIFJlYWN0IDE1IGNvbXBhdFxuY29uc3QgZm9yd2FyZFJlZlNoaW0gPSBDID0+IEM7XG5sZXQgeyBmb3J3YXJkUmVmIH0gPSBSZWFjdDtcbmlmICh0eXBlb2YgZm9yd2FyZFJlZiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmID0gZm9yd2FyZFJlZlNoaW07XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbmNvbnN0IExpbmtBbmNob3IgPSBmb3J3YXJkUmVmKFxuICAoXG4gICAge1xuICAgICAgaW5uZXJSZWYsIC8vIFRPRE86IGRlcHJlY2F0ZVxuICAgICAgbmF2aWdhdGUsXG4gICAgICBvbkNsaWNrLFxuICAgICAgLi4ucmVzdFxuICAgIH0sXG4gICAgZm9yd2FyZGVkUmVmXG4gICkgPT4ge1xuICAgIGNvbnN0IHsgdGFyZ2V0IH0gPSByZXN0O1xuXG4gICAgbGV0IHByb3BzID0ge1xuICAgICAgLi4ucmVzdCxcbiAgICAgIG9uQ2xpY2s6IGV2ZW50ID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAob25DbGljaykgb25DbGljayhldmVudCk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB0aHJvdyBleDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgICAgICghdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbmF2aWdhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBSZWFjdCAxNSBjb21wYXRcbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMucmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudCAqL1xuICAgIHJldHVybiA8YSB7Li4ucHJvcHN9IC8+O1xuICB9XG4pO1xuXG5pZiAoX19ERVZfXykge1xuICBMaW5rQW5jaG9yLmRpc3BsYXlOYW1lID0gXCJMaW5rQW5jaG9yXCI7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5jb25zdCBMaW5rID0gZm9yd2FyZFJlZihcbiAgKFxuICAgIHtcbiAgICAgIGNvbXBvbmVudCA9IExpbmtBbmNob3IsXG4gICAgICByZXBsYWNlLFxuICAgICAgdG8sXG4gICAgICBpbm5lclJlZiwgLy8gVE9ETzogZGVwcmVjYXRlXG4gICAgICAuLi5yZXN0XG4gICAgfSxcbiAgICBmb3J3YXJkZWRSZWZcbiAgKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICB7Y29udGV4dCA9PiB7XG4gICAgICAgICAgaW52YXJpYW50KGNvbnRleHQsIFwiWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICAgICAgICBjb25zdCB7IGhpc3RvcnkgfSA9IGNvbnRleHQ7XG5cbiAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IG5vcm1hbGl6ZVRvTG9jYXRpb24oXG4gICAgICAgICAgICByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbiksXG4gICAgICAgICAgICBjb250ZXh0LmxvY2F0aW9uXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGNvbnN0IGhyZWYgPSBsb2NhdGlvbiA/IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbikgOiBcIlwiO1xuICAgICAgICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgICAgIGhyZWYsXG4gICAgICAgICAgICBuYXZpZ2F0ZSgpIHtcbiAgICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbik7XG4gICAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IHJlcGxhY2UgPyBoaXN0b3J5LnJlcGxhY2UgOiBoaXN0b3J5LnB1c2g7XG5cbiAgICAgICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gUmVhY3QgMTUgY29tcGF0XG4gICAgICAgICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICAgICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcyk7XG4gICAgICAgIH19XG4gICAgICA8L1JvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICAgKTtcbiAgfVxuKTtcblxuaWYgKF9fREVWX18pIHtcbiAgY29uc3QgdG9UeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICBQcm9wVHlwZXMub2JqZWN0LFxuICAgIFByb3BUeXBlcy5mdW5jXG4gIF0pO1xuICBjb25zdCByZWZUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICBQcm9wVHlwZXMuc2hhcGUoeyBjdXJyZW50OiBQcm9wVHlwZXMuYW55IH0pXG4gIF0pO1xuXG4gIExpbmsuZGlzcGxheU5hbWUgPSBcIkxpbmtcIjtcblxuICBMaW5rLnByb3BUeXBlcyA9IHtcbiAgICBpbm5lclJlZjogcmVmVHlwZSxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IHRvVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IExpbms7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBfX1JvdXRlckNvbnRleHQgYXMgUm91dGVyQ29udGV4dCwgbWF0Y2hQYXRoIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwidGlueS1pbnZhcmlhbnRcIjtcbmltcG9ydCBMaW5rIGZyb20gXCIuL0xpbmsuanNcIjtcbmltcG9ydCB7XG4gIHJlc29sdmVUb0xvY2F0aW9uLFxuICBub3JtYWxpemVUb0xvY2F0aW9uXG59IGZyb20gXCIuL3V0aWxzL2xvY2F0aW9uVXRpbHMuanNcIjtcblxuLy8gUmVhY3QgMTUgY29tcGF0XG5jb25zdCBmb3J3YXJkUmVmU2hpbSA9IEMgPT4gQztcbmxldCB7IGZvcndhcmRSZWYgfSA9IFJlYWN0O1xuaWYgKHR5cGVvZiBmb3J3YXJkUmVmID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYgPSBmb3J3YXJkUmVmU2hpbTtcbn1cblxuZnVuY3Rpb24gam9pbkNsYXNzbmFtZXMoLi4uY2xhc3NuYW1lcykge1xuICByZXR1cm4gY2xhc3NuYW1lcy5maWx0ZXIoaSA9PiBpKS5qb2luKFwiIFwiKTtcbn1cblxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuY29uc3QgTmF2TGluayA9IGZvcndhcmRSZWYoXG4gIChcbiAgICB7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudCA9IFwicGFnZVwiLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gXCJhY3RpdmVcIixcbiAgICAgIGFjdGl2ZVN0eWxlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVQcm9wLFxuICAgICAgZXhhY3QsXG4gICAgICBpc0FjdGl2ZTogaXNBY3RpdmVQcm9wLFxuICAgICAgbG9jYXRpb246IGxvY2F0aW9uUHJvcCxcbiAgICAgIHNlbnNpdGl2ZSxcbiAgICAgIHN0cmljdCxcbiAgICAgIHN0eWxlOiBzdHlsZVByb3AsXG4gICAgICB0byxcbiAgICAgIGlubmVyUmVmLCAvLyBUT0RPOiBkZXByZWNhdGVcbiAgICAgIC4uLnJlc3RcbiAgICB9LFxuICAgIGZvcndhcmRlZFJlZlxuICApID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPFJvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICAgICAgIHtjb250ZXh0ID0+IHtcbiAgICAgICAgICBpbnZhcmlhbnQoY29udGV4dCwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPE5hdkxpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgICAgICAgIGNvbnN0IGN1cnJlbnRMb2NhdGlvbiA9IGxvY2F0aW9uUHJvcCB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgICAgICAgIGNvbnN0IHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKFxuICAgICAgICAgICAgcmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbiksXG4gICAgICAgICAgICBjdXJyZW50TG9jYXRpb25cbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IHsgcGF0aG5hbWU6IHBhdGggfSA9IHRvTG9jYXRpb247XG4gICAgICAgICAgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcbiAgICAgICAgICBjb25zdCBlc2NhcGVkUGF0aCA9XG4gICAgICAgICAgICBwYXRoICYmIHBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuXG4gICAgICAgICAgY29uc3QgbWF0Y2ggPSBlc2NhcGVkUGF0aFxuICAgICAgICAgICAgPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICAgICAgICAgICAgcGF0aDogZXNjYXBlZFBhdGgsXG4gICAgICAgICAgICAgICAgZXhhY3QsXG4gICAgICAgICAgICAgICAgc2Vuc2l0aXZlLFxuICAgICAgICAgICAgICAgIHN0cmljdFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgIGNvbnN0IGlzQWN0aXZlID0gISEoaXNBY3RpdmVQcm9wXG4gICAgICAgICAgICA/IGlzQWN0aXZlUHJvcChtYXRjaCwgY3VycmVudExvY2F0aW9uKVxuICAgICAgICAgICAgOiBtYXRjaCk7XG5cbiAgICAgICAgICBjb25zdCBjbGFzc05hbWUgPSBpc0FjdGl2ZVxuICAgICAgICAgICAgPyBqb2luQ2xhc3NuYW1lcyhjbGFzc05hbWVQcm9wLCBhY3RpdmVDbGFzc05hbWUpXG4gICAgICAgICAgICA6IGNsYXNzTmFtZVByb3A7XG4gICAgICAgICAgY29uc3Qgc3R5bGUgPSBpc0FjdGl2ZSA/IHsgLi4uc3R5bGVQcm9wLCAuLi5hY3RpdmVTdHlsZSB9IDogc3R5bGVQcm9wO1xuXG4gICAgICAgICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAgICAgICBcImFyaWEtY3VycmVudFwiOiAoaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnQpIHx8IG51bGwsXG4gICAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgICAgICBzdHlsZSxcbiAgICAgICAgICAgIHRvOiB0b0xvY2F0aW9uLFxuICAgICAgICAgICAgLi4ucmVzdFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICAvLyBSZWFjdCAxNSBjb21wYXRcbiAgICAgICAgICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICAgICAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gPExpbmsgey4uLnByb3BzfSAvPjtcbiAgICAgICAgfX1cbiAgICAgIDwvUm91dGVyQ29udGV4dC5Db25zdW1lcj5cbiAgICApO1xuICB9XG4pO1xuXG5pZiAoX19ERVZfXykge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG5cbiAgY29uc3QgYXJpYUN1cnJlbnRUeXBlID0gUHJvcFR5cGVzLm9uZU9mKFtcbiAgICBcInBhZ2VcIixcbiAgICBcInN0ZXBcIixcbiAgICBcImxvY2F0aW9uXCIsXG4gICAgXCJkYXRlXCIsXG4gICAgXCJ0aW1lXCIsXG4gICAgXCJ0cnVlXCJcbiAgXSk7XG5cbiAgTmF2TGluay5wcm9wVHlwZXMgPSB7XG4gICAgLi4uTGluay5wcm9wVHlwZXMsXG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRUeXBlLFxuICAgIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTmF2TGluaztcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIFJlYWN0UmVkdXhDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFJlYWN0UmVkdXhDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1JlYWN0UmVkdXgnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWFjdFJlZHV4Q29udGV4dDsiLCIvLyBEZWZhdWx0IHRvIGEgZHVtbXkgXCJiYXRjaFwiIGltcGxlbWVudGF0aW9uIHRoYXQganVzdCBydW5zIHRoZSBjYWxsYmFja1xuZnVuY3Rpb24gZGVmYXVsdE5vb3BCYXRjaChjYWxsYmFjaykge1xuICBjYWxsYmFjaygpO1xufVxuXG52YXIgYmF0Y2ggPSBkZWZhdWx0Tm9vcEJhdGNoOyAvLyBBbGxvdyBpbmplY3RpbmcgYW5vdGhlciBiYXRjaGluZyBmdW5jdGlvbiBsYXRlclxuXG5leHBvcnQgdmFyIHNldEJhdGNoID0gZnVuY3Rpb24gc2V0QmF0Y2gobmV3QmF0Y2gpIHtcbiAgcmV0dXJuIGJhdGNoID0gbmV3QmF0Y2g7XG59OyAvLyBTdXBwbHkgYSBnZXR0ZXIganVzdCB0byBza2lwIGRlYWxpbmcgd2l0aCBFU00gYmluZGluZ3NcblxuZXhwb3J0IHZhciBnZXRCYXRjaCA9IGZ1bmN0aW9uIGdldEJhdGNoKCkge1xuICByZXR1cm4gYmF0Y2g7XG59OyIsImltcG9ydCB7IGdldEJhdGNoIH0gZnJvbSAnLi9iYXRjaCc7IC8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIHZhciBiYXRjaCA9IGdldEJhdGNoKCk7XG4gIHZhciBmaXJzdCA9IG51bGw7XG4gIHZhciBsYXN0ID0gbnVsbDtcbiAgcmV0dXJuIHtcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBmaXJzdCA9IG51bGw7XG4gICAgICBsYXN0ID0gbnVsbDtcbiAgICB9LFxuICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgICBsaXN0ZW5lci5jYWxsYmFjaygpO1xuICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBbXTtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGZpcnN0O1xuXG4gICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsaXN0ZW5lcnM7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsYXN0ID0ge1xuICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgIHByZXY6IGxhc3RcbiAgICAgIH07XG5cbiAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlyc3QgPSBsaXN0ZW5lcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBmaXJzdCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAobGlzdGVuZXIubmV4dCkge1xuICAgICAgICAgIGxpc3RlbmVyLm5leHQucHJldiA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdCA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlyc3QgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFN1YnNjcmlwdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdWJzY3JpcHRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIF9wcm90by5ub3RpZnlOZXN0ZWRTdWJzID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlQ2hhbmdlV3JhcHBlciA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHRoaXMub25TdGF0ZUNoYW5nZSkge1xuICAgICAgdGhpcy5vblN0YXRlQ2hhbmdlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgX3Byb3RvLnRyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnBhcmVudFN1YiA/IHRoaXMucGFyZW50U3ViLmFkZE5lc3RlZFN1Yih0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIpIDogdGhpcy5zdG9yZS5zdWJzY3JpYmUodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by50cnlVbnN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdWJzY3JpcHRpb247XG59KCk7XG5cbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7IC8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCB0byBlbnN1cmUgdGhlIHN0b3JlXG4vLyBzdWJzY3JpcHRpb24gY2FsbGJhY2sgYWx3YXlzIGhhcyB0aGUgc2VsZWN0b3IgZnJvbSB0aGUgbGF0ZXN0IHJlbmRlciBjb21taXRcbi8vIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBoYXBwZW4gYmV0d2VlbiByZW5kZXIgYW5kIHRoZSBlZmZlY3QsXG4vLyB3aGljaCBtYXkgY2F1c2UgbWlzc2VkIHVwZGF0ZXM7IHdlIGFsc28gbXVzdCBlbnN1cmUgdGhlIHN0b3JlIHN1YnNjcmlwdGlvblxuLy8gaXMgY3JlYXRlZCBzeW5jaHJvbm91c2x5LCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IG9jY3VyIGJlZm9yZSB0aGVcbi8vIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGFuZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgbWF5IGJlIG9ic2VydmVkXG5cbmV4cG9ydCB2YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuXG5mdW5jdGlvbiBQcm92aWRlcihfcmVmKSB7XG4gIHZhciBzdG9yZSA9IF9yZWYuc3RvcmUsXG4gICAgICBjb250ZXh0ID0gX3JlZi5jb250ZXh0LFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgY29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgfTtcbiAgfSwgW3N0b3JlXSk7XG4gIHZhciBwcmV2aW91c1N0YXRlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHN0b3JlLmdldFN0YXRlKCk7XG4gIH0sIFtzdG9yZV0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbjtcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG5cbiAgICBpZiAocHJldmlvdXNTdGF0ZSAhPT0gc3RvcmUuZ2V0U3RhdGUoKSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG4gICAgfTtcbiAgfSwgW2NvbnRleHRWYWx1ZSwgcHJldmlvdXNTdGF0ZV0pO1xuICB2YXIgQ29udGV4dCA9IGNvbnRleHQgfHwgUmVhY3RSZWR1eENvbnRleHQ7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICB9LCBjaGlsZHJlbik7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICBzdG9yZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KSxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VSZWYsIHVzZVJlZHVjZXIgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUsIGlzQ29udGV4dENvbnN1bWVyIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnOyAvLyBEZWZpbmUgc29tZSBjb25zdGFudCBhcnJheXMganVzdCB0byBhdm9pZCByZS1jcmVhdGluZyB0aGVzZVxuXG52YXIgRU1QVFlfQVJSQVkgPSBbXTtcbnZhciBOT19TVUJTQ1JJUFRJT05fQVJSQVkgPSBbbnVsbCwgbnVsbF07XG5cbnZhciBzdHJpbmdpZnlDb21wb25lbnQgPSBmdW5jdGlvbiBzdHJpbmdpZnlDb21wb25lbnQoQ29tcCkge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShDb21wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFN0cmluZyhDb21wKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcbiAgdmFyIHVwZGF0ZUNvdW50ID0gc3RhdGVbMV07XG4gIHJldHVybiBbYWN0aW9uLnBheWxvYWQsIHVwZGF0ZUNvdW50ICsgMV07XG59XG5cbmZ1bmN0aW9uIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhlZmZlY3RGdW5jLCBlZmZlY3RBcmdzLCBkZXBlbmRlbmNpZXMpIHtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGVmZmVjdEZ1bmMuYXBwbHkodm9pZCAwLCBlZmZlY3RBcmdzKTtcbiAgfSwgZGVwZW5kZW5jaWVzKTtcbn1cblxuZnVuY3Rpb24gY2FwdHVyZVdyYXBwZXJQcm9wcyhsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIHdyYXBwZXJQcm9wcywgYWN0dWFsQ2hpbGRQcm9wcywgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3Vicykge1xuICAvLyBXZSB3YW50IHRvIGNhcHR1cmUgdGhlIHdyYXBwZXIgcHJvcHMgYW5kIGNoaWxkIHByb3BzIHdlIHVzZWQgZm9yIGxhdGVyIGNvbXBhcmlzb25zXG4gIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCA9IHdyYXBwZXJQcm9wcztcbiAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IGFjdHVhbENoaWxkUHJvcHM7XG4gIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSBmYWxzZTsgLy8gSWYgdGhlIHJlbmRlciB3YXMgZnJvbSBhIHN0b3JlIHVwZGF0ZSwgY2xlYXIgb3V0IHRoYXQgcmVmZXJlbmNlIGFuZCBjYXNjYWRlIHRoZSBzdWJzY3JpYmVyIHVwZGF0ZVxuXG4gIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQpIHtcbiAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBudWxsO1xuICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdWJzY3JpYmVVcGRhdGVzKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yLCBsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2gpIHtcbiAgLy8gSWYgd2UncmUgbm90IHN1YnNjcmliZWQgdG8gdGhlIHN0b3JlLCBub3RoaW5nIHRvIGRvIGhlcmVcbiAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjsgLy8gQ2FwdHVyZSB2YWx1ZXMgZm9yIGNoZWNraW5nIGlmIGFuZCB3aGVuIHRoaXMgY29tcG9uZW50IHVubW91bnRzXG5cbiAgdmFyIGRpZFVuc3Vic2NyaWJlID0gZmFsc2U7XG4gIHZhciBsYXN0VGhyb3duRXJyb3IgPSBudWxsOyAvLyBXZSdsbCBydW4gdGhpcyBjYWxsYmFjayBldmVyeSB0aW1lIGEgc3RvcmUgc3Vic2NyaXB0aW9uIHVwZGF0ZSBwcm9wYWdhdGVzIHRvIHRoaXMgY29tcG9uZW50XG5cbiAgdmFyIGNoZWNrRm9yVXBkYXRlcyA9IGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICBpZiAoZGlkVW5zdWJzY3JpYmUpIHtcbiAgICAgIC8vIERvbid0IHJ1biBzdGFsZSBsaXN0ZW5lcnMuXG4gICAgICAvLyBSZWR1eCBkb2Vzbid0IGd1YXJhbnRlZSB1bnN1YnNjcmlwdGlvbnMgaGFwcGVuIHVudGlsIG5leHQgZGlzcGF0Y2guXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxhdGVzdFN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHZhciBuZXdDaGlsZFByb3BzLCBlcnJvcjtcblxuICAgIHRyeSB7XG4gICAgICAvLyBBY3R1YWxseSBydW4gdGhlIHNlbGVjdG9yIHdpdGggdGhlIG1vc3QgcmVjZW50IHN0b3JlIHN0YXRlIGFuZCB3cmFwcGVyIHByb3BzXG4gICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlXG4gICAgICBuZXdDaGlsZFByb3BzID0gY2hpbGRQcm9wc1NlbGVjdG9yKGxhdGVzdFN0b3JlU3RhdGUsIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZXJyb3IgPSBlO1xuICAgICAgbGFzdFRocm93bkVycm9yID0gZTtcbiAgICB9XG5cbiAgICBpZiAoIWVycm9yKSB7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBudWxsO1xuICAgIH0gLy8gSWYgdGhlIGNoaWxkIHByb3BzIGhhdmVuJ3QgY2hhbmdlZCwgbm90aGluZyB0byBkbyBoZXJlIC0gY2FzY2FkZSB0aGUgc3Vic2NyaXB0aW9uIHVwZGF0ZVxuXG5cbiAgICBpZiAobmV3Q2hpbGRQcm9wcyA9PT0gbGFzdENoaWxkUHJvcHMuY3VycmVudCkge1xuICAgICAgaWYgKCFyZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50KSB7XG4gICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2F2ZSByZWZlcmVuY2VzIHRvIHRoZSBuZXcgY2hpbGQgcHJvcHMuICBOb3RlIHRoYXQgd2UgdHJhY2sgdGhlIFwiY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGVcIlxuICAgICAgLy8gYXMgYSByZWYgaW5zdGVhZCBvZiBhIHVzZVN0YXRlL3VzZVJlZHVjZXIgYmVjYXVzZSB3ZSBuZWVkIGEgd2F5IHRvIGRldGVybWluZSBpZiB0aGF0IHZhbHVlIGhhc1xuICAgICAgLy8gYmVlbiBwcm9jZXNzZWQuICBJZiB0aGlzIHdlbnQgaW50byB1c2VTdGF0ZS91c2VSZWR1Y2VyLCB3ZSBjb3VsZG4ndCBjbGVhciBvdXQgdGhlIHZhbHVlIHdpdGhvdXRcbiAgICAgIC8vIGZvcmNpbmcgYW5vdGhlciByZS1yZW5kZXIsIHdoaWNoIHdlIGRvbid0IHdhbnQuXG4gICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gdHJ1ZTsgLy8gSWYgdGhlIGNoaWxkIHByb3BzIF9kaWRfIGNoYW5nZSAob3Igd2UgY2F1Z2h0IGFuIGVycm9yKSwgdGhpcyB3cmFwcGVyIGNvbXBvbmVudCBuZWVkcyB0byByZS1yZW5kZXJcblxuICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdTVE9SRV9VUERBVEVEJyxcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07IC8vIEFjdHVhbGx5IHN1YnNjcmliZSB0byB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IgKG9yIHN0b3JlKVxuXG5cbiAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTsgLy8gUHVsbCBkYXRhIGZyb20gdGhlIHN0b3JlIGFmdGVyIGZpcnN0IHJlbmRlciBpbiBjYXNlIHRoZSBzdG9yZSBoYXNcbiAgLy8gY2hhbmdlZCBzaW5jZSB3ZSBiZWdhbi5cblxuICBjaGVja0ZvclVwZGF0ZXMoKTtcblxuICB2YXIgdW5zdWJzY3JpYmVXcmFwcGVyID0gZnVuY3Rpb24gdW5zdWJzY3JpYmVXcmFwcGVyKCkge1xuICAgIGRpZFVuc3Vic2NyaWJlID0gdHJ1ZTtcbiAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG5cbiAgICBpZiAobGFzdFRocm93bkVycm9yKSB7XG4gICAgICAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgd2UgY2F1Z2h0IGFuIGVycm9yIGR1ZSB0byBhIGJhZCBtYXBTdGF0ZSBmdW5jdGlvbiwgYnV0IHRoZVxuICAgICAgLy8gcGFyZW50IHJlLXJlbmRlcmVkIHdpdGhvdXQgdGhpcyBjb21wb25lbnQgYW5kIHdlJ3JlIGFib3V0IHRvIHVubW91bnQuXG4gICAgICAvLyBUaGlzIHNob3VsZG4ndCBoYXBwZW4gYXMgbG9uZyBhcyB3ZSBkbyB0b3AtZG93biBzdWJzY3JpcHRpb25zIGNvcnJlY3RseSwgYnV0XG4gICAgICAvLyBpZiB3ZSBldmVyIGRvIHRob3NlIHdyb25nLCB0aGlzIHRocm93IHdpbGwgc3VyZmFjZSB0aGUgZXJyb3IgaW4gb3VyIHRlc3RzLlxuICAgICAgLy8gSW4gdGhhdCBjYXNlLCB0aHJvdyB0aGUgZXJyb3IgZnJvbSBoZXJlIHNvIGl0IGRvZXNuJ3QgZ2V0IGxvc3QuXG4gICAgICB0aHJvdyBsYXN0VGhyb3duRXJyb3I7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1bnN1YnNjcmliZVdyYXBwZXI7XG59XG5cbnZhciBpbml0U3RhdGVVcGRhdGVzID0gZnVuY3Rpb24gaW5pdFN0YXRlVXBkYXRlcygpIHtcbiAgcmV0dXJuIFtudWxsLCAwXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbm5lY3RBZHZhbmNlZChcbi8qXHJcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cclxuICBjb21wdXRlIG5ldyBwcm9wcyBmcm9tIHN0YXRlLCBwcm9wcywgYW5kIGRpc3BhdGNoLiBGb3IgZXhhbXBsZTpcclxuICAgICAgZXhwb3J0IGRlZmF1bHQgY29ubmVjdEFkdmFuY2VkKChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKHN0YXRlLCBwcm9wcykgPT4gKHtcclxuICAgICAgdGhpbmc6IHN0YXRlLnRoaW5nc1twcm9wcy50aGluZ0lkXSxcclxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxyXG4gICAgfSkpKFlvdXJDb21wb25lbnQpXHJcbiAgICBBY2Nlc3MgdG8gZGlzcGF0Y2ggaXMgcHJvdmlkZWQgdG8gdGhlIGZhY3Rvcnkgc28gc2VsZWN0b3JGYWN0b3JpZXMgY2FuIGJpbmQgYWN0aW9uQ3JlYXRvcnNcclxuICBvdXRzaWRlIG9mIHRoZWlyIHNlbGVjdG9yIGFzIGFuIG9wdGltaXphdGlvbi4gT3B0aW9ucyBwYXNzZWQgdG8gY29ubmVjdEFkdmFuY2VkIGFyZSBwYXNzZWQgdG9cclxuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxyXG4gICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcclxuICBwcm9wcy4gRG8gbm90IHVzZSBjb25uZWN0QWR2YW5jZWQgZGlyZWN0bHkgd2l0aG91dCBtZW1vaXppbmcgcmVzdWx0cyBiZXR3ZWVuIGNhbGxzIHRvIHlvdXJcclxuICBzZWxlY3Rvciwgb3RoZXJ3aXNlIHRoZSBDb25uZWN0IGNvbXBvbmVudCB3aWxsIHJlLXJlbmRlciBvbiBldmVyeSBzdGF0ZSBvciBwcm9wcyBjaGFuZ2UuXHJcbiovXG5zZWxlY3RvckZhY3RvcnksIC8vIG9wdGlvbnMgb2JqZWN0OlxuX3JlZikge1xuICBpZiAoX3JlZiA9PT0gdm9pZCAwKSB7XG4gICAgX3JlZiA9IHt9O1xuICB9XG5cbiAgdmFyIF9yZWYyID0gX3JlZixcbiAgICAgIF9yZWYyJGdldERpc3BsYXlOYW1lID0gX3JlZjIuZ2V0RGlzcGxheU5hbWUsXG4gICAgICBnZXREaXNwbGF5TmFtZSA9IF9yZWYyJGdldERpc3BsYXlOYW1lID09PSB2b2lkIDAgPyBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBcIkNvbm5lY3RBZHZhbmNlZChcIiArIG5hbWUgKyBcIilcIjtcbiAgfSA6IF9yZWYyJGdldERpc3BsYXlOYW1lLFxuICAgICAgX3JlZjIkbWV0aG9kTmFtZSA9IF9yZWYyLm1ldGhvZE5hbWUsXG4gICAgICBtZXRob2ROYW1lID0gX3JlZjIkbWV0aG9kTmFtZSA9PT0gdm9pZCAwID8gJ2Nvbm5lY3RBZHZhbmNlZCcgOiBfcmVmMiRtZXRob2ROYW1lLFxuICAgICAgX3JlZjIkcmVuZGVyQ291bnRQcm9wID0gX3JlZjIucmVuZGVyQ291bnRQcm9wLFxuICAgICAgcmVuZGVyQ291bnRQcm9wID0gX3JlZjIkcmVuZGVyQ291bnRQcm9wID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmMiRyZW5kZXJDb3VudFByb3AsXG4gICAgICBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPSBfcmVmMi5zaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMgPSBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMiRzaG91bGRIYW5kbGVTdGEsXG4gICAgICBfcmVmMiRzdG9yZUtleSA9IF9yZWYyLnN0b3JlS2V5LFxuICAgICAgc3RvcmVLZXkgPSBfcmVmMiRzdG9yZUtleSA9PT0gdm9pZCAwID8gJ3N0b3JlJyA6IF9yZWYyJHN0b3JlS2V5LFxuICAgICAgX3JlZjIkd2l0aFJlZiA9IF9yZWYyLndpdGhSZWYsXG4gICAgICB3aXRoUmVmID0gX3JlZjIkd2l0aFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiR3aXRoUmVmLFxuICAgICAgX3JlZjIkZm9yd2FyZFJlZiA9IF9yZWYyLmZvcndhcmRSZWYsXG4gICAgICBmb3J3YXJkUmVmID0gX3JlZjIkZm9yd2FyZFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRmb3J3YXJkUmVmLFxuICAgICAgX3JlZjIkY29udGV4dCA9IF9yZWYyLmNvbnRleHQsXG4gICAgICBjb250ZXh0ID0gX3JlZjIkY29udGV4dCA9PT0gdm9pZCAwID8gUmVhY3RSZWR1eENvbnRleHQgOiBfcmVmMiRjb250ZXh0LFxuICAgICAgY29ubmVjdE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiZ2V0RGlzcGxheU5hbWVcIiwgXCJtZXRob2ROYW1lXCIsIFwicmVuZGVyQ291bnRQcm9wXCIsIFwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzXCIsIFwic3RvcmVLZXlcIiwgXCJ3aXRoUmVmXCIsIFwiZm9yd2FyZFJlZlwiLCBcImNvbnRleHRcIl0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHJlbmRlckNvdW50UHJvcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZW5kZXJDb3VudFByb3AgaXMgcmVtb3ZlZC4gcmVuZGVyIGNvdW50aW5nIGlzIGJ1aWx0IGludG8gdGhlIGxhdGVzdCBSZWFjdCBEZXYgVG9vbHMgcHJvZmlsaW5nIGV4dGVuc2lvblwiKTtcbiAgICB9XG5cbiAgICBpZiAod2l0aFJlZikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd3aXRoUmVmIGlzIHJlbW92ZWQuIFRvIGFjY2VzcyB0aGUgd3JhcHBlZCBpbnN0YW5jZSwgdXNlIGEgcmVmIG9uIHRoZSBjb25uZWN0ZWQgY29tcG9uZW50Jyk7XG4gICAgfVxuXG4gICAgdmFyIGN1c3RvbVN0b3JlV2FybmluZ01lc3NhZ2UgPSAnVG8gdXNlIGEgY3VzdG9tIFJlZHV4IHN0b3JlIGZvciBzcGVjaWZpYyBjb21wb25lbnRzLCBjcmVhdGUgYSBjdXN0b20gUmVhY3QgY29udGV4dCB3aXRoICcgKyBcIlJlYWN0LmNyZWF0ZUNvbnRleHQoKSwgYW5kIHBhc3MgdGhlIGNvbnRleHQgb2JqZWN0IHRvIFJlYWN0IFJlZHV4J3MgUHJvdmlkZXIgYW5kIHNwZWNpZmljIGNvbXBvbmVudHNcIiArICcgbGlrZTogPFByb3ZpZGVyIGNvbnRleHQ9e015Q29udGV4dH0+PENvbm5lY3RlZENvbXBvbmVudCBjb250ZXh0PXtNeUNvbnRleHR9IC8+PC9Qcm92aWRlcj4uICcgKyAnWW91IG1heSBhbHNvIHBhc3MgYSB7Y29udGV4dCA6IE15Q29udGV4dH0gb3B0aW9uIHRvIGNvbm5lY3QnO1xuXG4gICAgaWYgKHN0b3JlS2V5ICE9PSAnc3RvcmUnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N0b3JlS2V5IGhhcyBiZWVuIHJlbW92ZWQgYW5kIGRvZXMgbm90IGRvIGFueXRoaW5nLiAnICsgY3VzdG9tU3RvcmVXYXJuaW5nTWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIENvbnRleHQgPSBjb250ZXh0O1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcFdpdGhDb25uZWN0KFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKFdyYXBwZWRDb21wb25lbnQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgY29tcG9uZW50IHRvIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBieSBcIiArIChtZXRob2ROYW1lICsgXCIuIEluc3RlYWQgcmVjZWl2ZWQgXCIgKyBzdHJpbmdpZnlDb21wb25lbnQoV3JhcHBlZENvbXBvbmVudCkpKTtcbiAgICB9XG5cbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudE5hbWUgPSBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZSh3cmFwcGVkQ29tcG9uZW50TmFtZSk7XG5cbiAgICB2YXIgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBjb25uZWN0T3B0aW9ucywge1xuICAgICAgZ2V0RGlzcGxheU5hbWU6IGdldERpc3BsYXlOYW1lLFxuICAgICAgbWV0aG9kTmFtZTogbWV0aG9kTmFtZSxcbiAgICAgIHJlbmRlckNvdW50UHJvcDogcmVuZGVyQ291bnRQcm9wLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzdG9yZUtleTogc3RvcmVLZXksXG4gICAgICBkaXNwbGF5TmFtZTogZGlzcGxheU5hbWUsXG4gICAgICB3cmFwcGVkQ29tcG9uZW50TmFtZTogd3JhcHBlZENvbXBvbmVudE5hbWUsXG4gICAgICBXcmFwcGVkQ29tcG9uZW50OiBXcmFwcGVkQ29tcG9uZW50XG4gICAgfSk7XG5cbiAgICB2YXIgcHVyZSA9IGNvbm5lY3RPcHRpb25zLnB1cmU7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVDaGlsZFNlbGVjdG9yKHN0b3JlKSB7XG4gICAgICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KHN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICB9IC8vIElmIHdlIGFyZW4ndCBydW5uaW5nIGluIFwicHVyZVwiIG1vZGUsIHdlIGRvbid0IHdhbnQgdG8gbWVtb2l6ZSB2YWx1ZXMuXG4gICAgLy8gVG8gYXZvaWQgY29uZGl0aW9uYWxseSBjYWxsaW5nIGhvb2tzLCB3ZSBmYWxsIGJhY2sgdG8gYSB0aW55IHdyYXBwZXJcbiAgICAvLyB0aGF0IGp1c3QgZXhlY3V0ZXMgdGhlIGdpdmVuIGNhbGxiYWNrIGltbWVkaWF0ZWx5LlxuXG5cbiAgICB2YXIgdXNlUHVyZU9ubHlNZW1vID0gcHVyZSA/IHVzZU1lbW8gOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBDb25uZWN0RnVuY3Rpb24ocHJvcHMpIHtcbiAgICAgIHZhciBfdXNlTWVtbyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBEaXN0aW5ndWlzaCBiZXR3ZWVuIGFjdHVhbCBcImRhdGFcIiBwcm9wcyB0aGF0IHdlcmUgcGFzc2VkIHRvIHRoZSB3cmFwcGVyIGNvbXBvbmVudCxcbiAgICAgICAgLy8gYW5kIHZhbHVlcyBuZWVkZWQgdG8gY29udHJvbCBiZWhhdmlvciAoZm9yd2FyZGVkIHJlZnMsIGFsdGVybmF0ZSBjb250ZXh0IGluc3RhbmNlcykuXG4gICAgICAgIC8vIFRvIG1haW50YWluIHRoZSB3cmFwcGVyUHJvcHMgb2JqZWN0IHJlZmVyZW5jZSwgbWVtb2l6ZSB0aGlzIGRlc3RydWN0dXJpbmcuXG4gICAgICAgIHZhciByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmID0gcHJvcHMucmVhY3RSZWR1eEZvcndhcmRlZFJlZixcbiAgICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmXCJdKTtcblxuICAgICAgICByZXR1cm4gW3Byb3BzLmNvbnRleHQsIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWYsIHdyYXBwZXJQcm9wc107XG4gICAgICB9LCBbcHJvcHNdKSxcbiAgICAgICAgICBwcm9wc0NvbnRleHQgPSBfdXNlTWVtb1swXSxcbiAgICAgICAgICByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmID0gX3VzZU1lbW9bMV0sXG4gICAgICAgICAgd3JhcHBlclByb3BzID0gX3VzZU1lbW9bMl07XG5cbiAgICAgIHZhciBDb250ZXh0VG9Vc2UgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVXNlcnMgbWF5IG9wdGlvbmFsbHkgcGFzcyBpbiBhIGN1c3RvbSBjb250ZXh0IGluc3RhbmNlIHRvIHVzZSBpbnN0ZWFkIG9mIG91ciBSZWFjdFJlZHV4Q29udGV4dC5cbiAgICAgICAgLy8gTWVtb2l6ZSB0aGUgY2hlY2sgdGhhdCBkZXRlcm1pbmVzIHdoaWNoIGNvbnRleHQgaW5zdGFuY2Ugd2Ugc2hvdWxkIHVzZS5cbiAgICAgICAgcmV0dXJuIHByb3BzQ29udGV4dCAmJiBwcm9wc0NvbnRleHQuQ29uc3VtZXIgJiYgaXNDb250ZXh0Q29uc3VtZXIoIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHByb3BzQ29udGV4dC5Db25zdW1lciwgbnVsbCkpID8gcHJvcHNDb250ZXh0IDogQ29udGV4dDtcbiAgICAgIH0sIFtwcm9wc0NvbnRleHQsIENvbnRleHRdKTsgLy8gUmV0cmlldmUgdGhlIHN0b3JlIGFuZCBhbmNlc3RvciBzdWJzY3JpcHRpb24gdmlhIGNvbnRleHQsIGlmIGF2YWlsYWJsZVxuXG4gICAgICB2YXIgY29udGV4dFZhbHVlID0gdXNlQ29udGV4dChDb250ZXh0VG9Vc2UpOyAvLyBUaGUgc3RvcmUgX211c3RfIGV4aXN0IGFzIGVpdGhlciBhIHByb3Agb3IgaW4gY29udGV4dC5cbiAgICAgIC8vIFdlJ2xsIGNoZWNrIHRvIHNlZSBpZiBpdCBfbG9va3NfIGxpa2UgYSBSZWR1eCBzdG9yZSBmaXJzdC5cbiAgICAgIC8vIFRoaXMgYWxsb3dzIHVzIHRvIHBhc3MgdGhyb3VnaCBhIGBzdG9yZWAgcHJvcCB0aGF0IGlzIGp1c3QgYSBwbGFpbiB2YWx1ZS5cblxuICAgICAgdmFyIGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA9IEJvb2xlYW4ocHJvcHMuc3RvcmUpICYmIEJvb2xlYW4ocHJvcHMuc3RvcmUuZ2V0U3RhdGUpICYmIEJvb2xlYW4ocHJvcHMuc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgdmFyIGRpZFN0b3JlQ29tZUZyb21Db250ZXh0ID0gQm9vbGVhbihjb250ZXh0VmFsdWUpICYmIEJvb2xlYW4oY29udGV4dFZhbHVlLnN0b3JlKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWRpZFN0b3JlQ29tZUZyb21Qcm9wcyAmJiAhZGlkU3RvcmVDb21lRnJvbUNvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgXFxcInN0b3JlXFxcIiBpbiB0aGUgY29udGV4dCBvZiBcIiArIChcIlxcXCJcIiArIGRpc3BsYXlOYW1lICsgXCJcXFwiLiBFaXRoZXIgd3JhcCB0aGUgcm9vdCBjb21wb25lbnQgaW4gYSA8UHJvdmlkZXI+LCBcIikgKyBcIm9yIHBhc3MgYSBjdXN0b20gUmVhY3QgY29udGV4dCBwcm92aWRlciB0byA8UHJvdmlkZXI+IGFuZCB0aGUgY29ycmVzcG9uZGluZyBcIiArIChcIlJlYWN0IGNvbnRleHQgY29uc3VtZXIgdG8gXCIgKyBkaXNwbGF5TmFtZSArIFwiIGluIGNvbm5lY3Qgb3B0aW9ucy5cIikpO1xuICAgICAgfSAvLyBCYXNlZCBvbiB0aGUgcHJldmlvdXMgY2hlY2ssIG9uZSBvZiB0aGVzZSBtdXN0IGJlIHRydWVcblxuXG4gICAgICB2YXIgc3RvcmUgPSBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPyBwcm9wcy5zdG9yZSA6IGNvbnRleHRWYWx1ZS5zdG9yZTtcbiAgICAgIHZhciBjaGlsZFByb3BzU2VsZWN0b3IgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVGhlIGNoaWxkIHByb3BzIHNlbGVjdG9yIG5lZWRzIHRoZSBzdG9yZSByZWZlcmVuY2UgYXMgYW4gaW5wdXQuXG4gICAgICAgIC8vIFJlLWNyZWF0ZSB0aGlzIHNlbGVjdG9yIHdoZW5ldmVyIHRoZSBzdG9yZSBjaGFuZ2VzLlxuICAgICAgICByZXR1cm4gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSk7XG4gICAgICB9LCBbc3RvcmVdKTtcblxuICAgICAgdmFyIF91c2VNZW1vMiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuIE5PX1NVQlNDUklQVElPTl9BUlJBWTsgLy8gVGhpcyBTdWJzY3JpcHRpb24ncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cblxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzID8gbnVsbCA6IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb24pOyAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AsIHdoZXJlIGBzdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBUaGlzIGNhblxuICAgICAgICAvLyBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVyc1xuICAgICAgICAvLyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlICBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuXG4gICAgICAgIHZhciBub3RpZnlOZXN0ZWRTdWJzID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZChzdWJzY3JpcHRpb24pO1xuICAgICAgICByZXR1cm4gW3N1YnNjcmlwdGlvbiwgbm90aWZ5TmVzdGVkU3Vic107XG4gICAgICB9LCBbc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlXSksXG4gICAgICAgICAgc3Vic2NyaXB0aW9uID0gX3VzZU1lbW8yWzBdLFxuICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMgPSBfdXNlTWVtbzJbMV07IC8vIERldGVybWluZSB3aGF0IHtzdG9yZSwgc3Vic2NyaXB0aW9ufSB2YWx1ZSBzaG91bGQgYmUgcHV0IGludG8gbmVzdGVkIGNvbnRleHQsIGlmIG5lY2Vzc2FyeSxcbiAgICAgIC8vIGFuZCBtZW1vaXplIHRoYXQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgY29udGV4dCB1cGRhdGVzLlxuXG5cbiAgICAgIHZhciBvdmVycmlkZGVuQ29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChkaWRTdG9yZUNvbWVGcm9tUHJvcHMpIHtcbiAgICAgICAgICAvLyBUaGlzIGNvbXBvbmVudCBpcyBkaXJlY3RseSBzdWJzY3JpYmVkIHRvIGEgc3RvcmUgZnJvbSBwcm9wcy5cbiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IGRlc2NlbmRhbnRzIHJlYWRpbmcgZnJvbSB0aGlzIHN0b3JlIC0gcGFzcyBkb3duIHdoYXRldmVyXG4gICAgICAgICAgLy8gdGhlIGV4aXN0aW5nIGNvbnRleHQgdmFsdWUgaXMgZnJvbSB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IuXG4gICAgICAgICAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbiAgICAgICAgfSAvLyBPdGhlcndpc2UsIHB1dCB0aGlzIGNvbXBvbmVudCdzIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBpbnRvIGNvbnRleHQsIHNvIHRoYXRcbiAgICAgICAgLy8gY29ubmVjdGVkIGRlc2NlbmRhbnRzIHdvbid0IHVwZGF0ZSB1bnRpbCBhZnRlciB0aGlzIGNvbXBvbmVudCBpcyBkb25lXG5cblxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHRWYWx1ZSwge1xuICAgICAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSwgW2RpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlLCBzdWJzY3JpcHRpb25dKTsgLy8gV2UgbmVlZCB0byBmb3JjZSB0aGlzIHdyYXBwZXIgY29tcG9uZW50IHRvIHJlLXJlbmRlciB3aGVuZXZlciBhIFJlZHV4IHN0b3JlIHVwZGF0ZVxuICAgICAgLy8gY2F1c2VzIGEgY2hhbmdlIHRvIHRoZSBjYWxjdWxhdGVkIGNoaWxkIGNvbXBvbmVudCBwcm9wcyAob3Igd2UgY2F1Z2h0IGFuIGVycm9yIGluIG1hcFN0YXRlKVxuXG4gICAgICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlciwgRU1QVFlfQVJSQVksIGluaXRTdGF0ZVVwZGF0ZXMpLFxuICAgICAgICAgIF91c2VSZWR1Y2VyJCA9IF91c2VSZWR1Y2VyWzBdLFxuICAgICAgICAgIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgPSBfdXNlUmVkdWNlciRbMF0sXG4gICAgICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCA9IF91c2VSZWR1Y2VyWzFdOyAvLyBQcm9wYWdhdGUgYW55IG1hcFN0YXRlL21hcERpc3BhdGNoIGVycm9ycyB1cHdhcmRzXG5cblxuICAgICAgaWYgKHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgJiYgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdC5lcnJvcikge1xuICAgICAgICB0aHJvdyBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yO1xuICAgICAgfSAvLyBTZXQgdXAgcmVmcyB0byBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIHRoZSBzdWJzY3JpcHRpb24gZWZmZWN0IGFuZCB0aGUgcmVuZGVyIGxvZ2ljXG5cblxuICAgICAgdmFyIGxhc3RDaGlsZFByb3BzID0gdXNlUmVmKCk7XG4gICAgICB2YXIgbGFzdFdyYXBwZXJQcm9wcyA9IHVzZVJlZih3cmFwcGVyUHJvcHMpO1xuICAgICAgdmFyIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUgPSB1c2VSZWYoKTtcbiAgICAgIHZhciByZW5kZXJJc1NjaGVkdWxlZCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICB2YXIgYWN0dWFsQ2hpbGRQcm9wcyA9IHVzZVB1cmVPbmx5TWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRyaWNreSBsb2dpYyBoZXJlOlxuICAgICAgICAvLyAtIFRoaXMgcmVuZGVyIG1heSBoYXZlIGJlZW4gdHJpZ2dlcmVkIGJ5IGEgUmVkdXggc3RvcmUgdXBkYXRlIHRoYXQgcHJvZHVjZWQgbmV3IGNoaWxkIHByb3BzXG4gICAgICAgIC8vIC0gSG93ZXZlciwgd2UgbWF5IGhhdmUgZ290dGVuIG5ldyB3cmFwcGVyIHByb3BzIGFmdGVyIHRoYXRcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBuZXcgY2hpbGQgcHJvcHMsIGFuZCB0aGUgc2FtZSB3cmFwcGVyIHByb3BzLCB3ZSBrbm93IHdlIHNob3VsZCB1c2UgdGhlIG5ldyBjaGlsZCBwcm9wcyBhcy1pcy5cbiAgICAgICAgLy8gQnV0LCBpZiB3ZSBoYXZlIG5ldyB3cmFwcGVyIHByb3BzLCB0aG9zZSBtaWdodCBjaGFuZ2UgdGhlIGNoaWxkIHByb3BzLCBzbyB3ZSBoYXZlIHRvIHJlY2FsY3VsYXRlIHRoaW5ncy5cbiAgICAgICAgLy8gU28sIHdlJ2xsIHVzZSB0aGUgY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGUgb25seSBpZiB0aGUgd3JhcHBlciBwcm9wcyBhcmUgdGhlIHNhbWUgYXMgbGFzdCB0aW1lLlxuICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ICYmIHdyYXBwZXJQcm9wcyA9PT0gbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudDtcbiAgICAgICAgfSAvLyBUT0RPIFdlJ3JlIHJlYWRpbmcgdGhlIHN0b3JlIGRpcmVjdGx5IGluIHJlbmRlcigpIGhlcmUuIEJhZCBpZGVhP1xuICAgICAgICAvLyBUaGlzIHdpbGwgbGlrZWx5IGNhdXNlIEJhZCBUaGluZ3MgKFRNKSB0byBoYXBwZW4gaW4gQ29uY3VycmVudCBNb2RlLlxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgZG8gdGhpcyBiZWNhdXNlIG9uIHJlbmRlcnMgX25vdF8gY2F1c2VkIGJ5IHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdGhlIGxhdGVzdCBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlLlxuXG5cbiAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpO1xuICAgICAgfSwgW3N0b3JlLCBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LCB3cmFwcGVyUHJvcHNdKTsgLy8gV2UgbmVlZCB0aGlzIHRvIGV4ZWN1dGUgc3luY2hyb25vdXNseSBldmVyeSB0aW1lIHdlIHJlLXJlbmRlci4gSG93ZXZlciwgUmVhY3Qgd2FybnNcbiAgICAgIC8vIGFib3V0IHVzZUxheW91dEVmZmVjdCBpbiBTU1IsIHNvIHdlIHRyeSB0byBkZXRlY3QgZW52aXJvbm1lbnQgYW5kIGZhbGwgYmFjayB0b1xuICAgICAgLy8ganVzdCB1c2VFZmZlY3QgaW5zdGVhZCB0byBhdm9pZCB0aGUgd2FybmluZywgc2luY2UgbmVpdGhlciB3aWxsIHJ1biBhbnl3YXkuXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhjYXB0dXJlV3JhcHBlclByb3BzLCBbbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCB3cmFwcGVyUHJvcHMsIGFjdHVhbENoaWxkUHJvcHMsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnNdKTsgLy8gT3VyIHJlLXN1YnNjcmliZSBsb2dpYyBvbmx5IHJ1bnMgd2hlbiB0aGUgc3RvcmUvc3Vic2NyaXB0aW9uIHNldHVwIGNoYW5nZXNcblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKHN1YnNjcmliZVVwZGF0ZXMsIFtzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsIHN0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzLCBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoXSwgW3N0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3Rvcl0pOyAvLyBOb3cgdGhhdCBhbGwgdGhhdCdzIGRvbmUsIHdlIGNhbiBmaW5hbGx5IHRyeSB0byBhY3R1YWxseSByZW5kZXIgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgIC8vIFdlIG1lbW9pemUgdGhlIGVsZW1lbnRzIGZvciB0aGUgcmVuZGVyZWQgY2hpbGQgY29tcG9uZW50IGFzIGFuIG9wdGltaXphdGlvbi5cblxuICAgICAgdmFyIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGFjdHVhbENoaWxkUHJvcHMsIHtcbiAgICAgICAgICByZWY6IHJlYWN0UmVkdXhGb3J3YXJkZWRSZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSwgW3JlYWN0UmVkdXhGb3J3YXJkZWRSZWYsIFdyYXBwZWRDb21wb25lbnQsIGFjdHVhbENoaWxkUHJvcHNdKTsgLy8gSWYgUmVhY3Qgc2VlcyB0aGUgZXhhY3Qgc2FtZSBlbGVtZW50IHJlZmVyZW5jZSBhcyBsYXN0IHRpbWUsIGl0IGJhaWxzIG91dCBvZiByZS1yZW5kZXJpbmdcbiAgICAgIC8vIHRoYXQgY2hpbGQsIHNhbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gUmVhY3QubWVtbygpIG9yIHJldHVybmVkIGZhbHNlIGZyb20gc2hvdWxkQ29tcG9uZW50VXBkYXRlLlxuXG4gICAgICB2YXIgcmVuZGVyZWRDaGlsZCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgaXMgc3Vic2NyaWJlZCB0byBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRvIHBhc3MgaXRzIG93blxuICAgICAgICAgIC8vIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBkb3duIHRvIG91ciBkZXNjZW5kYW50cy4gVGhhdCBtZWFucyByZW5kZXJpbmcgdGhlIHNhbWVcbiAgICAgICAgICAvLyBDb250ZXh0IGluc3RhbmNlLCBhbmQgcHV0dGluZyBhIGRpZmZlcmVudCB2YWx1ZSBpbnRvIHRoZSBjb250ZXh0LlxuICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0VG9Vc2UuUHJvdmlkZXIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBvdmVycmlkZGVuQ29udGV4dFZhbHVlXG4gICAgICAgICAgfSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICB9LCBbQ29udGV4dFRvVXNlLCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQsIG92ZXJyaWRkZW5Db250ZXh0VmFsdWVdKTtcbiAgICAgIHJldHVybiByZW5kZXJlZENoaWxkO1xuICAgIH0gLy8gSWYgd2UncmUgaW4gXCJwdXJlXCIgbW9kZSwgZW5zdXJlIG91ciB3cmFwcGVyIGNvbXBvbmVudCBvbmx5IHJlLXJlbmRlcnMgd2hlbiBpbmNvbWluZyBwcm9wcyBoYXZlIGNoYW5nZWQuXG5cblxuICAgIHZhciBDb25uZWN0ID0gcHVyZSA/IFJlYWN0Lm1lbW8oQ29ubmVjdEZ1bmN0aW9uKSA6IENvbm5lY3RGdW5jdGlvbjtcbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBDb25uZWN0RnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcblxuICAgIGlmIChmb3J3YXJkUmVmKSB7XG4gICAgICB2YXIgZm9yd2FyZGVkID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBmb3J3YXJkQ29ubmVjdFJlZihwcm9wcywgcmVmKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb25uZWN0LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmOiByZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICBmb3J3YXJkZWQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIGZvcndhcmRlZC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIHJldHVybiBob2lzdFN0YXRpY3MoZm9yd2FyZGVkLCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICB9O1xufSIsImZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuXG4gICAgY29uc3RhbnRTZWxlY3Rvci5kZXBlbmRzT25Pd25Qcm9wcyA9IGZhbHNlO1xuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yO1xuICB9O1xufSAvLyBkZXBlbmRzT25Pd25Qcm9wcyBpcyB1c2VkIGJ5IGNyZWF0ZU1hcFRvUHJvcHNQcm94eSB0byBkZXRlcm1pbmUgd2hldGhlciB0byBwYXNzIHByb3BzIGFzIGFyZ3Ncbi8vIHRvIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIHdyYXBwZWQuIEl0IGlzIGFsc28gdXNlZCBieSBtYWtlUHVyZVByb3BzU2VsZWN0b3IgdG8gZGV0ZXJtaW5lXG4vLyB3aGV0aGVyIG1hcFRvUHJvcHMgbmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuIHByb3BzIGhhdmUgY2hhbmdlZC5cbi8vXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59IC8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vXG4vLyAgKiBEZXRlY3RzIHdoZXRoZXIgdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIGRlcGVuZHMgb24gcHJvcHMsIHdoaWNoXG4vLyAgICBpcyB1c2VkIGJ5IHNlbGVjdG9yRmFjdG9yeSB0byBkZWNpZGUgaWYgaXQgc2hvdWxkIHJlaW52b2tlIG9uIHByb3BzIGNoYW5nZXMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWU7XG5cbiAgICB2YXIgcHJveHkgPSBmdW5jdGlvbiBtYXBUb1Byb3BzUHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoKTtcbiAgICB9OyAvLyBhbGxvdyBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IHRvIGdldCBvd25Qcm9wc1xuXG5cbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG5cbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICB2YXIgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xufSIsImltcG9ydCBiaW5kQWN0aW9uQ3JlYXRvcnMgZnJvbSAnLi4vdXRpbHMvYmluZEFjdGlvbkNyZWF0b3JzJztcbmltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaFxuICAgIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdChtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcERpc3BhdGNoVG9Qcm9wcyAmJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnb2JqZWN0JyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyhtYXBEaXNwYXRjaFRvUHJvcHMsIGRpc3BhdGNoKTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGtleSkge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgX2xvb3Aoa2V5KTtcbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufSIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcFN0YXRlVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBTdGF0ZVRvUHJvcHMsICdtYXBTdGF0ZVRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmddOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93blByb3BzLCBzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdE1lcmdlUHJvcHNQcm94eShkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWUsXG4gICAgICAgIHB1cmUgPSBfcmVmLnB1cmUsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmLmFyZU1lcmdlZFByb3BzRXF1YWw7XG4gICAgdmFyIGhhc1J1bk9uY2UgPSBmYWxzZTtcbiAgICB2YXIgbWVyZ2VkUHJvcHM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlUHJvcHNQcm94eShzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICAgICAgdmFyIG5leHRNZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgICBpZiAoaGFzUnVuT25jZSkge1xuICAgICAgICBpZiAoIXB1cmUgfHwgIWFyZU1lcmdlZFByb3BzRXF1YWwobmV4dE1lcmdlZFByb3BzLCBtZXJnZWRQcm9wcykpIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzUnVuT25jZSA9IHRydWU7XG4gICAgICAgIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QobWVyZ2VkUHJvcHMsIGRpc3BsYXlOYW1lLCAnbWVyZ2VQcm9wcycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gICAgfTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24obWVyZ2VQcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1lcmdlUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc09taXR0ZWQobWVyZ2VQcm9wcykge1xuICByZXR1cm4gIW1lcmdlUHJvcHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNZXJnZVByb3BzO1xuICB9IDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NZXJnZVByb3BzSXNGdW5jdGlvbiwgd2hlbk1lcmdlUHJvcHNJc09taXR0ZWRdOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IHZlcmlmeVN1YnNlbGVjdG9ycyBmcm9tICcuL3ZlcmlmeVN1YnNlbGVjdG9ycyc7XG5leHBvcnQgZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICByZXR1cm4gbWVyZ2VQcm9wcyhtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSwgbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyksIG93blByb3BzKTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIF9yZWYpIHtcbiAgdmFyIGFyZVN0YXRlc0VxdWFsID0gX3JlZi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmLmFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmLmFyZVN0YXRlUHJvcHNFcXVhbDtcbiAgdmFyIGhhc1J1bkF0TGVhc3RPbmNlID0gZmFsc2U7XG4gIHZhciBzdGF0ZTtcbiAgdmFyIG93blByb3BzO1xuICB2YXIgc3RhdGVQcm9wcztcbiAgdmFyIGRpc3BhdGNoUHJvcHM7XG4gIHZhciBtZXJnZWRQcm9wcztcblxuICBmdW5jdGlvbiBoYW5kbGVGaXJzdENhbGwoZmlyc3RTdGF0ZSwgZmlyc3RPd25Qcm9wcykge1xuICAgIHN0YXRlID0gZmlyc3RTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IGZpcnN0T3duUHJvcHM7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIGhhc1J1bkF0TGVhc3RPbmNlID0gdHJ1ZTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCkge1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wcygpIHtcbiAgICBpZiAobWFwU3RhdGVUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3U3RhdGUoKSB7XG4gICAgdmFyIG5leHRTdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlUHJvcHNDaGFuZ2VkID0gIWFyZVN0YXRlUHJvcHNFcXVhbChuZXh0U3RhdGVQcm9wcywgc3RhdGVQcm9wcyk7XG4gICAgc3RhdGVQcm9wcyA9IG5leHRTdGF0ZVByb3BzO1xuICAgIGlmIChzdGF0ZVByb3BzQ2hhbmdlZCkgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICB2YXIgcHJvcHNDaGFuZ2VkID0gIWFyZU93blByb3BzRXF1YWwobmV4dE93blByb3BzLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlQ2hhbmdlZCA9ICFhcmVTdGF0ZXNFcXVhbChuZXh0U3RhdGUsIHN0YXRlKTtcbiAgICBzdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IG5leHRPd25Qcm9wcztcbiAgICBpZiAocHJvcHNDaGFuZ2VkICYmIHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKTtcbiAgICBpZiAocHJvcHNDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHMoKTtcbiAgICBpZiAoc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3U3RhdGUoKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHJldHVybiBoYXNSdW5BdExlYXN0T25jZSA/IGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgOiBoYW5kbGVGaXJzdENhbGwobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpO1xuICB9O1xufSAvLyBUT0RPOiBBZGQgbW9yZSBjb21tZW50c1xuLy8gSWYgcHVyZSBpcyB0cnVlLCB0aGUgc2VsZWN0b3IgcmV0dXJuZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHdpbGwgbWVtb2l6ZSBpdHMgcmVzdWx0cyxcbi8vIGFsbG93aW5nIGNvbm5lY3RBZHZhbmNlZCdzIHNob3VsZENvbXBvbmVudFVwZGF0ZSB0byByZXR1cm4gZmFsc2UgaWYgZmluYWxcbi8vIHByb3BzIGhhdmUgbm90IGNoYW5nZWQuIElmIGZhbHNlLCB0aGUgc2VsZWN0b3Igd2lsbCBhbHdheXMgcmV0dXJuIGEgbmV3XG4vLyBvYmplY3QgYW5kIHNob3VsZENvbXBvbmVudFVwZGF0ZSB3aWxsIGFsd2F5cyByZXR1cm4gdHJ1ZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShkaXNwYXRjaCwgX3JlZjIpIHtcbiAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBfcmVmMi5pbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wcyA9IF9yZWYyLmluaXRNZXJnZVByb3BzLFxuICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJpbml0TWFwU3RhdGVUb1Byb3BzXCIsIFwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wc1wiLCBcImluaXRNZXJnZVByb3BzXCJdKTtcblxuICB2YXIgbWFwU3RhdGVUb1Byb3BzID0gaW5pdE1hcFN0YXRlVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1lcmdlUHJvcHMgPSBpbml0TWVyZ2VQcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2ZXJpZnlTdWJzZWxlY3RvcnMobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIG9wdGlvbnMuZGlzcGxheU5hbWUpO1xuICB9XG5cbiAgdmFyIHNlbGVjdG9yRmFjdG9yeSA9IG9wdGlvbnMucHVyZSA/IHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IDogaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeTtcbiAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIG9wdGlvbnMpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4uL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbmltcG9ydCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwRGlzcGF0Y2hUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwU3RhdGVUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyBmcm9tICcuL21lcmdlUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi9zZWxlY3RvckZhY3RvcnknO1xuLypcclxuICBjb25uZWN0IGlzIGEgZmFjYWRlIG92ZXIgY29ubmVjdEFkdmFuY2VkLiBJdCB0dXJucyBpdHMgYXJncyBpbnRvIGEgY29tcGF0aWJsZVxyXG4gIHNlbGVjdG9yRmFjdG9yeSwgd2hpY2ggaGFzIHRoZSBzaWduYXR1cmU6XHJcblxyXG4gICAgKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpID0+IG5leHRGaW5hbFByb3BzXHJcbiAgXHJcbiAgY29ubmVjdCBwYXNzZXMgaXRzIGFyZ3MgdG8gY29ubmVjdEFkdmFuY2VkIGFzIG9wdGlvbnMsIHdoaWNoIHdpbGwgaW4gdHVybiBwYXNzIHRoZW0gdG9cclxuICBzZWxlY3RvckZhY3RvcnkgZWFjaCB0aW1lIGEgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2UgaXMgaW5zdGFudGlhdGVkIG9yIGhvdCByZWxvYWRlZC5cclxuXHJcbiAgc2VsZWN0b3JGYWN0b3J5IHJldHVybnMgYSBmaW5hbCBwcm9wcyBzZWxlY3RvciBmcm9tIGl0cyBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgbWVyZ2VQcm9wcyxcclxuICBtZXJnZVByb3BzRmFjdG9yaWVzLCBhbmQgcHVyZSBhcmdzLlxyXG5cclxuICBUaGUgcmVzdWx0aW5nIGZpbmFsIHByb3BzIHNlbGVjdG9yIGlzIGNhbGxlZCBieSB0aGUgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2Ugd2hlbmV2ZXJcclxuICBpdCByZWNlaXZlcyBuZXcgcHJvcHMgb3Igc3RvcmUgc3RhdGUuXHJcbiAqL1xuXG5mdW5jdGlvbiBtYXRjaChhcmcsIGZhY3RvcmllcywgbmFtZSkge1xuICBmb3IgKHZhciBpID0gZmFjdG9yaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHJlc3VsdCA9IGZhY3Rvcmllc1tpXShhcmcpO1xuICAgIGlmIChyZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB2YWx1ZSBvZiB0eXBlIFwiICsgdHlwZW9mIGFyZyArIFwiIGZvciBcIiArIG5hbWUgKyBcIiBhcmd1bWVudCB3aGVuIGNvbm5lY3RpbmcgY29tcG9uZW50IFwiICsgb3B0aW9ucy53cmFwcGVkQ29tcG9uZW50TmFtZSArIFwiLlwiKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RyaWN0RXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn0gLy8gY3JlYXRlQ29ubmVjdCB3aXRoIGRlZmF1bHQgYXJncyBidWlsZHMgdGhlICdvZmZpY2lhbCcgY29ubmVjdCBiZWhhdmlvci4gQ2FsbGluZyBpdCB3aXRoXG4vLyBkaWZmZXJlbnQgb3B0aW9ucyBvcGVucyB1cCBzb21lIHRlc3RpbmcgYW5kIGV4dGVuc2liaWxpdHkgc2NlbmFyaW9zXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3QoX3RlbXApIHtcbiAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgIF9yZWYkY29ubmVjdEhPQyA9IF9yZWYuY29ubmVjdEhPQyxcbiAgICAgIGNvbm5lY3RIT0MgPSBfcmVmJGNvbm5lY3RIT0MgPT09IHZvaWQgMCA/IGNvbm5lY3RBZHZhbmNlZCA6IF9yZWYkY29ubmVjdEhPQyxcbiAgICAgIF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9IF9yZWYubWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBTdGF0ZVRvUHJvcHNGLFxuICAgICAgX3JlZiRtYXBEaXNwYXRjaFRvUHJvID0gX3JlZi5tYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPT09IHZvaWQgMCA/IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcERpc3BhdGNoVG9Qcm8sXG4gICAgICBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPSBfcmVmLm1lcmdlUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtZXJnZVByb3BzRmFjdG9yaWVzID0gX3JlZiRtZXJnZVByb3BzRmFjdG9yID09PSB2b2lkIDAgPyBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvcixcbiAgICAgIF9yZWYkc2VsZWN0b3JGYWN0b3J5ID0gX3JlZi5zZWxlY3RvckZhY3RvcnksXG4gICAgICBzZWxlY3RvckZhY3RvcnkgPSBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9PT0gdm9pZCAwID8gZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSA6IF9yZWYkc2VsZWN0b3JGYWN0b3J5O1xuXG4gIHJldHVybiBmdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBfcmVmMikge1xuICAgIGlmIChfcmVmMiA9PT0gdm9pZCAwKSB7XG4gICAgICBfcmVmMiA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfcmVmMyA9IF9yZWYyLFxuICAgICAgICBfcmVmMyRwdXJlID0gX3JlZjMucHVyZSxcbiAgICAgICAgcHVyZSA9IF9yZWYzJHB1cmUgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMyRwdXJlLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9IF9yZWYzLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlc0VxdWFsID09PSB2b2lkIDAgPyBzdHJpY3RFcXVhbCA6IF9yZWYzJGFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBfcmVmMyRhcmVPd25Qcm9wc0VxdWEgPSBfcmVmMy5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZjMkYXJlT3duUHJvcHNFcXVhID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVPd25Qcm9wc0VxdWEsXG4gICAgICAgIF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9IF9yZWYzLmFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZjMkYXJlU3RhdGVQcm9wc0VxID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZVByb3BzRXEsXG4gICAgICAgIF9yZWYzJGFyZU1lcmdlZFByb3BzRSA9IF9yZWYzLmFyZU1lcmdlZFByb3BzRXF1YWwsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZU1lcmdlZFByb3BzRSxcbiAgICAgICAgZXh0cmFPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjMsIFtcInB1cmVcIiwgXCJhcmVTdGF0ZXNFcXVhbFwiLCBcImFyZU93blByb3BzRXF1YWxcIiwgXCJhcmVTdGF0ZVByb3BzRXF1YWxcIiwgXCJhcmVNZXJnZWRQcm9wc0VxdWFsXCJdKTtcblxuICAgIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gbWF0Y2gobWFwU3RhdGVUb1Byb3BzLCBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsICdtYXBTdGF0ZVRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IG1hdGNoKG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNZXJnZVByb3BzID0gbWF0Y2gobWVyZ2VQcm9wcywgbWVyZ2VQcm9wc0ZhY3RvcmllcywgJ21lcmdlUHJvcHMnKTtcbiAgICByZXR1cm4gY29ubmVjdEhPQyhzZWxlY3RvckZhY3RvcnksIF9leHRlbmRzKHtcbiAgICAgIC8vIHVzZWQgaW4gZXJyb3IgbWVzc2FnZXNcbiAgICAgIG1ldGhvZE5hbWU6ICdjb25uZWN0JyxcbiAgICAgIC8vIHVzZWQgdG8gY29tcHV0ZSBDb25uZWN0J3MgZGlzcGxheU5hbWUgZnJvbSB0aGUgd3JhcHBlZCBjb21wb25lbnQncyBkaXNwbGF5TmFtZS5cbiAgICAgIGdldERpc3BsYXlOYW1lOiBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShuYW1lKSB7XG4gICAgICAgIHJldHVybiBcIkNvbm5lY3QoXCIgKyBuYW1lICsgXCIpXCI7XG4gICAgICB9LFxuICAgICAgLy8gaWYgbWFwU3RhdGVUb1Byb3BzIGlzIGZhbHN5LCB0aGUgQ29ubmVjdCBjb21wb25lbnQgZG9lc24ndCBzdWJzY3JpYmUgdG8gc3RvcmUgc3RhdGUgY2hhbmdlc1xuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBCb29sZWFuKG1hcFN0YXRlVG9Qcm9wcyksXG4gICAgICAvLyBwYXNzZWQgdGhyb3VnaCB0byBzZWxlY3RvckZhY3RvcnlcbiAgICAgIGluaXRNYXBTdGF0ZVRvUHJvcHM6IGluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzOiBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHM6IGluaXRNZXJnZVByb3BzLFxuICAgICAgcHVyZTogcHVyZSxcbiAgICAgIGFyZVN0YXRlc0VxdWFsOiBhcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWw6IGFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWw6IGFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWw6IGFyZU1lcmdlZFByb3BzRXF1YWxcbiAgICB9LCBleHRyYU9wdGlvbnMpKTtcbiAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9jcmVhdGVDb25uZWN0KCk7IiwiaW1wb3J0IHsgdXNlUmVkdWNlciwgdXNlUmVmLCB1c2VNZW1vLCB1c2VDb250ZXh0LCB1c2VEZWJ1Z1ZhbHVlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5cbnZhciByZWZFcXVhbGl0eSA9IGZ1bmN0aW9uIHJlZkVxdWFsaXR5KGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59O1xuXG5mdW5jdGlvbiB1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbihzZWxlY3RvciwgZXF1YWxpdHlGbiwgc3RvcmUsIGNvbnRleHRTdWIpIHtcbiAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcihmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBzICsgMTtcbiAgfSwgMCksXG4gICAgICBmb3JjZVJlbmRlciA9IF91c2VSZWR1Y2VyWzFdO1xuXG4gIHZhciBzdWJzY3JpcHRpb24gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSwgY29udGV4dFN1Yik7XG4gIH0sIFtzdG9yZSwgY29udGV4dFN1Yl0pO1xuICB2YXIgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0b3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFN0b3JlU3RhdGUgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdGVkU3RhdGUgPSB1c2VSZWYoKTtcbiAgdmFyIHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICB2YXIgc2VsZWN0ZWRTdGF0ZTtcblxuICB0cnkge1xuICAgIGlmIChzZWxlY3RvciAhPT0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudCB8fCBzdG9yZVN0YXRlICE9PSBsYXRlc3RTdG9yZVN0YXRlLmN1cnJlbnQgfHwgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICB2YXIgbmV3U2VsZWN0ZWRTdGF0ZSA9IHNlbGVjdG9yKHN0b3JlU3RhdGUpOyAvLyBlbnN1cmUgbGF0ZXN0IHNlbGVjdGVkIHN0YXRlIGlzIHJldXNlZCBzbyB0aGF0IGEgY3VzdG9tIGVxdWFsaXR5IGZ1bmN0aW9uIGNhbiByZXN1bHQgaW4gaWRlbnRpY2FsIHJlZmVyZW5jZXNcblxuICAgICAgaWYgKGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9PT0gdW5kZWZpbmVkIHx8ICFlcXVhbGl0eUZuKG5ld1NlbGVjdGVkU3RhdGUsIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCkpIHtcbiAgICAgICAgc2VsZWN0ZWRTdGF0ZSA9IG5ld1NlbGVjdGVkU3RhdGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50O1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgZXJyLm1lc3NhZ2UgKz0gXCJcXG5UaGUgZXJyb3IgbWF5IGJlIGNvcnJlbGF0ZWQgd2l0aCB0aGlzIHByZXZpb3VzIGVycm9yOlxcblwiICsgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50LnN0YWNrICsgXCJcXG5cXG5cIjtcbiAgICB9XG5cbiAgICB0aHJvdyBlcnI7XG4gIH1cblxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBsYXRlc3RTZWxlY3Rvci5jdXJyZW50ID0gc2VsZWN0b3I7XG4gICAgbGF0ZXN0U3RvcmVTdGF0ZS5jdXJyZW50ID0gc3RvcmVTdGF0ZTtcbiAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBzZWxlY3RlZFN0YXRlO1xuICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgfSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXdTdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcblxuICAgICAgICB2YXIgX25ld1NlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50KG5ld1N0b3JlU3RhdGUpO1xuXG4gICAgICAgIGlmIChlcXVhbGl0eUZuKF9uZXdTZWxlY3RlZFN0YXRlLCBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gX25ld1NlbGVjdGVkU3RhdGU7XG4gICAgICAgIGxhdGVzdFN0b3JlU3RhdGUuY3VycmVudCA9IG5ld1N0b3JlU3RhdGU7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gd2UgaWdub3JlIGFsbCBlcnJvcnMgaGVyZSwgc2luY2Ugd2hlbiB0aGUgY29tcG9uZW50XG4gICAgICAgIC8vIGlzIHJlLXJlbmRlcmVkLCB0aGUgc2VsZWN0b3JzIGFyZSBjYWxsZWQgYWdhaW4sIGFuZFxuICAgICAgICAvLyB3aWxsIHRocm93IGFnYWluLCBpZiBuZWl0aGVyIHByb3BzIG5vciBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyBjaGFuZ2VkXG4gICAgICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IGVycjtcbiAgICAgIH1cblxuICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICB9XG5cbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgY2hlY2tGb3JVcGRhdGVzKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbc3RvcmUsIHN1YnNjcmlwdGlvbl0pO1xuICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbn1cbi8qKlxyXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXHJcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3Rvckhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVJlZHV4Q29udGV4dCA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFJlZHV4Q29udGV4dCA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KTtcbiAgfTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVNlbGVjdG9yKHNlbGVjdG9yLCBlcXVhbGl0eUZuKSB7XG4gICAgaWYgKGVxdWFsaXR5Rm4gPT09IHZvaWQgMCkge1xuICAgICAgZXF1YWxpdHlGbiA9IHJlZkVxdWFsaXR5O1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvclwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgZnVuY3Rpb24gYXMgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvclwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBlcXVhbGl0eUZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBmdW5jdGlvbiBhcyBhbiBlcXVhbGl0eSBmdW5jdGlvbiB0byB1c2VTZWxlY3RvclwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmUsXG4gICAgICAgIGNvbnRleHRTdWIgPSBfdXNlUmVkdXhDb250ZXh0LnN1YnNjcmlwdGlvbjtcblxuICAgIHZhciBzZWxlY3RlZFN0YXRlID0gdXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24oc2VsZWN0b3IsIGVxdWFsaXR5Rm4sIHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgICB1c2VEZWJ1Z1ZhbHVlKHNlbGVjdGVkU3RhdGUpO1xuICAgIHJldHVybiBzZWxlY3RlZFN0YXRlO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlJ3Mgc3RhdGUuIFRoaXMgaG9vayB0YWtlcyBhIHNlbGVjdG9yIGZ1bmN0aW9uXHJcbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxyXG4gKlxyXG4gKiBUaGlzIGhvb2sgdGFrZXMgYW4gb3B0aW9uYWwgZXF1YWxpdHkgY29tcGFyaXNvbiBmdW5jdGlvbiBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlclxyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxyXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gKiAgIGNvbnN0IGNvdW50ZXIgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5jb3VudGVyKVxyXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgdmFyIHVzZVNlbGVjdG9yID0gLyojX19QVVJFX18qL2NyZWF0ZVNlbGVjdG9ySG9vaygpOyIsImltcG9ydCBQcm92aWRlciBmcm9tICcuL2NvbXBvbmVudHMvUHJvdmlkZXInO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IGNvbm5lY3QgZnJvbSAnLi9jb25uZWN0L2Nvbm5lY3QnO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIGNyZWF0ZURpc3BhdGNoSG9vayB9IGZyb20gJy4vaG9va3MvdXNlRGlzcGF0Y2gnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIGNyZWF0ZVNlbGVjdG9ySG9vayB9IGZyb20gJy4vaG9va3MvdXNlU2VsZWN0b3InO1xuaW1wb3J0IHsgdXNlU3RvcmUsIGNyZWF0ZVN0b3JlSG9vayB9IGZyb20gJy4vaG9va3MvdXNlU3RvcmUnO1xuaW1wb3J0IHsgc2V0QmF0Y2ggfSBmcm9tICcuL3V0aWxzL2JhdGNoJztcbmltcG9ydCB7IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIGFzIGJhdGNoIH0gZnJvbSAnLi91dGlscy9yZWFjdEJhdGNoZWRVcGRhdGVzJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi91dGlscy9zaGFsbG93RXF1YWwnO1xuc2V0QmF0Y2goYmF0Y2gpO1xuZXhwb3J0IHsgUHJvdmlkZXIsIGNvbm5lY3RBZHZhbmNlZCwgUmVhY3RSZWR1eENvbnRleHQsIGNvbm5lY3QsIGJhdGNoLCB1c2VEaXNwYXRjaCwgY3JlYXRlRGlzcGF0Y2hIb29rLCB1c2VTZWxlY3RvciwgY3JlYXRlU2VsZWN0b3JIb29rLCB1c2VTdG9yZSwgY3JlYXRlU3RvcmVIb29rLCBzaGFsbG93RXF1YWwgfTsiLCJmdW5jdGlvbiBzdHlsaXNfbWluIChXKSB7XG4gIGZ1bmN0aW9uIE0oZCwgYywgZSwgaCwgYSkge1xuICAgIGZvciAodmFyIG0gPSAwLCBiID0gMCwgdiA9IDAsIG4gPSAwLCBxLCBnLCB4ID0gMCwgSyA9IDAsIGssIHUgPSBrID0gcSA9IDAsIGwgPSAwLCByID0gMCwgSSA9IDAsIHQgPSAwLCBCID0gZS5sZW5ndGgsIEogPSBCIC0gMSwgeSwgZiA9ICcnLCBwID0gJycsIEYgPSAnJywgRyA9ICcnLCBDOyBsIDwgQjspIHtcbiAgICAgIGcgPSBlLmNoYXJDb2RlQXQobCk7XG4gICAgICBsID09PSBKICYmIDAgIT09IGIgKyBuICsgdiArIG0gJiYgKDAgIT09IGIgJiYgKGcgPSA0NyA9PT0gYiA/IDEwIDogNDcpLCBuID0gdiA9IG0gPSAwLCBCKyssIEorKyk7XG5cbiAgICAgIGlmICgwID09PSBiICsgbiArIHYgKyBtKSB7XG4gICAgICAgIGlmIChsID09PSBKICYmICgwIDwgciAmJiAoZiA9IGYucmVwbGFjZShOLCAnJykpLCAwIDwgZi50cmltKCkubGVuZ3RoKSkge1xuICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGYgKz0gZS5jaGFyQXQobCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZyA9IDU5O1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgY2FzZSAxMjM6XG4gICAgICAgICAgICBmID0gZi50cmltKCk7XG4gICAgICAgICAgICBxID0gZi5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgayA9IDE7XG5cbiAgICAgICAgICAgIGZvciAodCA9ICsrbDsgbCA8IEI7KSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZyA9IGUuY2hhckNvZGVBdChsKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgICAgICAgaysrO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICAgICAgICAgIGstLTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZyA9IGUuY2hhckNvZGVBdChsICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHUgPSBsICsgMTsgdSA8IEo7ICsrdSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUuY2hhckNvZGVBdCh1KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDIgPT09IGcgJiYgNDIgPT09IGUuY2hhckNvZGVBdCh1IC0gMSkgJiYgbCArIDIgIT09IHUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDcgPT09IGcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHU7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgICAgIGcrKztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgICBnKys7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgICAgICBmb3IgKDsgbCsrIDwgSiAmJiBlLmNoYXJDb2RlQXQobCkgIT09IGc7KSB7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICgwID09PSBrKSBicmVhaztcbiAgICAgICAgICAgICAgbCsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBrID0gZS5zdWJzdHJpbmcodCwgbCk7XG4gICAgICAgICAgICAwID09PSBxICYmIChxID0gKGYgPSBmLnJlcGxhY2UoY2EsICcnKS50cmltKCkpLmNoYXJDb2RlQXQoMCkpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHEpIHtcbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICAwIDwgciAmJiAoZiA9IGYucmVwbGFjZShOLCAnJykpO1xuICAgICAgICAgICAgICAgIGcgPSBmLmNoYXJDb2RlQXQoMSk7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTAwOlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICAgICAgICAgIHIgPSBjO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgciA9IE87XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgayA9IE0oYywgciwgaywgZywgYSArIDEpO1xuICAgICAgICAgICAgICAgIHQgPSBrLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAwIDwgQSAmJiAociA9IFgoTywgZiwgSSksIEMgPSBIKDMsIGssIHIsIGMsIEQsIHosIHQsIGcsIGEsIGgpLCBmID0gci5qb2luKCcnKSwgdm9pZCAwICE9PSBDICYmIDAgPT09ICh0ID0gKGsgPSBDLnRyaW0oKSkubGVuZ3RoKSAmJiAoZyA9IDAsIGsgPSAnJykpO1xuICAgICAgICAgICAgICAgIGlmICgwIDwgdCkgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgICAgZiA9IGYucmVwbGFjZShkYSwgZWEpO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyAneycgKyBrICsgJ30nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDc6XG4gICAgICAgICAgICAgICAgICAgIGYgPSBmLnJlcGxhY2UoZmEsICckMSAkMicpO1xuICAgICAgICAgICAgICAgICAgICBrID0gZiArICd7JyArIGsgKyAnfSc7XG4gICAgICAgICAgICAgICAgICAgIGsgPSAxID09PSB3IHx8IDIgPT09IHcgJiYgTCgnQCcgKyBrLCAzKSA/ICdALXdlYmtpdC0nICsgayArICdAJyArIGsgOiAnQCcgKyBrO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyBrLCAxMTIgPT09IGggJiYgKGsgPSAocCArPSBrLCAnJykpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBrID0gJyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBrID0gTShjLCBYKGMsIGYsIEkpLCBrLCBoLCBhICsgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEYgKz0gaztcbiAgICAgICAgICAgIGsgPSBJID0gciA9IHUgPSBxID0gMDtcbiAgICAgICAgICAgIGYgPSAnJztcbiAgICAgICAgICAgIGcgPSBlLmNoYXJDb2RlQXQoKytsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgICAgIGYgPSAoMCA8IHIgPyBmLnJlcGxhY2UoTiwgJycpIDogZikudHJpbSgpO1xuICAgICAgICAgICAgaWYgKDEgPCAodCA9IGYubGVuZ3RoKSkgc3dpdGNoICgwID09PSB1ICYmIChxID0gZi5jaGFyQ29kZUF0KDApLCA0NSA9PT0gcSB8fCA5NiA8IHEgJiYgMTIzID4gcSkgJiYgKHQgPSAoZiA9IGYucmVwbGFjZSgnICcsICc6JykpLmxlbmd0aCksIDAgPCBBICYmIHZvaWQgMCAhPT0gKEMgPSBIKDEsIGYsIGMsIGQsIEQsIHosIHAubGVuZ3RoLCBoLCBhLCBoKSkgJiYgMCA9PT0gKHQgPSAoZiA9IEMudHJpbSgpKS5sZW5ndGgpICYmIChmID0gJ1xceDAwXFx4MDAnKSwgcSA9IGYuY2hhckNvZGVBdCgwKSwgZyA9IGYuY2hhckNvZGVBdCgxKSwgcSkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICBpZiAoMTA1ID09PSBnIHx8IDk5ID09PSBnKSB7XG4gICAgICAgICAgICAgICAgICBHICs9IGYgKyBlLmNoYXJBdChsKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIDU4ICE9PSBmLmNoYXJDb2RlQXQodCAtIDEpICYmIChwICs9IFAoZiwgcSwgZywgZi5jaGFyQ29kZUF0KDIpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBJID0gciA9IHUgPSBxID0gMDtcbiAgICAgICAgICAgIGYgPSAnJztcbiAgICAgICAgICAgIGcgPSBlLmNoYXJDb2RlQXQoKytsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICA0NyA9PT0gYiA/IGIgPSAwIDogMCA9PT0gMSArIHEgJiYgMTA3ICE9PSBoICYmIDAgPCBmLmxlbmd0aCAmJiAociA9IDEsIGYgKz0gJ1xceDAwJyk7XG4gICAgICAgICAgMCA8IEEgKiBZICYmIEgoMCwgZiwgYywgZCwgRCwgeiwgcC5sZW5ndGgsIGgsIGEsIGgpO1xuICAgICAgICAgIHogPSAxO1xuICAgICAgICAgIEQrKztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDU5OlxuICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICBpZiAoMCA9PT0gYiArIG4gKyB2ICsgbSkge1xuICAgICAgICAgICAgeisrO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgeisrO1xuICAgICAgICAgIHkgPSBlLmNoYXJBdChsKTtcblxuICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBtICsgYikgc3dpdGNoICh4KSB7XG4gICAgICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICAgICAgeSA9ICcnO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgMzIgIT09IGcgJiYgKHkgPSAnICcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXDAnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcZic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFx2JztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiAociA9IEkgPSAxLCB5ID0gJ1xcZicgKyB5KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTA4OlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIGIgKyBtICsgRSAmJiAwIDwgdSkgc3dpdGNoIChsIC0gdSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgIDExMiA9PT0geCAmJiA1OCA9PT0gZS5jaGFyQ29kZUF0KGwgLSAzKSAmJiAoRSA9IHgpO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgMTExID09PSBLICYmIChFID0gSyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiAodSA9IGwpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgMCA9PT0gYiArIHYgKyBuICsgbSAmJiAociA9IDEsIHkgKz0gJ1xccicpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgIDAgPT09IGIgJiYgKG4gPSBuID09PSBnID8gMCA6IDAgPT09IG4gPyBnIDogbik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDkxOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIHYgJiYgbSsrO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MzpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyB2ICYmIG0tLTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDE6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiB2LS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIGIgKyBtKSB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPT09IHEpIHN3aXRjaCAoMiAqIHggKyAzICogSykge1xuICAgICAgICAgICAgICAgICAgY2FzZSA1MzM6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBxID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdisrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgIDAgPT09IGIgKyB2ICsgbiArIG0gKyB1ICsgayAmJiAoayA9IDEpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgIGlmICghKDAgPCBuICsgbSArIHYpKSBzd2l0Y2ggKGIpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKDIgKiBnICsgMyAqIGUuY2hhckNvZGVBdChsICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMzU6XG4gICAgICAgICAgICAgICAgICAgICAgYiA9IDQ3O1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjIwOlxuICAgICAgICAgICAgICAgICAgICAgIHQgPSBsLCBiID0gNDI7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgICAgICAgIDQ3ID09PSBnICYmIDQyID09PSB4ICYmIHQgKyAyICE9PSBsICYmICgzMyA9PT0gZS5jaGFyQ29kZUF0KHQgKyAyKSAmJiAocCArPSBlLnN1YnN0cmluZyh0LCBsICsgMSkpLCB5ID0gJycsIGIgPSAwKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIDAgPT09IGIgJiYgKGYgKz0geSk7XG4gICAgICB9XG5cbiAgICAgIEsgPSB4O1xuICAgICAgeCA9IGc7XG4gICAgICBsKys7XG4gICAgfVxuXG4gICAgdCA9IHAubGVuZ3RoO1xuXG4gICAgaWYgKDAgPCB0KSB7XG4gICAgICByID0gYztcbiAgICAgIGlmICgwIDwgQSAmJiAoQyA9IEgoMiwgcCwgciwgZCwgRCwgeiwgdCwgaCwgYSwgaCksIHZvaWQgMCAhPT0gQyAmJiAwID09PSAocCA9IEMpLmxlbmd0aCkpIHJldHVybiBHICsgcCArIEY7XG4gICAgICBwID0gci5qb2luKCcsJykgKyAneycgKyBwICsgJ30nO1xuXG4gICAgICBpZiAoMCAhPT0gdyAqIEUpIHtcbiAgICAgICAgMiAhPT0gdyB8fCBMKHAsIDIpIHx8IChFID0gMCk7XG5cbiAgICAgICAgc3dpdGNoIChFKSB7XG4gICAgICAgICAgY2FzZSAxMTE6XG4gICAgICAgICAgICBwID0gcC5yZXBsYWNlKGhhLCAnOi1tb3otJDEnKSArIHA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTEyOlxuICAgICAgICAgICAgcCA9IHAucmVwbGFjZShRLCAnOjotd2Via2l0LWlucHV0LSQxJykgKyBwLnJlcGxhY2UoUSwgJzo6LW1vei0kMScpICsgcC5yZXBsYWNlKFEsICc6LW1zLWlucHV0LSQxJykgKyBwO1xuICAgICAgICB9XG5cbiAgICAgICAgRSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIEcgKyBwICsgRjtcbiAgfVxuXG4gIGZ1bmN0aW9uIFgoZCwgYywgZSkge1xuICAgIHZhciBoID0gYy50cmltKCkuc3BsaXQoaWEpO1xuICAgIGMgPSBoO1xuICAgIHZhciBhID0gaC5sZW5ndGgsXG4gICAgICAgIG0gPSBkLmxlbmd0aDtcblxuICAgIHN3aXRjaCAobSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxOlxuICAgICAgICB2YXIgYiA9IDA7XG5cbiAgICAgICAgZm9yIChkID0gMCA9PT0gbSA/ICcnIDogZFswXSArICcgJzsgYiA8IGE7ICsrYikge1xuICAgICAgICAgIGNbYl0gPSBaKGQsIGNbYl0sIGUpLnRyaW0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YXIgdiA9IGIgPSAwO1xuXG4gICAgICAgIGZvciAoYyA9IFtdOyBiIDwgYTsgKytiKSB7XG4gICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBtOyArK24pIHtcbiAgICAgICAgICAgIGNbdisrXSA9IFooZFtuXSArICcgJywgaFtiXSwgZSkudHJpbSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIGM7XG4gIH1cblxuICBmdW5jdGlvbiBaKGQsIGMsIGUpIHtcbiAgICB2YXIgaCA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICAzMyA+IGggJiYgKGggPSAoYyA9IGMudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcblxuICAgIHN3aXRjaCAoaCkge1xuICAgICAgY2FzZSAzODpcbiAgICAgICAgcmV0dXJuIGMucmVwbGFjZShGLCAnJDEnICsgZC50cmltKCkpO1xuXG4gICAgICBjYXNlIDU4OlxuICAgICAgICByZXR1cm4gZC50cmltKCkgKyBjLnJlcGxhY2UoRiwgJyQxJyArIGQudHJpbSgpKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKDAgPCAxICogZSAmJiAwIDwgYy5pbmRleE9mKCdcXGYnKSkgcmV0dXJuIGMucmVwbGFjZShGLCAoNTggPT09IGQuY2hhckNvZGVBdCgwKSA/ICcnIDogJyQxJykgKyBkLnRyaW0oKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGQgKyBjO1xuICB9XG5cbiAgZnVuY3Rpb24gUChkLCBjLCBlLCBoKSB7XG4gICAgdmFyIGEgPSBkICsgJzsnLFxuICAgICAgICBtID0gMiAqIGMgKyAzICogZSArIDQgKiBoO1xuXG4gICAgaWYgKDk0NCA9PT0gbSkge1xuICAgICAgZCA9IGEuaW5kZXhPZignOicsIDkpICsgMTtcbiAgICAgIHZhciBiID0gYS5zdWJzdHJpbmcoZCwgYS5sZW5ndGggLSAxKS50cmltKCk7XG4gICAgICBiID0gYS5zdWJzdHJpbmcoMCwgZCkudHJpbSgpICsgYiArICc7JztcbiAgICAgIHJldHVybiAxID09PSB3IHx8IDIgPT09IHcgJiYgTChiLCAxKSA/ICctd2Via2l0LScgKyBiICsgYiA6IGI7XG4gICAgfVxuXG4gICAgaWYgKDAgPT09IHcgfHwgMiA9PT0gdyAmJiAhTChhLCAxKSkgcmV0dXJuIGE7XG5cbiAgICBzd2l0Y2ggKG0pIHtcbiAgICAgIGNhc2UgMTAxNTpcbiAgICAgICAgcmV0dXJuIDk3ID09PSBhLmNoYXJDb2RlQXQoMTApID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSA5NTE6XG4gICAgICAgIHJldHVybiAxMTYgPT09IGEuY2hhckNvZGVBdCgzKSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTYzOlxuICAgICAgICByZXR1cm4gMTEwID09PSBhLmNoYXJDb2RlQXQoNSkgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDEwMDk6XG4gICAgICAgIGlmICgxMDAgIT09IGEuY2hhckNvZGVBdCg0KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTY5OlxuICAgICAgY2FzZSA5NDI6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgOTc4OlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1vei0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAxOTpcbiAgICAgIGNhc2UgOTgzOlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1vei0nICsgYSArICctbXMtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDg4MzpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoOCkpIHJldHVybiAnLXdlYmtpdC0nICsgYSArIGE7XG4gICAgICAgIGlmICgwIDwgYS5pbmRleE9mKCdpbWFnZS1zZXQoJywgMTEpKSByZXR1cm4gYS5yZXBsYWNlKGphLCAnJDEtd2Via2l0LSQyJykgKyBhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5MzI6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDQpKSBzd2l0Y2ggKGEuY2hhckNvZGVBdCg1KSkge1xuICAgICAgICAgIGNhc2UgMTAzOlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LWJveC0nICsgYS5yZXBsYWNlKCctZ3JvdycsICcnKSArICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdncm93JywgJ3Bvc2l0aXZlJykgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ3NocmluaycsICduZWdhdGl2ZScpICsgYTtcblxuICAgICAgICAgIGNhc2UgOTg6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ2Jhc2lzJywgJ3ByZWZlcnJlZC1zaXplJykgKyBhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDk2NDpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LScgKyBhICsgYTtcblxuICAgICAgY2FzZSAxMDIzOlxuICAgICAgICBpZiAoOTkgIT09IGEuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG4gICAgICAgIGIgPSBhLnN1YnN0cmluZyhhLmluZGV4T2YoJzonLCAxNSkpLnJlcGxhY2UoJ2ZsZXgtJywgJycpLnJlcGxhY2UoJ3NwYWNlLWJldHdlZW4nLCAnanVzdGlmeScpO1xuICAgICAgICByZXR1cm4gJy13ZWJraXQtYm94LXBhY2snICsgYiArICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LXBhY2snICsgYiArIGE7XG5cbiAgICAgIGNhc2UgMTAwNTpcbiAgICAgICAgcmV0dXJuIGthLnRlc3QoYSkgPyBhLnJlcGxhY2UoYWEsICc6LXdlYmtpdC0nKSArIGEucmVwbGFjZShhYSwgJzotbW96LScpICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgMWUzOlxuICAgICAgICBiID0gYS5zdWJzdHJpbmcoMTMpLnRyaW0oKTtcbiAgICAgICAgYyA9IGIuaW5kZXhPZignLScpICsgMTtcblxuICAgICAgICBzd2l0Y2ggKGIuY2hhckNvZGVBdCgwKSArIGIuY2hhckNvZGVBdChjKSkge1xuICAgICAgICAgIGNhc2UgMjI2OlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAndGInKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMzI6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICd0Yi1ybCcpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIyMDpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ2xyJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMTc6XG4gICAgICAgIGlmICgtMSA9PT0gYS5pbmRleE9mKCdzdGlja3knLCA5KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTc1OlxuICAgICAgICBjID0gKGEgPSBkKS5sZW5ndGggLSAxMDtcbiAgICAgICAgYiA9ICgzMyA9PT0gYS5jaGFyQ29kZUF0KGMpID8gYS5zdWJzdHJpbmcoMCwgYykgOiBhKS5zdWJzdHJpbmcoZC5pbmRleE9mKCc6JywgNykgKyAxKS50cmltKCk7XG5cbiAgICAgICAgc3dpdGNoIChtID0gYi5jaGFyQ29kZUF0KDApICsgKGIuY2hhckNvZGVBdCg3KSB8IDApKSB7XG4gICAgICAgICAgY2FzZSAyMDM6XG4gICAgICAgICAgICBpZiAoMTExID4gYi5jaGFyQ29kZUF0KDgpKSBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgYSA9IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyAnOycgKyBhO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIwNzpcbiAgICAgICAgICBjYXNlIDEwMjpcbiAgICAgICAgICAgIGEgPSBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArICgxMDIgPCBtID8gJ2lubGluZS0nIDogJycpICsgJ2JveCcpICsgJzsnICsgYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArICc7JyArIGEucmVwbGFjZShiLCAnLW1zLScgKyBiICsgJ2JveCcpICsgJzsnICsgYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhICsgJzsnO1xuXG4gICAgICBjYXNlIDkzODpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoNSkpIHN3aXRjaCAoYS5jaGFyQ29kZUF0KDYpKSB7XG4gICAgICAgICAgY2FzZSAxMDU6XG4gICAgICAgICAgICByZXR1cm4gYiA9IGEucmVwbGFjZSgnLWl0ZW1zJywgJycpLCAnLXdlYmtpdC0nICsgYSArICctd2Via2l0LWJveC0nICsgYiArICctbXMtZmxleC0nICsgYiArIGE7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1pdGVtLScgKyBhLnJlcGxhY2UoYmEsICcnKSArIGE7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LWxpbmUtcGFjaycgKyBhLnJlcGxhY2UoJ2FsaWduLWNvbnRlbnQnLCAnJykucmVwbGFjZShiYSwgJycpICsgYTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5NzM6XG4gICAgICBjYXNlIDk4OTpcbiAgICAgICAgaWYgKDQ1ICE9PSBhLmNoYXJDb2RlQXQoMykgfHwgMTIyID09PSBhLmNoYXJDb2RlQXQoNCkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDkzMTpcbiAgICAgIGNhc2UgOTUzOlxuICAgICAgICBpZiAoITAgPT09IGxhLnRlc3QoZCkpIHJldHVybiAxMTUgPT09IChiID0gZC5zdWJzdHJpbmcoZC5pbmRleE9mKCc6JykgKyAxKSkuY2hhckNvZGVBdCgwKSA/IFAoZC5yZXBsYWNlKCdzdHJldGNoJywgJ2ZpbGwtYXZhaWxhYmxlJyksIGMsIGUsIGgpLnJlcGxhY2UoJzpmaWxsLWF2YWlsYWJsZScsICc6c3RyZXRjaCcpIDogYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArIGEucmVwbGFjZShiLCAnLW1vei0nICsgYi5yZXBsYWNlKCdmaWxsLScsICcnKSkgKyBhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5NjI6XG4gICAgICAgIGlmIChhID0gJy13ZWJraXQtJyArIGEgKyAoMTAyID09PSBhLmNoYXJDb2RlQXQoNSkgPyAnLW1zLScgKyBhIDogJycpICsgYSwgMjExID09PSBlICsgaCAmJiAxMDUgPT09IGEuY2hhckNvZGVBdCgxMykgJiYgMCA8IGEuaW5kZXhPZigndHJhbnNmb3JtJywgMTApKSByZXR1cm4gYS5zdWJzdHJpbmcoMCwgYS5pbmRleE9mKCc7JywgMjcpICsgMSkucmVwbGFjZShtYSwgJyQxLXdlYmtpdC0kMicpICsgYTtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEwoZCwgYykge1xuICAgIHZhciBlID0gZC5pbmRleE9mKDEgPT09IGMgPyAnOicgOiAneycpLFxuICAgICAgICBoID0gZC5zdWJzdHJpbmcoMCwgMyAhPT0gYyA/IGUgOiAxMCk7XG4gICAgZSA9IGQuc3Vic3RyaW5nKGUgKyAxLCBkLmxlbmd0aCAtIDEpO1xuICAgIHJldHVybiBSKDIgIT09IGMgPyBoIDogaC5yZXBsYWNlKG5hLCAnJDEnKSwgZSwgYyk7XG4gIH1cblxuICBmdW5jdGlvbiBlYShkLCBjKSB7XG4gICAgdmFyIGUgPSBQKGMsIGMuY2hhckNvZGVBdCgwKSwgYy5jaGFyQ29kZUF0KDEpLCBjLmNoYXJDb2RlQXQoMikpO1xuICAgIHJldHVybiBlICE9PSBjICsgJzsnID8gZS5yZXBsYWNlKG9hLCAnIG9yICgkMSknKS5zdWJzdHJpbmcoNCkgOiAnKCcgKyBjICsgJyknO1xuICB9XG5cbiAgZnVuY3Rpb24gSChkLCBjLCBlLCBoLCBhLCBtLCBiLCB2LCBuLCBxKSB7XG4gICAgZm9yICh2YXIgZyA9IDAsIHggPSBjLCB3OyBnIDwgQTsgKytnKSB7XG4gICAgICBzd2l0Y2ggKHcgPSBTW2ddLmNhbGwoQiwgZCwgeCwgZSwgaCwgYSwgbSwgYiwgdiwgbiwgcSkpIHtcbiAgICAgICAgY2FzZSB2b2lkIDA6XG4gICAgICAgIGNhc2UgITE6XG4gICAgICAgIGNhc2UgITA6XG4gICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHggPSB3O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh4ICE9PSBjKSByZXR1cm4geDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFQoZCkge1xuICAgIHN3aXRjaCAoZCkge1xuICAgICAgY2FzZSB2b2lkIDA6XG4gICAgICBjYXNlIG51bGw6XG4gICAgICAgIEEgPSBTLmxlbmd0aCA9IDA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGQpIFNbQSsrXSA9IGQ7ZWxzZSBpZiAoJ29iamVjdCcgPT09IHR5cGVvZiBkKSBmb3IgKHZhciBjID0gMCwgZSA9IGQubGVuZ3RoOyBjIDwgZTsgKytjKSB7XG4gICAgICAgICAgVChkW2NdKTtcbiAgICAgICAgfSBlbHNlIFkgPSAhIWQgfCAwO1xuICAgIH1cblxuICAgIHJldHVybiBUO1xuICB9XG5cbiAgZnVuY3Rpb24gVShkKSB7XG4gICAgZCA9IGQucHJlZml4O1xuICAgIHZvaWQgMCAhPT0gZCAmJiAoUiA9IG51bGwsIGQgPyAnZnVuY3Rpb24nICE9PSB0eXBlb2YgZCA/IHcgPSAxIDogKHcgPSAyLCBSID0gZCkgOiB3ID0gMCk7XG4gICAgcmV0dXJuIFU7XG4gIH1cblxuICBmdW5jdGlvbiBCKGQsIGMpIHtcbiAgICB2YXIgZSA9IGQ7XG4gICAgMzMgPiBlLmNoYXJDb2RlQXQoMCkgJiYgKGUgPSBlLnRyaW0oKSk7XG4gICAgViA9IGU7XG4gICAgZSA9IFtWXTtcblxuICAgIGlmICgwIDwgQSkge1xuICAgICAgdmFyIGggPSBIKC0xLCBjLCBlLCBlLCBELCB6LCAwLCAwLCAwLCAwKTtcbiAgICAgIHZvaWQgMCAhPT0gaCAmJiAnc3RyaW5nJyA9PT0gdHlwZW9mIGggJiYgKGMgPSBoKTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IE0oTywgZSwgYywgMCwgMCk7XG4gICAgMCA8IEEgJiYgKGggPSBIKC0yLCBhLCBlLCBlLCBELCB6LCBhLmxlbmd0aCwgMCwgMCwgMCksIHZvaWQgMCAhPT0gaCAmJiAoYSA9IGgpKTtcbiAgICBWID0gJyc7XG4gICAgRSA9IDA7XG4gICAgeiA9IEQgPSAxO1xuICAgIHJldHVybiBhO1xuICB9XG5cbiAgdmFyIGNhID0gL15cXDArL2csXG4gICAgICBOID0gL1tcXDBcXHJcXGZdL2csXG4gICAgICBhYSA9IC86ICovZyxcbiAgICAgIGthID0gL3pvb3xncmEvLFxuICAgICAgbWEgPSAvKFssOiBdKSh0cmFuc2Zvcm0pL2csXG4gICAgICBpYSA9IC8sXFxyKz8vZyxcbiAgICAgIEYgPSAvKFtcXHRcXHJcXG4gXSkqXFxmPyYvZyxcbiAgICAgIGZhID0gL0Aoa1xcdyspXFxzKihcXFMqKVxccyovLFxuICAgICAgUSA9IC86OihwbGFjZSkvZyxcbiAgICAgIGhhID0gLzoocmVhZC1vbmx5KS9nLFxuICAgICAgRyA9IC9bc3ZoXVxcdystW3RibHJdezJ9LyxcbiAgICAgIGRhID0gL1xcKFxccyooLiopXFxzKlxcKS9nLFxuICAgICAgb2EgPSAvKFtcXHNcXFNdKj8pOy9nLFxuICAgICAgYmEgPSAvLXNlbGZ8ZmxleC0vZyxcbiAgICAgIG5hID0gL1teXSo/KDpbcnBdW2VsXWFbXFx3LV0rKVteXSovLFxuICAgICAgbGEgPSAvc3RyZXRjaHw6XFxzKlxcdytcXC0oPzpjb250ZXxhdmFpbCkvLFxuICAgICAgamEgPSAvKFteLV0pKGltYWdlLXNldFxcKCkvLFxuICAgICAgeiA9IDEsXG4gICAgICBEID0gMSxcbiAgICAgIEUgPSAwLFxuICAgICAgdyA9IDEsXG4gICAgICBPID0gW10sXG4gICAgICBTID0gW10sXG4gICAgICBBID0gMCxcbiAgICAgIFIgPSBudWxsLFxuICAgICAgWSA9IDAsXG4gICAgICBWID0gJyc7XG4gIEIudXNlID0gVDtcbiAgQi5zZXQgPSBVO1xuICB2b2lkIDAgIT09IFcgJiYgVShXKTtcbiAgcmV0dXJuIEI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxpc19taW47XG4iLCJ2YXIgdW5pdGxlc3NLZXlzID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdW5pdGxlc3NLZXlzO1xuIiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhY2NlcHR8YWNjZXB0Q2hhcnNldHxhY2Nlc3NLZXl8YWN0aW9ufGFsbG93fGFsbG93VXNlck1lZGlhfGFsbG93UGF5bWVudFJlcXVlc3R8YWxsb3dGdWxsU2NyZWVufGFsbG93VHJhbnNwYXJlbmN5fGFsdHxhc3luY3xhdXRvQ29tcGxldGV8YXV0b1BsYXl8Y2FwdHVyZXxjZWxsUGFkZGluZ3xjZWxsU3BhY2luZ3xjaGFsbGVuZ2V8Y2hhclNldHxjaGVja2VkfGNpdGV8Y2xhc3NJRHxjbGFzc05hbWV8Y29sc3xjb2xTcGFufGNvbnRlbnR8Y29udGVudEVkaXRhYmxlfGNvbnRleHRNZW51fGNvbnRyb2xzfGNvbnRyb2xzTGlzdHxjb29yZHN8Y3Jvc3NPcmlnaW58ZGF0YXxkYXRlVGltZXxkZWNvZGluZ3xkZWZhdWx0fGRlZmVyfGRpcnxkaXNhYmxlZHxkaXNhYmxlUGljdHVyZUluUGljdHVyZXxkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxmb3JtfGZvcm1BY3Rpb258Zm9ybUVuY1R5cGV8Zm9ybU1ldGhvZHxmb3JtTm9WYWxpZGF0ZXxmb3JtVGFyZ2V0fGZyYW1lQm9yZGVyfGhlYWRlcnN8aGVpZ2h0fGhpZGRlbnxoaWdofGhyZWZ8aHJlZkxhbmd8aHRtbEZvcnxodHRwRXF1aXZ8aWR8aW5wdXRNb2RlfGludGVncml0eXxpc3xrZXlQYXJhbXN8a2V5VHlwZXxraW5kfGxhYmVsfGxhbmd8bGlzdHxsb2FkaW5nfGxvb3B8bG93fG1hcmdpbkhlaWdodHxtYXJnaW5XaWR0aHxtYXh8bWF4TGVuZ3RofG1lZGlhfG1lZGlhR3JvdXB8bWV0aG9kfG1pbnxtaW5MZW5ndGh8bXVsdGlwbGV8bXV0ZWR8bmFtZXxub25jZXxub1ZhbGlkYXRlfG9wZW58b3B0aW11bXxwYXR0ZXJufHBsYWNlaG9sZGVyfHBsYXlzSW5saW5lfHBvc3RlcnxwcmVsb2FkfHByb2ZpbGV8cmFkaW9Hcm91cHxyZWFkT25seXxyZWZlcnJlclBvbGljeXxyZWx8cmVxdWlyZWR8cmV2ZXJzZWR8cm9sZXxyb3dzfHJvd1NwYW58c2FuZGJveHxzY29wZXxzY29wZWR8c2Nyb2xsaW5nfHNlYW1sZXNzfHNlbGVjdGVkfHNoYXBlfHNpemV8c2l6ZXN8c2xvdHxzcGFufHNwZWxsQ2hlY2t8c3JjfHNyY0RvY3xzcmNMYW5nfHNyY1NldHxzdGFydHxzdGVwfHN0eWxlfHN1bW1hcnl8dGFiSW5kZXh8dGFyZ2V0fHRpdGxlfHR5cGV8dXNlTWFwfHZhbHVlfHdpZHRofHdtb2RlfHdyYXB8YWJvdXR8ZGF0YXR5cGV8aW5saXN0fHByZWZpeHxwcm9wZXJ0eXxyZXNvdXJjZXx0eXBlb2Z8dm9jYWJ8YXV0b0NhcGl0YWxpemV8YXV0b0NvcnJlY3R8YXV0b1NhdmV8Y29sb3J8aW5lcnR8aXRlbVByb3B8aXRlbVNjb3BlfGl0ZW1UeXBlfGl0ZW1JRHxpdGVtUmVmfG9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGluZGV4ID0gbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsImZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemU7XG4iLCIvLyBAZmxvd1xuXG5kZWNsYXJlIHZhciBTQ19ESVNBQkxFX1NQRUVEWTogP2Jvb2xlYW47XG5kZWNsYXJlIHZhciBfX1ZFUlNJT05fXzogc3RyaW5nO1xuXG5leHBvcnQgY29uc3QgU0NfQVRUUjogc3RyaW5nID1cbiAgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAocHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0FUVFIgfHwgcHJvY2Vzcy5lbnYuU0NfQVRUUikpIHx8XG4gICdkYXRhLXN0eWxlZCc7XG5cbmV4cG9ydCBjb25zdCBTQ19BVFRSX0FDVElWRSA9ICdhY3RpdmUnO1xuZXhwb3J0IGNvbnN0IFNDX0FUVFJfVkVSU0lPTiA9ICdkYXRhLXN0eWxlZC12ZXJzaW9uJztcbmV4cG9ydCBjb25zdCBTQ19WRVJTSU9OID0gX19WRVJTSU9OX187XG5leHBvcnQgY29uc3QgU1BMSVRURVIgPSAnLyohc2MqL1xcbic7XG5cbmV4cG9ydCBjb25zdCBJU19CUk9XU0VSID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ0hUTUxFbGVtZW50JyBpbiB3aW5kb3c7XG5cbmV4cG9ydCBjb25zdCBESVNBQkxFX1NQRUVEWSA9XG4gIEJvb2xlYW4odHlwZW9mIFNDX0RJU0FCTEVfU1BFRURZID09PSAnYm9vbGVhbidcbiAgICA/IFNDX0RJU0FCTEVfU1BFRURZXG4gICAgOiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFkgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWSAhPT0gJydcbiAgICAgID8gcHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZID09PSAnZmFsc2UnID8gZmFsc2UgOiBwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFlcbiAgICAgIDogKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFkgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52LlNDX0RJU0FCTEVfU1BFRURZICE9PSAnJ1xuICAgICAgICA/IHByb2Nlc3MuZW52LlNDX0RJU0FCTEVfU1BFRURZID09PSAnZmFsc2UnID8gZmFsc2UgOiBwcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWVxuICAgICAgICA6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgIClcbiAgICApKTtcblxuLy8gU2hhcmVkIGVtcHR5IGV4ZWN1dGlvbiBjb250ZXh0IHdoZW4gZ2VuZXJhdGluZyBzdGF0aWMgc3R5bGVzXG5leHBvcnQgY29uc3QgU1RBVElDX0VYRUNVVElPTl9DT05URVhUID0ge307XG4iLCIvLyBAZmxvd1xuLyogZXNsaW50LWRpc2FibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUgKi9cblxuaW1wb3J0IHsgbWFrZVN0eWxlVGFnLCBnZXRTaGVldCB9IGZyb20gJy4vZG9tJztcbmltcG9ydCB0eXBlIHsgU2hlZXRPcHRpb25zLCBUYWcgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqIENyZWF0ZSBhIENTU1N0eWxlU2hlZXQtbGlrZSB0YWcgZGVwZW5kaW5nIG9uIHRoZSBlbnZpcm9ubWVudCAqL1xuZXhwb3J0IGNvbnN0IG1ha2VUYWcgPSAoeyBpc1NlcnZlciwgdXNlQ1NTT01JbmplY3Rpb24sIHRhcmdldCB9OiBTaGVldE9wdGlvbnMpOiBUYWcgPT4ge1xuICBpZiAoaXNTZXJ2ZXIpIHtcbiAgICByZXR1cm4gbmV3IFZpcnR1YWxUYWcodGFyZ2V0KTtcbiAgfSBlbHNlIGlmICh1c2VDU1NPTUluamVjdGlvbikge1xuICAgIHJldHVybiBuZXcgQ1NTT01UYWcodGFyZ2V0KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IFRleHRUYWcodGFyZ2V0KTtcbiAgfVxufTtcblxuZXhwb3J0IGNsYXNzIENTU09NVGFnIGltcGxlbWVudHMgVGFnIHtcbiAgZWxlbWVudDogSFRNTFN0eWxlRWxlbWVudDtcblxuICBzaGVldDogQ1NTU3R5bGVTaGVldDtcblxuICBsZW5ndGg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcih0YXJnZXQ/OiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSAodGhpcy5lbGVtZW50ID0gbWFrZVN0eWxlVGFnKHRhcmdldCkpO1xuXG4gICAgLy8gQXZvaWQgRWRnZSBidWcgd2hlcmUgZW1wdHkgc3R5bGUgZWxlbWVudHMgZG9uJ3QgY3JlYXRlIHNoZWV0c1xuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpKTtcblxuICAgIHRoaXMuc2hlZXQgPSBnZXRTaGVldChlbGVtZW50KTtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBpbnNlcnRSdWxlKGluZGV4OiBudW1iZXIsIHJ1bGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLnNoZWV0Lmluc2VydFJ1bGUocnVsZSwgaW5kZXgpO1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKF9lcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGRlbGV0ZVJ1bGUoaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuc2hlZXQuZGVsZXRlUnVsZShpbmRleCk7XG4gICAgdGhpcy5sZW5ndGgtLTtcbiAgfVxuXG4gIGdldFJ1bGUoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgY29uc3QgcnVsZSA9IHRoaXMuc2hlZXQuY3NzUnVsZXNbaW5kZXhdO1xuICAgIC8vIEF2b2lkIElFMTEgcXVpcmsgd2hlcmUgY3NzVGV4dCBpcyBpbmFjY2Vzc2libGUgb24gc29tZSBpbnZhbGlkIHJ1bGVzXG4gICAgaWYgKHJ1bGUgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgcnVsZS5jc3NUZXh0ID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHJ1bGUuY3NzVGV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufVxuXG4vKiogQSBUYWcgdGhhdCBlbXVsYXRlcyB0aGUgQ1NTU3R5bGVTaGVldCBBUEkgYnV0IHVzZXMgdGV4dCBub2RlcyAqL1xuZXhwb3J0IGNsYXNzIFRleHRUYWcgaW1wbGVtZW50cyBUYWcge1xuICBlbGVtZW50OiBIVE1MU3R5bGVFbGVtZW50O1xuXG4gIG5vZGVzOiBOb2RlTGlzdDxOb2RlPjtcblxuICBsZW5ndGg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcih0YXJnZXQ/OiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSAodGhpcy5lbGVtZW50ID0gbWFrZVN0eWxlVGFnKHRhcmdldCkpO1xuICAgIHRoaXMubm9kZXMgPSBlbGVtZW50LmNoaWxkTm9kZXM7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgaW5zZXJ0UnVsZShpbmRleDogbnVtYmVyLCBydWxlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAoaW5kZXggPD0gdGhpcy5sZW5ndGggJiYgaW5kZXggPj0gMCkge1xuICAgICAgY29uc3Qgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGUpO1xuICAgICAgY29uc3QgcmVmTm9kZSA9IHRoaXMubm9kZXNbaW5kZXhdO1xuICAgICAgdGhpcy5lbGVtZW50Lmluc2VydEJlZm9yZShub2RlLCByZWZOb2RlIHx8IG51bGwpO1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZGVsZXRlUnVsZShpbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMubm9kZXNbaW5kZXhdKTtcbiAgICB0aGlzLmxlbmd0aC0tO1xuICB9XG5cbiAgZ2V0UnVsZShpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpZiAoaW5kZXggPCB0aGlzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZXNbaW5kZXhdLnRleHRDb250ZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59XG5cbi8qKiBBIGNvbXBsZXRlbHkgdmlydHVhbCAoc2VydmVyLXNpZGUpIFRhZyB0aGF0IGRvZXNuJ3QgbWFuaXB1bGF0ZSB0aGUgRE9NICovXG5leHBvcnQgY2xhc3MgVmlydHVhbFRhZyBpbXBsZW1lbnRzIFRhZyB7XG4gIHJ1bGVzOiBzdHJpbmdbXTtcblxuICBsZW5ndGg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihfdGFyZ2V0PzogSFRNTEVsZW1lbnQpIHtcbiAgICB0aGlzLnJ1bGVzID0gW107XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgaW5zZXJ0UnVsZShpbmRleDogbnVtYmVyLCBydWxlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAoaW5kZXggPD0gdGhpcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMucnVsZXMuc3BsaWNlKGluZGV4LCAwLCBydWxlKTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGRlbGV0ZVJ1bGUoaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMucnVsZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB0aGlzLmxlbmd0aC0tO1xuICB9XG5cbiAgZ2V0UnVsZShpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpZiAoaW5kZXggPCB0aGlzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMucnVsZXNbaW5kZXhdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHsgRElTQUJMRV9TUEVFRFksIElTX0JST1dTRVIgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgRU1QVFlfT0JKRUNUIH0gZnJvbSAnLi4vdXRpbHMvZW1wdGllcyc7XG5pbXBvcnQgeyBtYWtlR3JvdXBlZFRhZyB9IGZyb20gJy4vR3JvdXBlZFRhZyc7XG5pbXBvcnQgeyBnZXRHcm91cEZvcklkIH0gZnJvbSAnLi9Hcm91cElEQWxsb2NhdG9yJztcbmltcG9ydCB7IG91dHB1dFNoZWV0LCByZWh5ZHJhdGVTaGVldCB9IGZyb20gJy4vUmVoeWRyYXRpb24nO1xuaW1wb3J0IHsgbWFrZVRhZyB9IGZyb20gJy4vVGFnJztcbmltcG9ydCB0eXBlIHsgR3JvdXBlZFRhZywgU2hlZXQsIFNoZWV0T3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuXG5sZXQgU0hPVUxEX1JFSFlEUkFURSA9IElTX0JST1dTRVI7XG5cbnR5cGUgU2hlZXRDb25zdHJ1Y3RvckFyZ3MgPSB7XG4gIGlzU2VydmVyPzogYm9vbGVhbixcbiAgdXNlQ1NTT01JbmplY3Rpb24/OiBib29sZWFuLFxuICB0YXJnZXQ/OiBIVE1MRWxlbWVudCxcbn07XG5cbnR5cGUgR2xvYmFsU3R5bGVzQWxsb2NhdGlvbk1hcCA9IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH07XG50eXBlIE5hbWVzQWxsb2NhdGlvbk1hcCA9IE1hcDxzdHJpbmcsIFNldDxzdHJpbmc+PjtcblxuY29uc3QgZGVmYXVsdE9wdGlvbnM6IFNoZWV0T3B0aW9ucyA9IHtcbiAgaXNTZXJ2ZXI6ICFJU19CUk9XU0VSLFxuICB1c2VDU1NPTUluamVjdGlvbjogIURJU0FCTEVfU1BFRURZLFxufTtcblxuLyoqIENvbnRhaW5zIHRoZSBtYWluIHN0eWxlc2hlZXQgbG9naWMgZm9yIHN0cmluZ2lmaWNhdGlvbiBhbmQgY2FjaGluZyAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3R5bGVTaGVldCBpbXBsZW1lbnRzIFNoZWV0IHtcbiAgZ3M6IEdsb2JhbFN0eWxlc0FsbG9jYXRpb25NYXA7XG5cbiAgbmFtZXM6IE5hbWVzQWxsb2NhdGlvbk1hcDtcblxuICBvcHRpb25zOiBTaGVldE9wdGlvbnM7XG5cbiAgdGFnOiB2b2lkIHwgR3JvdXBlZFRhZztcblxuICAvKiogUmVnaXN0ZXIgYSBncm91cCBJRCB0byBnaXZlIGl0IGFuIGluZGV4ICovXG4gIHN0YXRpYyByZWdpc3RlcklkKGlkOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIHJldHVybiBnZXRHcm91cEZvcklkKGlkKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIG9wdGlvbnM6IFNoZWV0Q29uc3RydWN0b3JBcmdzID0gRU1QVFlfT0JKRUNULFxuICAgIGdsb2JhbFN0eWxlcz86IEdsb2JhbFN0eWxlc0FsbG9jYXRpb25NYXAgPSB7fSxcbiAgICBuYW1lcz86IE5hbWVzQWxsb2NhdGlvbk1hcFxuICApIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAuLi5kZWZhdWx0T3B0aW9ucyxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgfTtcblxuICAgIHRoaXMuZ3MgPSBnbG9iYWxTdHlsZXM7XG4gICAgdGhpcy5uYW1lcyA9IG5ldyBNYXAobmFtZXMpO1xuXG4gICAgLy8gV2UgcmVoeWRyYXRlIG9ubHkgb25jZSBhbmQgdXNlIHRoZSBzaGVldCB0aGF0IGlzIGNyZWF0ZWQgZmlyc3RcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5pc1NlcnZlciAmJiBJU19CUk9XU0VSICYmIFNIT1VMRF9SRUhZRFJBVEUpIHtcbiAgICAgIFNIT1VMRF9SRUhZRFJBVEUgPSBmYWxzZTtcbiAgICAgIHJlaHlkcmF0ZVNoZWV0KHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIHJlY29uc3RydWN0V2l0aE9wdGlvbnMob3B0aW9uczogU2hlZXRDb25zdHJ1Y3RvckFyZ3MsIHdpdGhOYW1lcz86IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgcmV0dXJuIG5ldyBTdHlsZVNoZWV0KFxuICAgICAgeyAuLi50aGlzLm9wdGlvbnMsIC4uLm9wdGlvbnMgfSxcbiAgICAgIHRoaXMuZ3MsXG4gICAgICAod2l0aE5hbWVzICYmIHRoaXMubmFtZXMpIHx8IHVuZGVmaW5lZFxuICAgICk7XG4gIH1cblxuICBhbGxvY2F0ZUdTSW5zdGFuY2UoaWQ6IHN0cmluZykge1xuICAgIHJldHVybiAodGhpcy5nc1tpZF0gPSAodGhpcy5nc1tpZF0gfHwgMCkgKyAxKTtcbiAgfVxuXG4gIC8qKiBMYXppbHkgaW5pdGlhbGlzZXMgYSBHcm91cGVkVGFnIGZvciB3aGVuIGl0J3MgYWN0dWFsbHkgbmVlZGVkICovXG4gIGdldFRhZygpOiBHcm91cGVkVGFnIHtcbiAgICByZXR1cm4gdGhpcy50YWcgfHwgKHRoaXMudGFnID0gbWFrZUdyb3VwZWRUYWcobWFrZVRhZyh0aGlzLm9wdGlvbnMpKSk7XG4gIH1cblxuICAvKiogQ2hlY2sgd2hldGhlciBhIG5hbWUgaXMga25vd24gZm9yIGNhY2hpbmcgKi9cbiAgaGFzTmFtZUZvcklkKGlkOiBzdHJpbmcsIG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm5hbWVzLmhhcyhpZCkgJiYgKHRoaXMubmFtZXMuZ2V0KGlkKTogYW55KS5oYXMobmFtZSk7XG4gIH1cblxuICAvKiogTWFyayBhIGdyb3VwJ3MgbmFtZSBhcyBrbm93biBmb3IgY2FjaGluZyAqL1xuICByZWdpc3Rlck5hbWUoaWQ6IHN0cmluZywgbmFtZTogc3RyaW5nKSB7XG4gICAgZ2V0R3JvdXBGb3JJZChpZCk7XG5cbiAgICBpZiAoIXRoaXMubmFtZXMuaGFzKGlkKSkge1xuICAgICAgY29uc3QgZ3JvdXBOYW1lcyA9IG5ldyBTZXQoKTtcbiAgICAgIGdyb3VwTmFtZXMuYWRkKG5hbWUpO1xuICAgICAgdGhpcy5uYW1lcy5zZXQoaWQsIGdyb3VwTmFtZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAodGhpcy5uYW1lcy5nZXQoaWQpOiBhbnkpLmFkZChuYW1lKTtcbiAgICB9XG4gIH1cblxuICAvKiogSW5zZXJ0IG5ldyBydWxlcyB3aGljaCBhbHNvIG1hcmtzIHRoZSBuYW1lIGFzIGtub3duICovXG4gIGluc2VydFJ1bGVzKGlkOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgcnVsZXM6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5yZWdpc3Rlck5hbWUoaWQsIG5hbWUpO1xuICAgIHRoaXMuZ2V0VGFnKCkuaW5zZXJ0UnVsZXMoZ2V0R3JvdXBGb3JJZChpZCksIHJ1bGVzKTtcbiAgfVxuXG4gIC8qKiBDbGVhcnMgYWxsIGNhY2hlZCBuYW1lcyBmb3IgYSBnaXZlbiBncm91cCBJRCAqL1xuICBjbGVhck5hbWVzKGlkOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5uYW1lcy5oYXMoaWQpKSB7XG4gICAgICAodGhpcy5uYW1lcy5nZXQoaWQpOiBhbnkpLmNsZWFyKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIENsZWFycyBhbGwgcnVsZXMgZm9yIGEgZ2l2ZW4gZ3JvdXAgSUQgKi9cbiAgY2xlYXJSdWxlcyhpZDogc3RyaW5nKSB7XG4gICAgdGhpcy5nZXRUYWcoKS5jbGVhckdyb3VwKGdldEdyb3VwRm9ySWQoaWQpKTtcbiAgICB0aGlzLmNsZWFyTmFtZXMoaWQpO1xuICB9XG5cbiAgLyoqIENsZWFycyB0aGUgZW50aXJlIHRhZyB3aGljaCBkZWxldGVzIGFsbCBydWxlcyBidXQgbm90IGl0cyBuYW1lcyAqL1xuICBjbGVhclRhZygpIHtcbiAgICAvLyBOT1RFOiBUaGlzIGRvZXMgbm90IGNsZWFyIHRoZSBuYW1lcywgc2luY2UgaXQncyBvbmx5IHVzZWQgZHVyaW5nIFNTUlxuICAgIC8vIHNvIHRoYXQgd2UgY2FuIGNvbnRpbnVvdXNseSBvdXRwdXQgb25seSBuZXcgcnVsZXNcbiAgICB0aGlzLnRhZyA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKiBPdXRwdXRzIHRoZSBjdXJyZW50IHNoZWV0IGFzIGEgQ1NTIHN0cmluZyB3aXRoIG1hcmtlcnMgZm9yIFNTUiAqL1xuICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiBvdXRwdXRTaGVldCh0aGlzKTtcbiAgfVxufVxuIiwiLy8gQGZsb3dcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbic7XG5pbXBvcnQgaXNTdHlsZWRDb21wb25lbnQgZnJvbSAnLi9pc1N0eWxlZENvbXBvbmVudCc7XG5pbXBvcnQgdHlwZSB7IFJ1bGVTZXQgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzU3RhdGljUnVsZXMocnVsZXM6IFJ1bGVTZXQpOiBib29sZWFuIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHJ1bGUgPSBydWxlc1tpXTtcblxuICAgIGlmIChpc0Z1bmN0aW9uKHJ1bGUpICYmICFpc1N0eWxlZENvbXBvbmVudChydWxlKSkge1xuICAgICAgLy8gZnVuY3Rpb25zIGFyZSBhbGxvd2VkIHRvIGJlIHN0YXRpYyBpZiB0aGV5J3JlIGp1c3QgYmVpbmdcbiAgICAgIC8vIHVzZWQgdG8gZ2V0IHRoZSBjbGFzc25hbWUgb2YgYSBuZXN0ZWQgc3R5bGVkIGNvbXBvbmVudFxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJy4uL3NoZWV0JztcbmltcG9ydCB7IHR5cGUgU3RyaW5naWZpZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgdGhyb3dTdHlsZWRFcnJvciBmcm9tICcuLi91dGlscy9lcnJvcic7XG5pbXBvcnQgeyBtYXN0ZXJTdHlsaXMgfSBmcm9tICcuL1N0eWxlU2hlZXRNYW5hZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgS2V5ZnJhbWVzIHtcbiAgaWQ6IHN0cmluZztcblxuICBuYW1lOiBzdHJpbmc7XG5cbiAgcnVsZXM6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHJ1bGVzOiBzdHJpbmcpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuaWQgPSBgc2Mta2V5ZnJhbWVzLSR7bmFtZX1gO1xuICAgIHRoaXMucnVsZXMgPSBydWxlcztcbiAgfVxuXG4gIGluamVjdCA9IChzdHlsZVNoZWV0OiBTdHlsZVNoZWV0LCBzdHlsaXNJbnN0YW5jZTogU3RyaW5naWZpZXIgPSBtYXN0ZXJTdHlsaXMpID0+IHtcbiAgICBjb25zdCByZXNvbHZlZE5hbWUgPSB0aGlzLm5hbWUgKyBzdHlsaXNJbnN0YW5jZS5oYXNoO1xuXG4gICAgaWYgKCFzdHlsZVNoZWV0Lmhhc05hbWVGb3JJZCh0aGlzLmlkLCByZXNvbHZlZE5hbWUpKSB7XG4gICAgICBzdHlsZVNoZWV0Lmluc2VydFJ1bGVzKFxuICAgICAgICB0aGlzLmlkLFxuICAgICAgICByZXNvbHZlZE5hbWUsXG4gICAgICAgIHN0eWxpc0luc3RhbmNlKHRoaXMucnVsZXMsIHJlc29sdmVkTmFtZSwgJ0BrZXlmcmFtZXMnKVxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgdG9TdHJpbmcgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHRocm93U3R5bGVkRXJyb3IoMTIsIFN0cmluZyh0aGlzLm5hbWUpKTtcbiAgfTtcblxuICBnZXROYW1lKHN0eWxpc0luc3RhbmNlOiBTdHJpbmdpZmllciA9IG1hc3RlclN0eWxpcykge1xuICAgIHJldHVybiB0aGlzLm5hbWUgKyBzdHlsaXNJbnN0YW5jZS5oYXNoO1xuICB9XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHZhbGlkQXR0ciBmcm9tICdAZW1vdGlvbi9pcy1wcm9wLXZhbGlkJztcbmltcG9ydCBob2lzdCBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgUmVhY3QsIHsgY3JlYXRlRWxlbWVudCwgdHlwZSBSZWYsIHVzZUNvbnRleHQsIHVzZURlYnVnVmFsdWUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTQ19WRVJTSU9OIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB0eXBlIHtcbiAgQXR0cnMsXG4gIElTdHlsZWRDb21wb25lbnQsXG4gIElTdHlsZWRTdGF0aWNzLFxuICBSdWxlU2V0LFxuICBTaG91bGRGb3J3YXJkUHJvcCxcbiAgVGFyZ2V0LFxufSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBjaGVja0R5bmFtaWNDcmVhdGlvbiB9IGZyb20gJy4uL3V0aWxzL2NoZWNrRHluYW1pY0NyZWF0aW9uJztcbmltcG9ydCBjcmVhdGVXYXJuVG9vTWFueUNsYXNzZXMgZnJvbSAnLi4vdXRpbHMvY3JlYXRlV2FyblRvb01hbnlDbGFzc2VzJztcbmltcG9ydCBkZXRlcm1pbmVUaGVtZSBmcm9tICcuLi91dGlscy9kZXRlcm1pbmVUaGVtZSc7XG5pbXBvcnQgeyBFTVBUWV9BUlJBWSwgRU1QVFlfT0JKRUNUIH0gZnJvbSAnLi4vdXRpbHMvZW1wdGllcyc7XG5pbXBvcnQgZXNjYXBlIGZyb20gJy4uL3V0aWxzL2VzY2FwZSc7XG5pbXBvcnQgZ2VuZXJhdGVDb21wb25lbnRJZCBmcm9tICcuLi91dGlscy9nZW5lcmF0ZUNvbXBvbmVudElkJztcbmltcG9ydCBnZW5lcmF0ZURpc3BsYXlOYW1lIGZyb20gJy4uL3V0aWxzL2dlbmVyYXRlRGlzcGxheU5hbWUnO1xuaW1wb3J0IGdldENvbXBvbmVudE5hbWUgZnJvbSAnLi4vdXRpbHMvZ2V0Q29tcG9uZW50TmFtZSc7XG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuLi91dGlscy9pc0Z1bmN0aW9uJztcbmltcG9ydCBpc1N0eWxlZENvbXBvbmVudCBmcm9tICcuLi91dGlscy9pc1N0eWxlZENvbXBvbmVudCc7XG5pbXBvcnQgaXNUYWcgZnJvbSAnLi4vdXRpbHMvaXNUYWcnO1xuaW1wb3J0IGpvaW5TdHJpbmdzIGZyb20gJy4uL3V0aWxzL2pvaW5TdHJpbmdzJztcbmltcG9ydCBtZXJnZSBmcm9tICcuLi91dGlscy9taXhpbkRlZXAnO1xuaW1wb3J0IENvbXBvbmVudFN0eWxlIGZyb20gJy4vQ29tcG9uZW50U3R5bGUnO1xuaW1wb3J0IHsgdXNlU3R5bGVTaGVldCwgdXNlU3R5bGlzIH0gZnJvbSAnLi9TdHlsZVNoZWV0TWFuYWdlcic7XG5pbXBvcnQgeyBUaGVtZUNvbnRleHQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuXG5jb25zdCBpZGVudGlmaWVycyA9IHt9O1xuXG4vKiBXZSBkZXBlbmQgb24gY29tcG9uZW50cyBoYXZpbmcgdW5pcXVlIElEcyAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVJZChkaXNwbGF5TmFtZT86IHN0cmluZywgcGFyZW50Q29tcG9uZW50SWQ/OiBzdHJpbmcpIHtcbiAgY29uc3QgbmFtZSA9IHR5cGVvZiBkaXNwbGF5TmFtZSAhPT0gJ3N0cmluZycgPyAnc2MnIDogZXNjYXBlKGRpc3BsYXlOYW1lKTtcbiAgLy8gRW5zdXJlIHRoYXQgbm8gZGlzcGxheU5hbWUgY2FuIGxlYWQgdG8gZHVwbGljYXRlIGNvbXBvbmVudElkc1xuICBpZGVudGlmaWVyc1tuYW1lXSA9IChpZGVudGlmaWVyc1tuYW1lXSB8fCAwKSArIDE7XG5cbiAgY29uc3QgY29tcG9uZW50SWQgPSBgJHtuYW1lfS0ke2dlbmVyYXRlQ29tcG9uZW50SWQoXG4gICAgLy8gU0NfVkVSU0lPTiBnaXZlcyB1cyBpc29sYXRpb24gYmV0d2VlbiBtdWx0aXBsZSBydW50aW1lcyBvbiB0aGUgcGFnZSBhdCBvbmNlXG4gICAgLy8gdGhpcyBpcyBpbXByb3ZlZCBmdXJ0aGVyIHdpdGggdXNlIG9mIHRoZSBiYWJlbCBwbHVnaW4gXCJuYW1lc3BhY2VcIiBmZWF0dXJlXG4gICAgU0NfVkVSU0lPTiArIG5hbWUgKyBpZGVudGlmaWVyc1tuYW1lXVxuICApfWA7XG5cbiAgcmV0dXJuIHBhcmVudENvbXBvbmVudElkID8gYCR7cGFyZW50Q29tcG9uZW50SWR9LSR7Y29tcG9uZW50SWR9YCA6IGNvbXBvbmVudElkO1xufVxuXG5mdW5jdGlvbiB1c2VSZXNvbHZlZEF0dHJzPENvbmZpZz4odGhlbWU6IGFueSA9IEVNUFRZX09CSkVDVCwgcHJvcHM6IENvbmZpZywgYXR0cnM6IEF0dHJzKSB7XG4gIC8vIE5PVEU6IGNhbid0IG1lbW9pemUgdGhpc1xuICAvLyByZXR1cm5zIFtjb250ZXh0LCByZXNvbHZlZEF0dHJzXVxuICAvLyB3aGVyZSByZXNvbHZlZEF0dHJzIGlzIG9ubHkgdGhlIHRoaW5ncyBpbmplY3RlZCBieSB0aGUgYXR0cnMgdGhlbXNlbHZlc1xuICBjb25zdCBjb250ZXh0ID0geyAuLi5wcm9wcywgdGhlbWUgfTtcbiAgY29uc3QgcmVzb2x2ZWRBdHRycyA9IHt9O1xuXG4gIGF0dHJzLmZvckVhY2goYXR0ckRlZiA9PiB7XG4gICAgbGV0IHJlc29sdmVkQXR0ckRlZiA9IGF0dHJEZWY7XG4gICAgbGV0IGtleTtcblxuICAgIGlmIChpc0Z1bmN0aW9uKHJlc29sdmVkQXR0ckRlZikpIHtcbiAgICAgIHJlc29sdmVkQXR0ckRlZiA9IHJlc29sdmVkQXR0ckRlZihjb250ZXh0KTtcbiAgICB9XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBndWFyZC1mb3ItaW4gKi9cbiAgICBmb3IgKGtleSBpbiByZXNvbHZlZEF0dHJEZWYpIHtcbiAgICAgIGNvbnRleHRba2V5XSA9IHJlc29sdmVkQXR0cnNba2V5XSA9XG4gICAgICAgIGtleSA9PT0gJ2NsYXNzTmFtZSdcbiAgICAgICAgICA/IGpvaW5TdHJpbmdzKHJlc29sdmVkQXR0cnNba2V5XSwgcmVzb2x2ZWRBdHRyRGVmW2tleV0pXG4gICAgICAgICAgOiByZXNvbHZlZEF0dHJEZWZba2V5XTtcbiAgICB9XG4gICAgLyogZXNsaW50LWVuYWJsZSBndWFyZC1mb3ItaW4gKi9cbiAgfSk7XG5cbiAgcmV0dXJuIFtjb250ZXh0LCByZXNvbHZlZEF0dHJzXTtcbn1cblxuZnVuY3Rpb24gdXNlSW5qZWN0ZWRTdHlsZTxUPihcbiAgY29tcG9uZW50U3R5bGU6IENvbXBvbmVudFN0eWxlLFxuICBpc1N0YXRpYzogYm9vbGVhbixcbiAgcmVzb2x2ZWRBdHRyczogVCxcbiAgd2FyblRvb01hbnlDbGFzc2VzPzogJENhbGw8dHlwZW9mIGNyZWF0ZVdhcm5Ub29NYW55Q2xhc3Nlcywgc3RyaW5nLCBzdHJpbmc+XG4pIHtcbiAgY29uc3Qgc3R5bGVTaGVldCA9IHVzZVN0eWxlU2hlZXQoKTtcbiAgY29uc3Qgc3R5bGlzID0gdXNlU3R5bGlzKCk7XG5cbiAgY29uc3QgY2xhc3NOYW1lID0gaXNTdGF0aWNcbiAgICA/IGNvbXBvbmVudFN0eWxlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKEVNUFRZX09CSkVDVCwgc3R5bGVTaGVldCwgc3R5bGlzKVxuICAgIDogY29tcG9uZW50U3R5bGUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMocmVzb2x2ZWRBdHRycywgc3R5bGVTaGVldCwgc3R5bGlzKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHVzZURlYnVnVmFsdWUoY2xhc3NOYW1lKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNTdGF0aWMgJiYgd2FyblRvb01hbnlDbGFzc2VzKSB7XG4gICAgd2FyblRvb01hbnlDbGFzc2VzKGNsYXNzTmFtZSk7XG4gIH1cblxuICByZXR1cm4gY2xhc3NOYW1lO1xufVxuXG5mdW5jdGlvbiB1c2VTdHlsZWRDb21wb25lbnRJbXBsKFxuICBmb3J3YXJkZWRDb21wb25lbnQ6IElTdHlsZWRDb21wb25lbnQsXG4gIHByb3BzOiBPYmplY3QsXG4gIGZvcndhcmRlZFJlZjogUmVmPGFueT4sXG4gIGlzU3RhdGljOiBib29sZWFuXG4pIHtcbiAgY29uc3Qge1xuICAgIGF0dHJzOiBjb21wb25lbnRBdHRycyxcbiAgICBjb21wb25lbnRTdHlsZSxcbiAgICBkZWZhdWx0UHJvcHMsXG4gICAgZm9sZGVkQ29tcG9uZW50SWRzLFxuICAgIHNob3VsZEZvcndhcmRQcm9wLFxuICAgIHN0eWxlZENvbXBvbmVudElkLFxuICAgIHRhcmdldCxcbiAgfSA9IGZvcndhcmRlZENvbXBvbmVudDtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHVzZURlYnVnVmFsdWUoc3R5bGVkQ29tcG9uZW50SWQpO1xuXG4gIC8vIE5PVEU6IHRoZSBub24taG9va3MgdmVyc2lvbiBvbmx5IHN1YnNjcmliZXMgdG8gdGhpcyB3aGVuICFjb21wb25lbnRTdHlsZS5pc1N0YXRpYyxcbiAgLy8gYnV0IHRoYXQnZCBiZSBhZ2FpbnN0IHRoZSBydWxlcy1vZi1ob29rcy4gV2UgY291bGQgYmUgbmF1Z2h0eSBhbmQgZG8gaXQgYW55d2F5IGFzIGl0XG4gIC8vIHNob3VsZCBiZSBhbiBpbW11dGFibGUgdmFsdWUsIGJ1dCBiZWhhdmUgZm9yIG5vdy5cbiAgY29uc3QgdGhlbWUgPSBkZXRlcm1pbmVUaGVtZShwcm9wcywgdXNlQ29udGV4dChUaGVtZUNvbnRleHQpLCBkZWZhdWx0UHJvcHMpO1xuXG4gIGNvbnN0IFtjb250ZXh0LCBhdHRyc10gPSB1c2VSZXNvbHZlZEF0dHJzKHRoZW1lIHx8IEVNUFRZX09CSkVDVCwgcHJvcHMsIGNvbXBvbmVudEF0dHJzKTtcblxuICBjb25zdCBnZW5lcmF0ZWRDbGFzc05hbWUgPSB1c2VJbmplY3RlZFN0eWxlKFxuICAgIGNvbXBvbmVudFN0eWxlLFxuICAgIGlzU3RhdGljLFxuICAgIGNvbnRleHQsXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGZvcndhcmRlZENvbXBvbmVudC53YXJuVG9vTWFueUNsYXNzZXMgOiB1bmRlZmluZWRcbiAgKTtcblxuICBjb25zdCByZWZUb0ZvcndhcmQgPSBmb3J3YXJkZWRSZWY7XG5cbiAgY29uc3QgZWxlbWVudFRvQmVDcmVhdGVkOiBUYXJnZXQgPSBhdHRycy4kYXMgfHwgcHJvcHMuJGFzIHx8IGF0dHJzLmFzIHx8IHByb3BzLmFzIHx8IHRhcmdldDtcblxuICBjb25zdCBpc1RhcmdldFRhZyA9IGlzVGFnKGVsZW1lbnRUb0JlQ3JlYXRlZCk7XG4gIGNvbnN0IGNvbXB1dGVkUHJvcHMgPSBhdHRycyAhPT0gcHJvcHMgPyB7IC4uLnByb3BzLCAuLi5hdHRycyB9IDogcHJvcHM7XG4gIGNvbnN0IHByb3BzRm9yRWxlbWVudCA9IHt9O1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgZm9yIChjb25zdCBrZXkgaW4gY29tcHV0ZWRQcm9wcykge1xuICAgIGlmIChrZXlbMF0gPT09ICckJyB8fCBrZXkgPT09ICdhcycpIGNvbnRpbnVlO1xuICAgIGVsc2UgaWYgKGtleSA9PT0gJ2ZvcndhcmRlZEFzJykge1xuICAgICAgcHJvcHNGb3JFbGVtZW50LmFzID0gY29tcHV0ZWRQcm9wc1trZXldO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBzaG91bGRGb3J3YXJkUHJvcFxuICAgICAgICA/IHNob3VsZEZvcndhcmRQcm9wKGtleSwgdmFsaWRBdHRyLCBlbGVtZW50VG9CZUNyZWF0ZWQpXG4gICAgICAgIDogaXNUYXJnZXRUYWdcbiAgICAgICAgPyB2YWxpZEF0dHIoa2V5KVxuICAgICAgICA6IHRydWVcbiAgICApIHtcbiAgICAgIC8vIERvbid0IHBhc3MgdGhyb3VnaCBub24gSFRNTCB0YWdzIHRocm91Z2ggdG8gSFRNTCBlbGVtZW50c1xuICAgICAgcHJvcHNGb3JFbGVtZW50W2tleV0gPSBjb21wdXRlZFByb3BzW2tleV07XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb3BzLnN0eWxlICYmIGF0dHJzLnN0eWxlICE9PSBwcm9wcy5zdHlsZSkge1xuICAgIHByb3BzRm9yRWxlbWVudC5zdHlsZSA9IHsgLi4ucHJvcHMuc3R5bGUsIC4uLmF0dHJzLnN0eWxlIH07XG4gIH1cblxuICBwcm9wc0ZvckVsZW1lbnQuY2xhc3NOYW1lID0gQXJyYXkucHJvdG90eXBlXG4gICAgLmNvbmNhdChcbiAgICAgIGZvbGRlZENvbXBvbmVudElkcyxcbiAgICAgIHN0eWxlZENvbXBvbmVudElkLFxuICAgICAgZ2VuZXJhdGVkQ2xhc3NOYW1lICE9PSBzdHlsZWRDb21wb25lbnRJZCA/IGdlbmVyYXRlZENsYXNzTmFtZSA6IG51bGwsXG4gICAgICBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBhdHRycy5jbGFzc05hbWVcbiAgICApXG4gICAgLmZpbHRlcihCb29sZWFuKVxuICAgIC5qb2luKCcgJyk7XG5cbiAgcHJvcHNGb3JFbGVtZW50LnJlZiA9IHJlZlRvRm9yd2FyZDtcblxuICByZXR1cm4gY3JlYXRlRWxlbWVudChlbGVtZW50VG9CZUNyZWF0ZWQsIHByb3BzRm9yRWxlbWVudCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlZENvbXBvbmVudChcbiAgdGFyZ2V0OiAkUHJvcGVydHlUeXBlPElTdHlsZWRDb21wb25lbnQsICd0YXJnZXQnPixcbiAgb3B0aW9uczoge1xuICAgIGF0dHJzPzogQXR0cnMsXG4gICAgY29tcG9uZW50SWQ6IHN0cmluZyxcbiAgICBkaXNwbGF5TmFtZT86IHN0cmluZyxcbiAgICBwYXJlbnRDb21wb25lbnRJZD86IHN0cmluZyxcbiAgICBzaG91bGRGb3J3YXJkUHJvcD86IFNob3VsZEZvcndhcmRQcm9wLFxuICB9LFxuICBydWxlczogUnVsZVNldFxuKSB7XG4gIGNvbnN0IGlzVGFyZ2V0U3R5bGVkQ29tcCA9IGlzU3R5bGVkQ29tcG9uZW50KHRhcmdldCk7XG4gIGNvbnN0IGlzQ29tcG9zaXRlQ29tcG9uZW50ID0gIWlzVGFnKHRhcmdldCk7XG5cbiAgY29uc3Qge1xuICAgIGF0dHJzID0gRU1QVFlfQVJSQVksXG4gICAgY29tcG9uZW50SWQgPSBnZW5lcmF0ZUlkKG9wdGlvbnMuZGlzcGxheU5hbWUsIG9wdGlvbnMucGFyZW50Q29tcG9uZW50SWQpLFxuICAgIGRpc3BsYXlOYW1lID0gZ2VuZXJhdGVEaXNwbGF5TmFtZSh0YXJnZXQpLFxuICB9ID0gb3B0aW9ucztcblxuICBjb25zdCBzdHlsZWRDb21wb25lbnRJZCA9XG4gICAgb3B0aW9ucy5kaXNwbGF5TmFtZSAmJiBvcHRpb25zLmNvbXBvbmVudElkXG4gICAgICA/IGAke2VzY2FwZShvcHRpb25zLmRpc3BsYXlOYW1lKX0tJHtvcHRpb25zLmNvbXBvbmVudElkfWBcbiAgICAgIDogb3B0aW9ucy5jb21wb25lbnRJZCB8fCBjb21wb25lbnRJZDtcblxuICAvLyBmb2xkIHRoZSB1bmRlcmx5aW5nIFN0eWxlZENvbXBvbmVudCBhdHRycyB1cCAoaW1wbGljaXQgZXh0ZW5kKVxuICBjb25zdCBmaW5hbEF0dHJzID1cbiAgICBpc1RhcmdldFN0eWxlZENvbXAgJiYgKCh0YXJnZXQ6IGFueSk6IElTdHlsZWRDb21wb25lbnQpLmF0dHJzXG4gICAgICA/IEFycmF5LnByb3RvdHlwZS5jb25jYXQoKCh0YXJnZXQ6IGFueSk6IElTdHlsZWRDb21wb25lbnQpLmF0dHJzLCBhdHRycykuZmlsdGVyKEJvb2xlYW4pXG4gICAgICA6IGF0dHJzO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICBsZXQgc2hvdWxkRm9yd2FyZFByb3AgPSBvcHRpb25zLnNob3VsZEZvcndhcmRQcm9wO1xuXG4gIGlmIChpc1RhcmdldFN0eWxlZENvbXAgJiYgdGFyZ2V0LnNob3VsZEZvcndhcmRQcm9wKSB7XG4gICAgaWYgKG9wdGlvbnMuc2hvdWxkRm9yd2FyZFByb3ApIHtcbiAgICAgIC8vIGNvbXBvc2UgbmVzdGVkIHNob3VsZEZvcndhcmRQcm9wIGNhbGxzXG4gICAgICBzaG91bGRGb3J3YXJkUHJvcCA9IChwcm9wLCBmaWx0ZXJGbiwgZWxlbWVudFRvQmVDcmVhdGVkKSA9PlxuICAgICAgICAoKCgodGFyZ2V0OiBhbnkpOiBJU3R5bGVkQ29tcG9uZW50KS5zaG91bGRGb3J3YXJkUHJvcDogYW55KTogU2hvdWxkRm9yd2FyZFByb3ApKFxuICAgICAgICAgIHByb3AsXG4gICAgICAgICAgZmlsdGVyRm4sXG4gICAgICAgICAgZWxlbWVudFRvQmVDcmVhdGVkXG4gICAgICAgICkgJiZcbiAgICAgICAgKChvcHRpb25zLnNob3VsZEZvcndhcmRQcm9wOiBhbnkpOiBTaG91bGRGb3J3YXJkUHJvcCkocHJvcCwgZmlsdGVyRm4sIGVsZW1lbnRUb0JlQ3JlYXRlZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgc2hvdWxkRm9yd2FyZFByb3AgPSAoKHRhcmdldDogYW55KTogSVN0eWxlZENvbXBvbmVudCkuc2hvdWxkRm9yd2FyZFByb3A7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgY29tcG9uZW50U3R5bGUgPSBuZXcgQ29tcG9uZW50U3R5bGUoXG4gICAgcnVsZXMsXG4gICAgc3R5bGVkQ29tcG9uZW50SWQsXG4gICAgaXNUYXJnZXRTdHlsZWRDb21wID8gKCh0YXJnZXQ6IE9iamVjdCkuY29tcG9uZW50U3R5bGU6IENvbXBvbmVudFN0eWxlKSA6IHVuZGVmaW5lZFxuICApO1xuXG4gIC8vIHN0YXRpY2FsbHkgc3R5bGVkLWNvbXBvbmVudHMgZG9uJ3QgbmVlZCB0byBidWlsZCBhbiBleGVjdXRpb24gY29udGV4dCBvYmplY3QsXG4gIC8vIGFuZCBzaG91bGRuJ3QgYmUgaW5jcmVhc2luZyB0aGUgbnVtYmVyIG9mIGNsYXNzIG5hbWVzXG4gIGNvbnN0IGlzU3RhdGljID0gY29tcG9uZW50U3R5bGUuaXNTdGF0aWMgJiYgYXR0cnMubGVuZ3RoID09PSAwO1xuXG4gIC8qKlxuICAgKiBmb3J3YXJkUmVmIGNyZWF0ZXMgYSBuZXcgaW50ZXJpbSBjb21wb25lbnQsIHdoaWNoIHdlJ2xsIHRha2UgYWR2YW50YWdlIG9mXG4gICAqIGluc3RlYWQgb2YgZXh0ZW5kaW5nIFBhcmVudENvbXBvbmVudCB0byBjcmVhdGUgX2Fub3RoZXJfIGludGVyaW0gY2xhc3NcbiAgICovXG4gIGxldCBXcmFwcGVkU3R5bGVkQ29tcG9uZW50OiBJU3R5bGVkQ29tcG9uZW50O1xuXG4gIGNvbnN0IGZvcndhcmRSZWYgPSAocHJvcHMsIHJlZikgPT5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICB1c2VTdHlsZWRDb21wb25lbnRJbXBsKFdyYXBwZWRTdHlsZWRDb21wb25lbnQsIHByb3BzLCByZWYsIGlzU3RhdGljKTtcblxuICBmb3J3YXJkUmVmLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG5cbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudCA9ICgoUmVhY3QuZm9yd2FyZFJlZihmb3J3YXJkUmVmKTogYW55KTogSVN0eWxlZENvbXBvbmVudCk7XG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQuYXR0cnMgPSBmaW5hbEF0dHJzO1xuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmNvbXBvbmVudFN0eWxlID0gY29tcG9uZW50U3R5bGU7XG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC5zaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wO1xuXG4gIC8vIHRoaXMgc3RhdGljIGlzIHVzZWQgdG8gcHJlc2VydmUgdGhlIGNhc2NhZGUgb2Ygc3RhdGljIGNsYXNzZXMgZm9yIGNvbXBvbmVudCBzZWxlY3RvclxuICAvLyBwdXJwb3NlczsgdGhpcyBpcyBlc3BlY2lhbGx5IGltcG9ydGFudCB3aXRoIHVzYWdlIG9mIHRoZSBjc3MgcHJvcFxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmZvbGRlZENvbXBvbmVudElkcyA9IGlzVGFyZ2V0U3R5bGVkQ29tcFxuICAgID8gQXJyYXkucHJvdG90eXBlLmNvbmNhdChcbiAgICAgICAgKCh0YXJnZXQ6IGFueSk6IElTdHlsZWRDb21wb25lbnQpLmZvbGRlZENvbXBvbmVudElkcyxcbiAgICAgICAgKCh0YXJnZXQ6IGFueSk6IElTdHlsZWRDb21wb25lbnQpLnN0eWxlZENvbXBvbmVudElkXG4gICAgICApXG4gICAgOiBFTVBUWV9BUlJBWTtcblxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LnN0eWxlZENvbXBvbmVudElkID0gc3R5bGVkQ29tcG9uZW50SWQ7XG5cbiAgLy8gZm9sZCB0aGUgdW5kZXJseWluZyBTdHlsZWRDb21wb25lbnQgdGFyZ2V0IHVwIHNpbmNlIHdlIGZvbGRlZCB0aGUgc3R5bGVzXG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQudGFyZ2V0ID0gaXNUYXJnZXRTdHlsZWRDb21wXG4gICAgPyAoKHRhcmdldDogYW55KTogSVN0eWxlZENvbXBvbmVudCkudGFyZ2V0XG4gICAgOiB0YXJnZXQ7XG5cbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC53aXRoQ29tcG9uZW50ID0gZnVuY3Rpb24gd2l0aENvbXBvbmVudCh0YWc6IFRhcmdldCkge1xuICAgIGNvbnN0IHsgY29tcG9uZW50SWQ6IHByZXZpb3VzQ29tcG9uZW50SWQsIC4uLm9wdGlvbnNUb0NvcHkgfSA9IG9wdGlvbnM7XG5cbiAgICBjb25zdCBuZXdDb21wb25lbnRJZCA9XG4gICAgICBwcmV2aW91c0NvbXBvbmVudElkICYmXG4gICAgICBgJHtwcmV2aW91c0NvbXBvbmVudElkfS0ke2lzVGFnKHRhZykgPyB0YWcgOiBlc2NhcGUoZ2V0Q29tcG9uZW50TmFtZSh0YWcpKX1gO1xuXG4gICAgY29uc3QgbmV3T3B0aW9ucyA9IHtcbiAgICAgIC4uLm9wdGlvbnNUb0NvcHksXG4gICAgICBhdHRyczogZmluYWxBdHRycyxcbiAgICAgIGNvbXBvbmVudElkOiBuZXdDb21wb25lbnRJZCxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNyZWF0ZVN0eWxlZENvbXBvbmVudCh0YWcsIG5ld09wdGlvbnMsIHJ1bGVzKTtcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JhcHBlZFN0eWxlZENvbXBvbmVudCwgJ2RlZmF1bHRQcm9wcycsIHtcbiAgICBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZm9sZGVkRGVmYXVsdFByb3BzO1xuICAgIH0sXG5cbiAgICBzZXQob2JqKSB7XG4gICAgICB0aGlzLl9mb2xkZWREZWZhdWx0UHJvcHMgPSBpc1RhcmdldFN0eWxlZENvbXBcbiAgICAgICAgPyBtZXJnZSh7fSwgKCh0YXJnZXQ6IGFueSk6IElTdHlsZWRDb21wb25lbnQpLmRlZmF1bHRQcm9wcywgb2JqKVxuICAgICAgICA6IG9iajtcbiAgICB9LFxuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrRHluYW1pY0NyZWF0aW9uKGRpc3BsYXlOYW1lLCBzdHlsZWRDb21wb25lbnRJZCk7XG5cbiAgICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50Lndhcm5Ub29NYW55Q2xhc3NlcyA9IGNyZWF0ZVdhcm5Ub29NYW55Q2xhc3NlcyhcbiAgICAgIGRpc3BsYXlOYW1lLFxuICAgICAgc3R5bGVkQ29tcG9uZW50SWRcbiAgICApO1xuICB9XG5cbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC50b1N0cmluZyA9ICgpID0+IGAuJHtXcmFwcGVkU3R5bGVkQ29tcG9uZW50LnN0eWxlZENvbXBvbmVudElkfWA7XG5cbiAgaWYgKGlzQ29tcG9zaXRlQ29tcG9uZW50KSB7XG4gICAgaG9pc3Q8XG4gICAgICBJU3R5bGVkU3RhdGljcyxcbiAgICAgICRQcm9wZXJ0eVR5cGU8SVN0eWxlZENvbXBvbmVudCwgJ3RhcmdldCc+LFxuICAgICAgeyBba2V5OiAkS2V5czxJU3R5bGVkU3RhdGljcz5dOiB0cnVlIH1cbiAgICA+KFdyYXBwZWRTdHlsZWRDb21wb25lbnQsICgodGFyZ2V0OiBhbnkpOiAkUHJvcGVydHlUeXBlPElTdHlsZWRDb21wb25lbnQsICd0YXJnZXQnPiksIHtcbiAgICAgIC8vIGFsbCBTQy1zcGVjaWZpYyB0aGluZ3Mgc2hvdWxkIG5vdCBiZSBob2lzdGVkXG4gICAgICBhdHRyczogdHJ1ZSxcbiAgICAgIGNvbXBvbmVudFN0eWxlOiB0cnVlLFxuICAgICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgICBmb2xkZWRDb21wb25lbnRJZHM6IHRydWUsXG4gICAgICBzaG91bGRGb3J3YXJkUHJvcDogdHJ1ZSxcbiAgICAgIHN0eWxlZENvbXBvbmVudElkOiB0cnVlLFxuICAgICAgdGFyZ2V0OiB0cnVlLFxuICAgICAgd2l0aENvbXBvbmVudDogdHJ1ZSxcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBXcmFwcGVkU3R5bGVkQ29tcG9uZW50O1xufVxuIiwiLy8gQGZsb3dcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSVNfQlJPV1NFUiwgU0NfQVRUUiwgU0NfQVRUUl9WRVJTSU9OLCBTQ19WRVJTSU9OIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB0aHJvd1N0eWxlZEVycm9yIGZyb20gJy4uL3V0aWxzL2Vycm9yJztcbmltcG9ydCBnZXROb25jZSBmcm9tICcuLi91dGlscy9ub25jZSc7XG5pbXBvcnQgU3R5bGVTaGVldCBmcm9tICcuLi9zaGVldCc7XG5pbXBvcnQgU3R5bGVTaGVldE1hbmFnZXIgZnJvbSAnLi9TdHlsZVNoZWV0TWFuYWdlcic7XG5cbmRlY2xhcmUgdmFyIF9fU0VSVkVSX186IGJvb2xlYW47XG5cbmNvbnN0IENMT1NJTkdfVEFHX1IgPSAvXlxccyo8XFwvW2Etel0vaTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VydmVyU3R5bGVTaGVldCB7XG4gIGlzU3RyZWFtaW5nOiBib29sZWFuO1xuXG4gIGluc3RhbmNlOiBTdHlsZVNoZWV0O1xuXG4gIHNlYWxlZDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmluc3RhbmNlID0gbmV3IFN0eWxlU2hlZXQoeyBpc1NlcnZlcjogdHJ1ZSB9KTtcbiAgICB0aGlzLnNlYWxlZCA9IGZhbHNlO1xuICB9XG5cbiAgX2VtaXRTaGVldENTUyA9ICgpOiBzdHJpbmcgPT4ge1xuICAgIGNvbnN0IGNzcyA9IHRoaXMuaW5zdGFuY2UudG9TdHJpbmcoKTtcbiAgICBjb25zdCBub25jZSA9IGdldE5vbmNlKCk7XG4gICAgY29uc3QgYXR0cnMgPSBbbm9uY2UgJiYgYG5vbmNlPVwiJHtub25jZX1cImAsIGAke1NDX0FUVFJ9PVwidHJ1ZVwiYCwgYCR7U0NfQVRUUl9WRVJTSU9OfT1cIiR7U0NfVkVSU0lPTn1cImBdO1xuICAgIGNvbnN0IGh0bWxBdHRyID0gYXR0cnMuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKTtcblxuICAgIHJldHVybiBgPHN0eWxlICR7aHRtbEF0dHJ9PiR7Y3NzfTwvc3R5bGU+YDtcbiAgfTtcblxuICBjb2xsZWN0U3R5bGVzKGNoaWxkcmVuOiBhbnkpIHtcbiAgICBpZiAodGhpcy5zZWFsZWQpIHtcbiAgICAgIHJldHVybiB0aHJvd1N0eWxlZEVycm9yKDIpO1xuICAgIH1cblxuICAgIHJldHVybiA8U3R5bGVTaGVldE1hbmFnZXIgc2hlZXQ9e3RoaXMuaW5zdGFuY2V9PntjaGlsZHJlbn08L1N0eWxlU2hlZXRNYW5hZ2VyPjtcbiAgfVxuXG4gIGdldFN0eWxlVGFncyA9ICgpOiBzdHJpbmcgPT4ge1xuICAgIGlmICh0aGlzLnNlYWxlZCkge1xuICAgICAgcmV0dXJuIHRocm93U3R5bGVkRXJyb3IoMik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2VtaXRTaGVldENTUygpO1xuICB9O1xuXG4gIGdldFN0eWxlRWxlbWVudCA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5zZWFsZWQpIHtcbiAgICAgIHJldHVybiB0aHJvd1N0eWxlZEVycm9yKDIpO1xuICAgIH1cblxuICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgW1NDX0FUVFJdOiAnJyxcbiAgICAgIFtTQ19BVFRSX1ZFUlNJT05dOiBTQ19WRVJTSU9OLFxuICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgICAgX19odG1sOiB0aGlzLmluc3RhbmNlLnRvU3RyaW5nKCksXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBjb25zdCBub25jZSA9IGdldE5vbmNlKCk7XG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICAocHJvcHM6IGFueSkubm9uY2UgPSBub25jZTtcbiAgICB9XG5cbiAgICAvLyB2NCByZXR1cm5lZCBhbiBhcnJheSBmb3IgdGhpcyBmbiwgc28gd2UnbGwgZG8gdGhlIHNhbWUgZm9yIHY1IGZvciBiYWNrd2FyZCBjb21wYXRcbiAgICByZXR1cm4gWzxzdHlsZSB7Li4ucHJvcHN9IGtleT1cInNjLTAtMFwiIC8+XTtcbiAgfTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtKGlucHV0OiBhbnkpIHtcbiAgICBpZiAoIV9fU0VSVkVSX18gfHwgSVNfQlJPV1NFUikge1xuICAgICAgcmV0dXJuIHRocm93U3R5bGVkRXJyb3IoMyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNlYWxlZCkge1xuICAgICAgcmV0dXJuIHRocm93U3R5bGVkRXJyb3IoMik7XG4gICAgfVxuXG4gICAgaWYgKF9fU0VSVkVSX18pIHtcbiAgICAgIHRoaXMuc2VhbCgpO1xuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2xvYmFsLXJlcXVpcmVcbiAgICAgIGNvbnN0IHsgUmVhZGFibGUsIFRyYW5zZm9ybSB9ID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5cbiAgICAgIGNvbnN0IHJlYWRhYmxlU3RyZWFtOiBSZWFkYWJsZSA9IGlucHV0O1xuICAgICAgY29uc3QgeyBpbnN0YW5jZTogc2hlZXQsIF9lbWl0U2hlZXRDU1MgfSA9IHRoaXM7XG5cbiAgICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gbmV3IFRyYW5zZm9ybSh7XG4gICAgICAgIHRyYW5zZm9ybTogZnVuY3Rpb24gYXBwZW5kU3R5bGVDaHVua3MoY2h1bmssIC8qIGVuY29kaW5nICovIF8sIGNhbGxiYWNrKSB7XG4gICAgICAgICAgLy8gR2V0IHRoZSBjaHVuayBhbmQgcmV0cmlldmUgdGhlIHNoZWV0J3MgQ1NTIGFzIGFuIEhUTUwgY2h1bmssXG4gICAgICAgICAgLy8gdGhlbiByZXNldCBpdHMgcnVsZXMgc28gd2UgZ2V0IG9ubHkgbmV3IG9uZXMgZm9yIHRoZSBuZXh0IGNodW5rXG4gICAgICAgICAgY29uc3QgcmVuZGVyZWRIdG1sID0gY2h1bmsudG9TdHJpbmcoKTtcbiAgICAgICAgICBjb25zdCBodG1sID0gX2VtaXRTaGVldENTUygpO1xuXG4gICAgICAgICAgc2hlZXQuY2xlYXJUYWcoKTtcblxuICAgICAgICAgIC8vIHByZXBlbmQgc3R5bGUgaHRtbCB0byBjaHVuaywgdW5sZXNzIHRoZSBzdGFydCBvZiB0aGUgY2h1bmsgaXMgYVxuICAgICAgICAgIC8vIGNsb3NpbmcgdGFnIGluIHdoaWNoIGNhc2UgYXBwZW5kIHJpZ2h0IGFmdGVyIHRoYXRcbiAgICAgICAgICBpZiAoQ0xPU0lOR19UQUdfUi50ZXN0KHJlbmRlcmVkSHRtbCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGVuZE9mQ2xvc2luZ1RhZyA9IHJlbmRlcmVkSHRtbC5pbmRleE9mKCc+JykgKyAxO1xuICAgICAgICAgICAgY29uc3QgYmVmb3JlID0gcmVuZGVyZWRIdG1sLnNsaWNlKDAsIGVuZE9mQ2xvc2luZ1RhZyk7XG4gICAgICAgICAgICBjb25zdCBhZnRlciA9IHJlbmRlcmVkSHRtbC5zbGljZShlbmRPZkNsb3NpbmdUYWcpO1xuXG4gICAgICAgICAgICB0aGlzLnB1c2goYmVmb3JlICsgaHRtbCArIGFmdGVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wdXNoKGh0bWwgKyByZW5kZXJlZEh0bWwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgcmVhZGFibGVTdHJlYW0ub24oJ2Vycm9yJywgZXJyID0+IHtcbiAgICAgICAgLy8gZm9yd2FyZCB0aGUgZXJyb3IgdG8gdGhlIHRyYW5zZm9ybSBzdHJlYW1cbiAgICAgICAgdHJhbnNmb3JtZXIuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiByZWFkYWJsZVN0cmVhbS5waXBlKHRyYW5zZm9ybWVyKTtcbiAgICB9XG4gIH1cblxuICBzZWFsID0gKCkgPT4ge1xuICAgIHRoaXMuc2VhbGVkID0gdHJ1ZTtcbiAgfTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgU3R5bGVTaGVldCBmcm9tICcuLi9zaGVldCc7XG5pbXBvcnQgdHlwZSB7IFJ1bGVTZXQsIFN0cmluZ2lmaWVyIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IGZsYXR0ZW4gZnJvbSAnLi4vdXRpbHMvZmxhdHRlbic7XG5pbXBvcnQgaXNTdGF0aWNSdWxlcyBmcm9tICcuLi91dGlscy9pc1N0YXRpY1J1bGVzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2xvYmFsU3R5bGUge1xuICBjb21wb25lbnRJZDogc3RyaW5nO1xuXG4gIGlzU3RhdGljOiBib29sZWFuO1xuXG4gIHJ1bGVzOiBSdWxlU2V0O1xuXG4gIGNvbnN0cnVjdG9yKHJ1bGVzOiBSdWxlU2V0LCBjb21wb25lbnRJZDogc3RyaW5nKSB7XG4gICAgdGhpcy5ydWxlcyA9IHJ1bGVzO1xuICAgIHRoaXMuY29tcG9uZW50SWQgPSBjb21wb25lbnRJZDtcbiAgICB0aGlzLmlzU3RhdGljID0gaXNTdGF0aWNSdWxlcyhydWxlcyk7XG5cbiAgICAvLyBwcmUtcmVnaXN0ZXIgdGhlIGZpcnN0IGluc3RhbmNlIHRvIGVuc3VyZSBnbG9iYWwgc3R5bGVzXG4gICAgLy8gbG9hZCBiZWZvcmUgY29tcG9uZW50IG9uZXNcbiAgICBTdHlsZVNoZWV0LnJlZ2lzdGVySWQodGhpcy5jb21wb25lbnRJZCArIDEpO1xuICB9XG5cbiAgY3JlYXRlU3R5bGVzKFxuICAgIGluc3RhbmNlOiBudW1iZXIsXG4gICAgZXhlY3V0aW9uQ29udGV4dDogT2JqZWN0LFxuICAgIHN0eWxlU2hlZXQ6IFN0eWxlU2hlZXQsXG4gICAgc3R5bGlzOiBTdHJpbmdpZmllclxuICApIHtcbiAgICBjb25zdCBmbGF0Q1NTID0gZmxhdHRlbih0aGlzLnJ1bGVzLCBleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0LCBzdHlsaXMpO1xuICAgIGNvbnN0IGNzcyA9IHN0eWxpcyhmbGF0Q1NTLmpvaW4oJycpLCAnJyk7XG4gICAgY29uc3QgaWQgPSB0aGlzLmNvbXBvbmVudElkICsgaW5zdGFuY2U7XG5cbiAgICAvLyBOT1RFOiBXZSB1c2UgdGhlIGlkIGFzIGEgbmFtZSBhcyB3ZWxsLCBzaW5jZSB0aGVzZSBydWxlcyBuZXZlciBjaGFuZ2VcbiAgICBzdHlsZVNoZWV0Lmluc2VydFJ1bGVzKGlkLCBpZCwgY3NzKTtcbiAgfVxuXG4gIHJlbW92ZVN0eWxlcyhpbnN0YW5jZTogbnVtYmVyLCBzdHlsZVNoZWV0OiBTdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVTaGVldC5jbGVhclJ1bGVzKHRoaXMuY29tcG9uZW50SWQgKyBpbnN0YW5jZSk7XG4gIH1cblxuICByZW5kZXJTdHlsZXMoXG4gICAgaW5zdGFuY2U6IG51bWJlcixcbiAgICBleGVjdXRpb25Db250ZXh0OiBPYmplY3QsXG4gICAgc3R5bGVTaGVldDogU3R5bGVTaGVldCxcbiAgICBzdHlsaXM6IFN0cmluZ2lmaWVyXG4gICkge1xuICAgIGlmIChpbnN0YW5jZSA+IDIpIFN0eWxlU2hlZXQucmVnaXN0ZXJJZCh0aGlzLmNvbXBvbmVudElkICsgaW5zdGFuY2UpO1xuXG4gICAgLy8gTk9URTogUmVtb3ZlIG9sZCBzdHlsZXMsIHRoZW4gaW5qZWN0IHRoZSBuZXcgb25lc1xuICAgIHRoaXMucmVtb3ZlU3R5bGVzKGluc3RhbmNlLCBzdHlsZVNoZWV0KTtcbiAgICB0aGlzLmNyZWF0ZVN0eWxlcyhpbnN0YW5jZSwgZXhlY3V0aW9uQ29udGV4dCwgc3R5bGVTaGVldCwgc3R5bGlzKTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59IiwiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gXCIuL2RlZmluZVByb3BlcnR5LmpzXCI7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcblxuICAgIGlmIChlbnVtZXJhYmxlT25seSkge1xuICAgICAgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyJztcblxuLyoqXG4gKiBBZGFwdGVkIGZyb20gUmVhY3Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL21hc3Rlci9wYWNrYWdlcy9zaGFyZWQvZm9ybWF0UHJvZEVycm9yTWVzc2FnZS5qc1xuICpcbiAqIERvIG5vdCByZXF1aXJlIHRoaXMgbW9kdWxlIGRpcmVjdGx5ISBVc2Ugbm9ybWFsIHRocm93IGVycm9yIGNhbGxzLiBUaGVzZSBtZXNzYWdlcyB3aWxsIGJlIHJlcGxhY2VkIHdpdGggZXJyb3IgY29kZXNcbiAqIGR1cmluZyBidWlsZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoY29kZSkge1xuICByZXR1cm4gXCJNaW5pZmllZCBSZWR1eCBlcnJvciAjXCIgKyBjb2RlICsgXCI7IHZpc2l0IGh0dHBzOi8vcmVkdXguanMub3JnL0Vycm9ycz9jb2RlPVwiICsgY29kZSArIFwiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIFwiICsgJ3VzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMuICc7XG59XG5cbi8vIElubGluZWQgdmVyc2lvbiBvZiB0aGUgYHN5bWJvbC1vYnNlcnZhYmxlYCBwb2x5ZmlsbFxudmFyICQkb2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5vYnNlcnZhYmxlIHx8ICdAQG9ic2VydmFibGUnO1xufSkoKTtcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciByYW5kb21TdHJpbmcgPSBmdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbn07XG5cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogXCJAQHJlZHV4L0lOSVRcIiArIHJhbmRvbVN0cmluZygpLFxuICBSRVBMQUNFOiBcIkBAcmVkdXgvUkVQTEFDRVwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiBmdW5jdGlvbiBQUk9CRV9VTktOT1dOX0FDVElPTigpIHtcbiAgICByZXR1cm4gXCJAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXCIgKyByYW5kb21TdHJpbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IG9iajtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbmZ1bmN0aW9uIGtpbmRPZih2YWwpIHtcbiAgdmFyIHR5cGVPZlZhbCA9IHR5cGVvZiB2YWw7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBJbmxpbmVkIC8gc2hvcnRlbmVkIHZlcnNpb24gb2YgYGtpbmRPZmAgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9raW5kLW9mXG4gICAgZnVuY3Rpb24gbWluaUtpbmRPZih2YWwpIHtcbiAgICAgIGlmICh2YWwgPT09IHZvaWQgMCkgcmV0dXJuICd1bmRlZmluZWQnO1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCkgcmV0dXJuICdudWxsJztcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcblxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICBjYXNlICdzeW1ib2wnOlxuICAgICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSByZXR1cm4gJ2FycmF5JztcbiAgICAgIGlmIChpc0RhdGUodmFsKSkgcmV0dXJuICdkYXRlJztcbiAgICAgIGlmIChpc0Vycm9yKHZhbCkpIHJldHVybiAnZXJyb3InO1xuICAgICAgdmFyIGNvbnN0cnVjdG9yTmFtZSA9IGN0b3JOYW1lKHZhbCk7XG5cbiAgICAgIHN3aXRjaCAoY29uc3RydWN0b3JOYW1lKSB7XG4gICAgICAgIGNhc2UgJ1N5bWJvbCc6XG4gICAgICAgIGNhc2UgJ1Byb21pc2UnOlxuICAgICAgICBjYXNlICdXZWFrTWFwJzpcbiAgICAgICAgY2FzZSAnV2Vha1NldCc6XG4gICAgICAgIGNhc2UgJ01hcCc6XG4gICAgICAgIGNhc2UgJ1NldCc6XG4gICAgICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yTmFtZTtcbiAgICAgIH0gLy8gb3RoZXJcblxuXG4gICAgICByZXR1cm4gdHlwZS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgJycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGN0b3JOYW1lKHZhbCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwuY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbicgPyB2YWwuY29uc3RydWN0b3IubmFtZSA6IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNFcnJvcih2YWwpIHtcbiAgICAgIHJldHVybiB2YWwgaW5zdGFuY2VvZiBFcnJvciB8fCB0eXBlb2YgdmFsLm1lc3NhZ2UgPT09ICdzdHJpbmcnICYmIHZhbC5jb25zdHJ1Y3RvciAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLnN0YWNrVHJhY2VMaW1pdCA9PT0gJ251bWJlcic7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICAgICAgaWYgKHZhbCBpbnN0YW5jZW9mIERhdGUpIHJldHVybiB0cnVlO1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwudG9EYXRlU3RyaW5nID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWwuZ2V0RGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsLnNldERhdGUgPT09ICdmdW5jdGlvbic7XG4gICAgfVxuXG4gICAgdHlwZU9mVmFsID0gbWluaUtpbmRPZih2YWwpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGVPZlZhbDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMCkgOiAnSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gJyArICdjcmVhdGVTdG9yZSgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIGNvbXBvc2UgdGhlbSAnICsgJ3RvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uLiBTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTQtc3RvcmUjY3JlYXRpbmctYS1zdG9yZS13aXRoLWVuaGFuY2VycyBmb3IgYW4gZXhhbXBsZS4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEpIDogXCJFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihlbmhhbmNlcikgKyBcIidcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyKSA6IFwiRXhwZWN0ZWQgdGhlIHJvb3QgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKHJlZHVjZXIpICsgXCInXCIpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGlzIG1ha2VzIGEgc2hhbGxvdyBjb3B5IG9mIGN1cnJlbnRMaXN0ZW5lcnMgc28gd2UgY2FuIHVzZVxuICAgKiBuZXh0TGlzdGVuZXJzIGFzIGEgdGVtcG9yYXJ5IGxpc3Qgd2hpbGUgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIFRoaXMgcHJldmVudHMgYW55IGJ1Z3MgYXJvdW5kIGNvbnN1bWVycyBjYWxsaW5nXG4gICAqIHN1YnNjcmliZS91bnN1YnNjcmliZSBpbiB0aGUgbWlkZGxlIG9mIGEgZGlzcGF0Y2guXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzKSA6ICdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1RoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gJyArICdQYXNzIGl0IGRvd24gZnJvbSB0aGUgdG9wIHJlZHVjZXIgaW5zdGVhZCBvZiByZWFkaW5nIGl0IGZyb20gdGhlIHN0b3JlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQpIDogXCJFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihsaXN0ZW5lcikgKyBcIidcIik7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUpIDogJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNikgOiAnWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGN1cnJlbnRMaXN0ZW5lcnMgPSBudWxsO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNykgOiBcIkFjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiBJbnN0ZWFkLCB0aGUgYWN0dWFsIHR5cGUgd2FzOiAnXCIgKyBraW5kT2YoYWN0aW9uKSArIFwiJy4gWW91IG1heSBuZWVkIHRvIGFkZCBtaWRkbGV3YXJlIHRvIHlvdXIgc3RvcmUgc2V0dXAgdG8gaGFuZGxlIGRpc3BhdGNoaW5nIG90aGVyIHZhbHVlcywgc3VjaCBhcyAncmVkdXgtdGh1bmsnIHRvIGhhbmRsZSBkaXNwYXRjaGluZyBmdW5jdGlvbnMuIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNC1zdG9yZSNtaWRkbGV3YXJlIGFuZCBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNi1hc3luYy1sb2dpYyN1c2luZy10aGUtcmVkdXgtdGh1bmstbWlkZGxld2FyZSBmb3IgZXhhbXBsZXMuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg4KSA6ICdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuIFlvdSBtYXkgaGF2ZSBtaXNzcGVsbGVkIGFuIGFjdGlvbiB0eXBlIHN0cmluZyBjb25zdGFudC4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOSkgOiAnUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEwKSA6IFwiRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YobmV4dFJlZHVjZXIpKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTEpIDogXCJFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKG9ic2VydmVyKSArIFwiJ1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIGtpbmRPZihpbnB1dFN0YXRlKSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEyKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlICdcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIicgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTQpIDogXCJXaGVuIGNhbGxlZCB3aXRoIGFuIGFjdGlvbiBvZiB0eXBlIFwiICsgKGFjdGlvblR5cGUgPyBcIlxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIDogJyh1bmtub3duIHR5cGUpJykgKyBcIiwgdGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBfa2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGFuIGFjdGlvbiBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBkaXNwYXRjaCB3cmFwcGVkIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2KSA6IFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBidXQgaW5zdGVhZCByZWNlaXZlZDogJ1wiICsga2luZE9mKGFjdGlvbkNyZWF0b3JzKSArIFwiJy4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNSkgOiAnRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3RvcmUpLCB7fSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIuICcgKyAnVGhpcyBtZWFucyB0aGF0IHlvdSBhcmUgcnVubmluZyBhIHNsb3dlciBkZXZlbG9wbWVudCBidWlsZCBvZiBSZWR1eC4gJyArICdZb3UgY2FuIHVzZSBsb29zZS1lbnZpZnkgKGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2xvb3NlLWVudmlmeSkgZm9yIGJyb3dzZXJpZnkgJyArICdvciBzZXR0aW5nIG1vZGUgdG8gcHJvZHVjdGlvbiBpbiB3ZWJwYWNrIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmNlcHRzL21vZGUvKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IEFjdGlvblR5cGVzIGFzIF9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMsIGFwcGx5TWlkZGxld2FyZSwgYmluZEFjdGlvbkNyZWF0b3JzLCBjb21iaW5lUmVkdWNlcnMsIGNvbXBvc2UsIGNyZWF0ZVN0b3JlIH07XG4iLCJmdW5jdGlvbiBjcmVhdGVUaHVua01pZGRsZXdhcmUoZXh0cmFBcmd1bWVudCkge1xuICByZXR1cm4gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLFxuICAgICAgICBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBhY3Rpb24oZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYUFyZ3VtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59XG5cbnZhciB0aHVuayA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZSgpO1xudGh1bmsud2l0aEV4dHJhQXJndW1lbnQgPSBjcmVhdGVUaHVua01pZGRsZXdhcmU7XG5cbmV4cG9ydCBkZWZhdWx0IHRodW5rOyIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcydcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQm9va0RhdGEge1xyXG4gIHB1Ymxpc2hlcnM6IHN0cmluZ1tdIHwgbnVsbFxyXG4gIG51bWJlcl9vZl9wYWdlczogbnVtYmVyIHwgbnVsbFxyXG4gIHB1Ymxpc2hfZGF0ZTogc3RyaW5nIHwgbnVsbFxyXG59XHJcblxyXG5jbGFzcyBCb29rc0FQSSB7XHJcbiAgZ2V0Qm9vayhpc2JuOiBzdHJpbmcpOiBQcm9taXNlPEJvb2tEYXRhPiB7XHJcbiAgICByZXR1cm4gYXhpb3NcclxuICAgICAgLmdldDxCb29rRGF0YT4oYGh0dHA6Ly9vcGVubGlicmFyeS5vcmcvaXNibi8ke2lzYm59Lmpzb25gKVxyXG4gICAgICAudGhlbigoeyBkYXRhIH0pID0+IHtcclxuICAgICAgICByZXR1cm4gZGF0YVxyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpXHJcbiAgICAgICAgcmV0dXJuIG51bGwgYXMgQm9va0RhdGFcclxuICAgICAgfSlcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGJvb2tzQVBJID0gbmV3IEJvb2tzQVBJKClcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGJvb2tzQVBJXHJcbiIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcydcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ292ZXJEYXRhIHtcclxuICBzcmM6IHN0cmluZ1xyXG59XHJcblxyXG5jbGFzcyBDb3ZlcnNBUEkge1xyXG4gIGdldENvdmVyIChpc2JuOiBzdHJpbmcsIHNpemU6ICdTJyB8ICdNJyB8ICdMJyk6IFByb21pc2U8Q292ZXJEYXRhPiB7XHJcbiAgICByZXR1cm4gYXhpb3NcclxuICAgICAgLmdldDxDb3ZlckRhdGE+KGdldENvdmVyVXJsKGlzYm4sIHNpemUpKVxyXG4gICAgICAudGhlbigoeyBkYXRhIH0pID0+IHtcclxuICAgICAgICByZXR1cm4gZGF0YVxyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpXHJcbiAgICAgICAgcmV0dXJuIG51bGwgYXMgQ292ZXJEYXRhXHJcbiAgICAgIH0pXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0Q292ZXJVcmwgPSAoaXNibjogc3RyaW5nLCBzaXplOiAnUycgfCAnTScgfCAnTCcpOiBzdHJpbmcgPT4ge1xyXG4gIHJldHVybiBgaHR0cDovL2NvdmVycy5vcGVubGlicmFyeS5vcmcvYi9pc2JuLyR7aXNibn0tJHtzaXplfS5qcGdgXHJcbn1cclxuXHJcbmNvbnN0IGNvdmVyc0FQSSA9IG5ldyBDb3ZlcnNBUEkoKVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY292ZXJzQVBJIiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTZWFyY2hEYXRhIHtcclxuICBudW1Gb3VuZDogbnVtYmVyXHJcbiAgc3RhcnQ6IHN0cmluZ1xyXG4gIGRvY3M6IERvY0RhdGFbXVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERvY0RhdGEge1xyXG4gIGhhc19mdWxsdGV4dDogYm9vbGVhblxyXG4gIHRpdGxlOiBzdHJpbmdcclxuICBpc2JuOiBzdHJpbmdbXVxyXG4gIGF1dGhvcl9uYW1lOiBzdHJpbmdbXVxyXG59XHJcblxyXG5jbGFzcyBTZWFyY2hBUEkge1xyXG4gIGdldEJvb2tzIChzZWFyY2g6IHN0cmluZyk6IFByb21pc2U8U2VhcmNoRGF0YT4ge1xyXG4gICAgY29uc3QgcXVlcnlTdHJpbmcgPSBzZWFyY2guc3BsaXQoJyAnKS5qb2luKCcrJylcclxuICAgIHJldHVybiBheGlvc1xyXG4gICAgICAuZ2V0PFNlYXJjaERhdGE+KGBodHRwOi8vb3BlbmxpYnJhcnkub3JnL3NlYXJjaC5qc29uP3E9JHtxdWVyeVN0cmluZ31gKVxyXG4gICAgICAudGhlbigoeyBkYXRhIH0pID0+IHtcclxuICAgICAgICByZXR1cm4gZGF0YVxyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpXHJcbiAgICAgICAgcmV0dXJuIG51bGwgYXMgU2VhcmNoRGF0YVxyXG4gICAgICB9KVxyXG4gIH1cclxufVxyXG5cclxuY29uc3Qgc2VhcmNoQVBJID0gbmV3IFNlYXJjaEFQSSgpXHJcblxyXG5leHBvcnQgZGVmYXVsdCBzZWFyY2hBUElcclxuIiwiaW1wb3J0IGJvb2tzQVBJLCB7IEJvb2tEYXRhIH0gZnJvbSAnQC9hcGkvYm9va3MtYXBpJ1xyXG5pbXBvcnQgeyBnZXRDb3ZlclVybCB9IGZyb20gJ0AvYXBpL2NvdmVycy1hcGknXHJcbmltcG9ydCBzZWFyY2hBUEksIHsgU2VhcmNoRGF0YSB9IGZyb20gJ0AvYXBpL3NlYXJjaC1hcGknXHJcbmltcG9ydCB7IEFjdGlvblQgfSBmcm9tICdAL3R5cGVzL2NvbW1vbi10eXBlcydcclxuaW1wb3J0IHsgVGh1bmtBY3Rpb24gfSBmcm9tICdyZWR1eC10aHVuaydcclxuaW1wb3J0IHsgUm9vdFN0YXRlVCB9IGZyb20gJy4vc3RvcmUtcmVkdXgnXHJcblxyXG5jb25zdCBTRVRfQUxMX0JPT0tTID0gJ2FwcC9TRVRfQUxMX0JPT0tTJ1xyXG5jb25zdCBTRVRfUEFHRVNfTlVNID0gJ2FwcC9TRVRfUEFHRVNfTlVNJ1xyXG5jb25zdCBTRVRfQ1VSUkVOVF9QQUdFID0gJ2FwcC9TRVRfQ1VSUkVOVF9QQUdFJ1xyXG5jb25zdCBTRVRfSVRFTVNfT05fUEFHRSA9ICdhcHAvU0VUX0lURU1TX09OX1BBR0UnXHJcbmNvbnN0IFNFVF9BRERJVElPTkFMX0lORk8gPSAnYXBwL1NFVF9BRERJVElPTkFMX0lORk8nXHJcbmNvbnN0IFNFVF9DT1ZFUlNfTSA9ICdhcHAvU0VUX0NPVkVSU19NJ1xyXG5jb25zdCBTRVRfQ09WRVJTX0wgPSAnYXBwL1NFVF9DT1ZFUlNfTCdcclxuY29uc3QgU0VUX1NFQVJDSElORyA9ICdhcHAvU0VUX1NFQVJDSElORydcclxuY29uc3QgU0VUX0xBU1RfUVVFUlkgPSAnYXBwL1NFVF9MQVNUX1FVRVJZJ1xyXG5jb25zdCBJTkNfU0VBUkNIX0NPVU5UID0gJ2FwcC9JTkNfU0VBUkNIX0NPVU5UJ1xyXG5cclxudHlwZSBzZXRBbGxCb29rc1QgPSBBY3Rpb25UPHR5cGVvZiBTRVRfQUxMX0JPT0tTLCBJRWRpdGlvbkluZm9bXT5cclxudHlwZSBzZXRQYWdlc051bVQgPSBBY3Rpb25UPHR5cGVvZiBTRVRfUEFHRVNfTlVNLCBudW1iZXI+XHJcbnR5cGUgc2V0Q3VycmVudFBhZ2VUID0gQWN0aW9uVDx0eXBlb2YgU0VUX0NVUlJFTlRfUEFHRSwgbnVtYmVyPlxyXG50eXBlIHNldEl0ZW1zT25QYWdlVCA9IEFjdGlvblQ8dHlwZW9mIFNFVF9JVEVNU19PTl9QQUdFLCBJRWRpdGlvbkluZm9bXT5cclxudHlwZSBzZXRBZGRpdGlvbmFsSW5mb1QgPSBBY3Rpb25UPHR5cGVvZiBTRVRfQURESVRJT05BTF9JTkZPLCBCb29rRGF0YVtdPlxyXG50eXBlIHNldENvdmVyc01UID0gQWN0aW9uVDx0eXBlb2YgU0VUX0NPVkVSU19NLCBzdHJpbmdbXT5cclxudHlwZSBzZXRDb3ZlcnNMVCA9IEFjdGlvblQ8dHlwZW9mIFNFVF9DT1ZFUlNfTCwgc3RyaW5nW10+XHJcbnR5cGUgc2V0U2VhcmNoaW5nVCA9IEFjdGlvblQ8dHlwZW9mIFNFVF9TRUFSQ0hJTkcsIGJvb2xlYW4+XHJcbnR5cGUgc2V0TGFzdFF1ZXJ5VCA9IEFjdGlvblQ8dHlwZW9mIFNFVF9MQVNUX1FVRVJZLCBzdHJpbmc+XHJcbnR5cGUgaW5jU2VhcmNoQ291bnRUID0gQWN0aW9uVDx0eXBlb2YgSU5DX1NFQVJDSF9DT1VOVCwgbnVtYmVyPlxyXG5cclxudHlwZSBBcHBBY3Rpb24gPVxyXG4gIHwgc2V0QWxsQm9va3NUXHJcbiAgfCBzZXRBZGRpdGlvbmFsSW5mb1RcclxuICB8IHNldENvdmVyc01UXHJcbiAgfCBzZXRDb3ZlcnNMVFxyXG4gIHwgc2V0UGFnZXNOdW1UXHJcbiAgfCBzZXRDdXJyZW50UGFnZVRcclxuICB8IHNldEl0ZW1zT25QYWdlVFxyXG4gIHwgc2V0U2VhcmNoaW5nVFxyXG4gIHwgc2V0TGFzdFF1ZXJ5VFxyXG4gIHwgaW5jU2VhcmNoQ291bnRUXHJcblxyXG5leHBvcnQgY29uc3QgYWN0aW9uQ3JlYXRvciA9IHtcclxuICBzZXRBbGxCb29rcyhib29rczogSUVkaXRpb25JbmZvW10pOiBzZXRBbGxCb29rc1Qge1xyXG4gICAgcmV0dXJuIHsgdHlwZTogU0VUX0FMTF9CT09LUywgcGF5bG9hZDogYm9va3MgfVxyXG4gIH0sXHJcbiAgc2V0UGFnZXNOdW0ocGFnZXNOdW06IG51bWJlcik6IHNldFBhZ2VzTnVtVCB7XHJcbiAgICByZXR1cm4geyB0eXBlOiBTRVRfUEFHRVNfTlVNLCBwYXlsb2FkOiBwYWdlc051bSB9XHJcbiAgfSxcclxuICBzZXRDdXJyZW50UGFnZShjdXJyUGFnZTogbnVtYmVyKTogc2V0Q3VycmVudFBhZ2VUIHtcclxuICAgIHJldHVybiB7IHR5cGU6IFNFVF9DVVJSRU5UX1BBR0UsIHBheWxvYWQ6IGN1cnJQYWdlIH1cclxuICB9LFxyXG4gIHNldEl0ZW1zT25QYWdlKGJvb2tzOiBJRWRpdGlvbkluZm9bXSk6IHNldEl0ZW1zT25QYWdlVCB7XHJcbiAgICByZXR1cm4geyB0eXBlOiBTRVRfSVRFTVNfT05fUEFHRSwgcGF5bG9hZDogYm9va3MgfVxyXG4gIH0sXHJcbiAgc2V0QWRkaXRpb25hbEluZm8ocHVibGlzaGVyczogQm9va0RhdGFbXSk6IHNldEFkZGl0aW9uYWxJbmZvVCB7XHJcbiAgICByZXR1cm4geyB0eXBlOiBTRVRfQURESVRJT05BTF9JTkZPLCBwYXlsb2FkOiBwdWJsaXNoZXJzIH1cclxuICB9LFxyXG4gIHNldENvdmVyTShjb3ZlcnNEYXRhOiBzdHJpbmdbXSk6IHNldENvdmVyc01UIHtcclxuICAgIHJldHVybiB7IHR5cGU6IFNFVF9DT1ZFUlNfTSwgcGF5bG9hZDogY292ZXJzRGF0YSB9XHJcbiAgfSxcclxuICBzZXRDb3ZlckwoY292ZXJzRGF0YTogc3RyaW5nW10pOiBzZXRDb3ZlcnNMVCB7XHJcbiAgICByZXR1cm4geyB0eXBlOiBTRVRfQ09WRVJTX0wsIHBheWxvYWQ6IGNvdmVyc0RhdGEgfVxyXG4gIH0sXHJcbiAgc2V0U2VhcmNoaW5nKGlzU2VhcmNoaW5nOiBib29sZWFuKTogc2V0U2VhcmNoaW5nVCB7XHJcbiAgICByZXR1cm4geyB0eXBlOiBTRVRfU0VBUkNISU5HLCBwYXlsb2FkOiBpc1NlYXJjaGluZyB9XHJcbiAgfSxcclxuICBzZXRMYXN0UXVlcnkocXVlcnk6IHN0cmluZyk6IHNldExhc3RRdWVyeVQge1xyXG4gICAgcmV0dXJuIHsgdHlwZTogU0VUX0xBU1RfUVVFUlksIHBheWxvYWQ6IHF1ZXJ5IH1cclxuICB9LFxyXG4gIGluY1NlYXJjaENvdW50KCk6IGluY1NlYXJjaENvdW50VCB7XHJcbiAgICByZXR1cm4geyB0eXBlOiBJTkNfU0VBUkNIX0NPVU5UIH1cclxuICB9XHJcbn1cclxuXHJcbnR5cGUgVGh1bmtBY3Rpb25UID0gVGh1bmtBY3Rpb248dm9pZCwgUm9vdFN0YXRlVCwgbmV2ZXIsIEFwcEFjdGlvbj5cclxuXHJcbmV4cG9ydCBjb25zdCB0aHVua0NyZWF0b3IgPSB7XHJcbiAgZ2V0QWxsQm9va3Moc2VhcmNoOiBzdHJpbmcpOiBUaHVua0FjdGlvblQge1xyXG4gICAgcmV0dXJuIGFzeW5jIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuICAgICAgZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5zZXRTZWFyY2hpbmcodHJ1ZSkpXHJcbiAgICAgIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuaW5jU2VhcmNoQ291bnQoKSlcclxuICAgICAgY29uc3Qgc2VyY2hEYXRhID0gYXdhaXQgc2VhcmNoQVBJLmdldEJvb2tzKHNlYXJjaClcclxuICAgICAgaWYgKCFzZXJjaERhdGEpIHtcclxuICAgICAgICBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLnNldExhc3RRdWVyeShzZWFyY2gpKVxyXG4gICAgICAgIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3Iuc2V0U2VhcmNoaW5nKGZhbHNlKSlcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBib29rcyA9IHJldHJpZXZlQm9va3NJbmZvKHNlcmNoRGF0YSlcclxuICAgICAgY29uc3QgeyBwYWdlU2l6ZSB9ID0gZ2V0U3RhdGUoKS5hcHBcclxuICAgICAgZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5zZXRBbGxCb29rcyhib29rcykpXHJcbiAgICAgIGNvbnN0IHBhZ2VzTnVtID0gTWF0aC5jZWlsKGJvb2tzLmxlbmd0aCAvIHBhZ2VTaXplKVxyXG4gICAgICBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLnNldFBhZ2VzTnVtKHBhZ2VzTnVtKSlcclxuICAgICAgZGlzcGF0Y2godGh1bmtDcmVhdG9yLmdldEl0ZW1zT25QYWdlKDEpKVxyXG4gICAgICBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLnNldExhc3RRdWVyeShzZWFyY2gpKVxyXG4gICAgICBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLnNldFNlYXJjaGluZyhmYWxzZSkpXHJcbiAgICB9XHJcbiAgfSxcclxuICBnZXRJdGVtc09uUGFnZShwYWdlOiBudW1iZXIpOiBUaHVua0FjdGlvblQge1xyXG4gICAgcmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuICAgICAgY29uc3QgeyBhbGxCb29rcywgcGFnZVNpemUgfSA9IGdldFN0YXRlKCkuYXBwXHJcbiAgICAgIGNvbnN0IGl0ZW1zT25QYWdlID0gZ2V0SXRlbXNPblBhZ2UoYWxsQm9va3MsIHBhZ2UsIHBhZ2VTaXplKVxyXG4gICAgICBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLnNldEN1cnJlbnRQYWdlKHBhZ2UpKVxyXG4gICAgICBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLnNldEl0ZW1zT25QYWdlKGl0ZW1zT25QYWdlKSlcclxuICAgICAgZGlzcGF0Y2godGh1bmtDcmVhdG9yLmdldEFkZGl0aW9uYWxJbmZvKCkpXHJcbiAgICB9XHJcbiAgfSxcclxuICBnZXRBZGRpdGlvbmFsSW5mbygpOiBUaHVua0FjdGlvblQge1xyXG4gICAgcmV0dXJuIGFzeW5jIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuICAgICAgY29uc3QgeyBpdGVtc09uUGFnZSB9ID0gZ2V0U3RhdGUoKS5hcHBcclxuICAgICAgaWYgKGl0ZW1zT25QYWdlID09PSBbXSkgcmV0dXJuXHJcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBQcm9taXNlLmFsbChbLi4uaXRlbXNPblBhZ2UubWFwKChib29rKSA9PiBib29rc0FQSS5nZXRCb29rKGJvb2suaXNibikpXSlcclxuICAgICAgY29uc3QgbWVkaXVtQ292ZXJzID0gaXRlbXNPblBhZ2UubWFwKChpdGVtKSA9PiBnZXRDb3ZlclVybChpdGVtLmlzYm4sICdNJykpXHJcbiAgICAgIGNvbnN0IGxhcmdlQ292ZXJzID0gaXRlbXNPblBhZ2UubWFwKChpdGVtKSA9PiBnZXRDb3ZlclVybChpdGVtLmlzYm4sICdMJykpXHJcbiAgICAgIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3Iuc2V0QWRkaXRpb25hbEluZm8oZGF0YSkpXHJcbiAgICAgIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3Iuc2V0Q292ZXJNKG1lZGl1bUNvdmVycykpXHJcbiAgICAgIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3Iuc2V0Q292ZXJMKGxhcmdlQ292ZXJzKSlcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJldHJpZXZlQm9va3NJbmZvKHNlYXJjaFJlc3BvbnNlOiBTZWFyY2hEYXRhKTogSUVkaXRpb25JbmZvW10ge1xyXG4gIGNvbnN0IHsgZG9jcyB9ID0gc2VhcmNoUmVzcG9uc2VcclxuICBjb25zdCBhbGxCb29rcyA9IHt9IGFzIElCb29rc0luZm9cclxuICBkb2NzLmZvckVhY2goKGRvYykgPT4ge1xyXG4gICAgaWYgKCFkb2MuaGFzX2Z1bGx0ZXh0IHx8ICFkb2MuaXNibikgcmV0dXJuXHJcbiAgICBjb25zdCBhdXRob3IgPSBkb2MuYXV0aG9yX25hbWVbMF1cclxuICAgIGNvbnN0IHsgdGl0bGUgfSA9IGRvY1xyXG4gICAgZG9jLmlzYm4uZm9yRWFjaCgoaXNibikgPT4ge1xyXG4gICAgICBpZiAoYWxsQm9va3NbaXNibl0gfHwgaXNibi5sZW5ndGggPD0gOSkgcmV0dXJuXHJcbiAgICAgIGFsbEJvb2tzW2lzYm5dID0geyBpc2JuLCBhdXRob3IsIHRpdGxlIH1cclxuICAgIH0pXHJcbiAgfSlcclxuICByZXR1cm4gT2JqZWN0LnZhbHVlcyhhbGxCb29rcylcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0SXRlbXNPblBhZ2UoXHJcbiAgYWxsQm9va3M6IElFZGl0aW9uSW5mb1tdLFxyXG4gIGN1cnJlbnRQYWdlOiBudW1iZXIsXHJcbiAgcGFnZVNpemU6IG51bWJlclxyXG4pOiBJRWRpdGlvbkluZm9bXSB7XHJcbiAgY29uc3Qgc3RhcnRJZHggPSAoY3VycmVudFBhZ2UgLSAxKSAqIHBhZ2VTaXplXHJcbiAgY29uc3QgZW5kSWR4ID0gY3VycmVudFBhZ2UgKiBwYWdlU2l6ZSAtIDFcclxuICBjb25zdCBpdGVtc09uUGFnZSA9IFtdIGFzIElFZGl0aW9uSW5mb1tdXHJcbiAgZm9yIChsZXQgaSA9IHN0YXJ0SWR4OyBpIDw9IGVuZElkeDsgaSsrKSB7XHJcbiAgICBpZiAoYWxsQm9va3NbaV0pIHtcclxuICAgICAgaXRlbXNPblBhZ2UucHVzaChhbGxCb29rc1tpXSlcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGl0ZW1zT25QYWdlXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUJvb2tzSW5mbyB7XHJcbiAgW2lzYm46IHN0cmluZ106IElFZGl0aW9uSW5mb1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElFZGl0aW9uSW5mbyB7XHJcbiAgaXNibjogc3RyaW5nXHJcbiAgdGl0bGU6IHN0cmluZ1xyXG4gIGF1dGhvcjogc3RyaW5nXHJcbiAgcHVibGlzaGVycz86IHN0cmluZ1tdXHJcbiAgbnVtYmVyX29mX3BhZ2VzPzogbnVtYmVyXHJcbiAgcHVibGlzaF9kYXRlPzogc3RyaW5nXHJcbiAgbWVkaXVtQ292ZXI/OiBzdHJpbmdcclxuICBsYXJnZUNvdmVyPzogc3RyaW5nXHJcbn1cclxuXHJcbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcclxuICBhbGxCb29rczogW10gYXMgSUVkaXRpb25JbmZvW10sXHJcbiAgcGFnZVNpemU6IDIwLFxyXG4gIHBhZ2VzTnVtOiB1bmRlZmluZWQgYXMgbnVtYmVyLFxyXG4gIGN1cnJlbnRQYWdlOiB1bmRlZmluZWQgYXMgbnVtYmVyLFxyXG4gIGl0ZW1zT25QYWdlOiBbXSBhcyBJRWRpdGlvbkluZm9bXSxcclxuICBzZWFyY2hpbmc6IGZhbHNlLFxyXG4gIGxhc3RRdWVyeTogdW5kZWZpbmVkIGFzIHN0cmluZyxcclxuICBzZWFyY2hDb3VudDogMFxyXG59XHJcbmV4cG9ydCB0eXBlIEFwcFN0YXRlVCA9IHR5cGVvZiBpbml0aWFsU3RhdGVcclxuXHJcbmV4cG9ydCBjb25zdCBhcHBSZWR1Y2VyID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb246IEFwcEFjdGlvbik6IEFwcFN0YXRlVCA9PiB7XHJcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSBTRVRfQUxMX0JPT0tTOlxyXG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgYWxsQm9va3M6IGFjdGlvbi5wYXlsb2FkIH1cclxuICAgIGNhc2UgU0VUX1BBR0VTX05VTTpcclxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHBhZ2VzTnVtOiBhY3Rpb24ucGF5bG9hZCB9XHJcbiAgICBjYXNlIFNFVF9DVVJSRU5UX1BBR0U6XHJcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBjdXJyZW50UGFnZTogYWN0aW9uLnBheWxvYWQgfVxyXG4gICAgY2FzZSBTRVRfSVRFTVNfT05fUEFHRTpcclxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGl0ZW1zT25QYWdlOiBhY3Rpb24ucGF5bG9hZCB9XHJcbiAgICBjYXNlIFNFVF9BRERJVElPTkFMX0lORk86XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgaXRlbXNPblBhZ2U6IHN0YXRlLml0ZW1zT25QYWdlLm1hcCgoZWRpdGlvbiwgaSkgPT4gKHtcclxuICAgICAgICAgIC4uLmVkaXRpb24sXHJcbiAgICAgICAgICAuLi5hY3Rpb24ucGF5bG9hZFtpXVxyXG4gICAgICAgIH0pKVxyXG4gICAgICB9XHJcbiAgICBjYXNlIFNFVF9DT1ZFUlNfTTpcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBpdGVtc09uUGFnZTogc3RhdGUuaXRlbXNPblBhZ2UubWFwKChlZGl0aW9uLCBpKSA9PiAoe1xyXG4gICAgICAgICAgLi4uZWRpdGlvbixcclxuICAgICAgICAgIG1lZGl1bUNvdmVyOiBhY3Rpb24ucGF5bG9hZFtpXVxyXG4gICAgICAgIH0pKVxyXG4gICAgICB9XHJcbiAgICBjYXNlIFNFVF9DT1ZFUlNfTDpcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBpdGVtc09uUGFnZTogc3RhdGUuaXRlbXNPblBhZ2UubWFwKChlZGl0aW9uLCBpKSA9PiAoe1xyXG4gICAgICAgICAgLi4uZWRpdGlvbixcclxuICAgICAgICAgIGxhcmdlQ292ZXI6IGFjdGlvbi5wYXlsb2FkW2ldXHJcbiAgICAgICAgfSkpXHJcbiAgICAgIH1cclxuICAgIGNhc2UgU0VUX1NFQVJDSElORzpcclxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHNlYXJjaGluZzogYWN0aW9uLnBheWxvYWQgfVxyXG4gICAgY2FzZSBTRVRfTEFTVF9RVUVSWTpcclxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGxhc3RRdWVyeTogYWN0aW9uLnBheWxvYWQgfVxyXG4gICAgY2FzZSBJTkNfU0VBUkNIX0NPVU5UOlxyXG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgc2VhcmNoQ291bnQ6IHN0YXRlLnNlYXJjaENvdW50ICsgMSB9XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gc3RhdGVcclxuICB9XHJcbn1cclxuXHJcbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuIiwiaW1wb3J0IHsgYXBwbHlNaWRkbGV3YXJlLCBjb21iaW5lUmVkdWNlcnMsIGNvbXBvc2UsIGNyZWF0ZVN0b3JlIH0gZnJvbSBcInJlZHV4XCI7XHJcbmltcG9ydCB0aHVua01pZGRsZXdhcmUgZnJvbSBcInJlZHV4LXRodW5rXCI7XHJcbmltcG9ydCB7IGFwcFJlZHVjZXIgfSBmcm9tIFwiLi9hcHAtcmVkdWNlclwiO1xyXG5cclxuXHJcbmNvbnN0IHJlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnMoe1xyXG4gICAgYXBwOiBhcHBSZWR1Y2VyXHJcbn0pXHJcblxyXG5leHBvcnQgdHlwZSBSb290U3RhdGVUID0gUmV0dXJuVHlwZTx0eXBlb2YgcmVkdWNlcj5cclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcclxuLy8gQHRzLWlnbm9yZVxyXG5jb25zdCBjb21wb3NlRW5oYW5jZXJzID0gd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyB8fCBjb21wb3NlO1xyXG5jb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKHJlZHVjZXIsIGNvbXBvc2VFbmhhbmNlcnMoXHJcbiAgICBhcHBseU1pZGRsZXdhcmUodGh1bmtNaWRkbGV3YXJlKVxyXG4pKTtcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcclxuLy8gQHRzLWlnbm9yZVxyXG53aW5kb3cuc3RvcmUgPSBzdG9yZVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHN0b3JlIiwiaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSURpdiB7XHJcbiAgd2lkdGg6IHN0cmluZ1xyXG4gIGhlaWdodDogc3RyaW5nXHJcbiAgYWxpZ25TZWxmOiBzdHJpbmdcclxuICBtYXJnaW46IHN0cmluZ1xyXG4gIHBhZGRpbmc6IHN0cmluZ1xyXG4gIHRleHRBbGlnbjogc3RyaW5nXHJcbiAgY29sb3I6IHN0cmluZ1xyXG4gIHpJbmRleDogc3RyaW5nXHJcbiAgYm9yZGVyOiBzdHJpbmdcclxufVxyXG5cclxudHlwZSBEaXZUID0gUmVhZG9ubHk8UGFydGlhbDxJRGl2Pj5cclxuXHJcbmNvbnN0IERpdiA9IHN0eWxlZC5kaXY8RGl2VD5gXHJcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICB3aWR0aDogJHsocHJvcHMpID0+IHByb3BzLndpZHRoIHx8ICcxMDAlJ307XHJcbiAgaGVpZ2h0OiAkeyhwcm9wcykgPT4gcHJvcHMuaGVpZ2h0IHx8ICcxMDAlJ307XHJcbiAgYWxpZ24tc2VsZjogJHsocHJvcHMpID0+IHByb3BzLmFsaWduU2VsZiB8fCAnY2VudGVyJ307XHJcbiAgbWFyZ2luOiAkeyhwcm9wcykgPT4gcHJvcHMubWFyZ2luIHx8ICcwcHgnfTtcclxuICBwYWRkaW5nOiAkeyhwcm9wcykgPT4gcHJvcHMucGFkZGluZyB8fCAnMHB4J307XHJcbiAgdGV4dC1hbGlnbjogJHsocHJvcHMpID0+IHByb3BzLnRleHRBbGlnbiB8fCAnbGVmdCd9O1xyXG4gIGNvbG9yOiAkeyhwcm9wcykgPT4gcHJvcHMuY29sb3IgfHwgJ3JnYig3MiwgNzgsIDc4KSd9O1xyXG4gIHotaW5kZXg6ICR7KHByb3BzKSA9PiBwcm9wcy56SW5kZXggfHwgJ3Vuc2V0J307XHJcbiAgYm9yZGVyOiAke3Byb3BzID0+IHByb3BzLmJvcmRlciB8fCAnYXV0byd9O1xyXG5gXHJcblxyXG5leHBvcnQgZGVmYXVsdCBEaXZcclxuIiwiaW1wb3J0IHsgRkMgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcclxuaW1wb3J0IERpdiBmcm9tICcuLi9jb21tb24vRGl2J1xyXG5cclxuY29uc3QgRm9vdGVyV3JhcHBlciA9IHN0eWxlZChEaXYpYFxyXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyNDUsIDI0NSwgMjQ1KTtcclxuICBncmlkLWFyZWE6IGZvb3RlcjtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgaGVpZ2h0OiA2dmg7XHJcbiAgZGl2IHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIHRvcDogNTAlO1xyXG4gICAgbGVmdDogNTAlO1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XHJcbiAgfVxyXG5gXHJcblxyXG5jb25zdCBGb290ZXI6IEZDID0gKCkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8Rm9vdGVyV3JhcHBlcj5cclxuICAgICAgPGRpdj5GT1IgUE9SVEZPTElPPC9kaXY+XHJcbiAgICA8L0Zvb3RlcldyYXBwZXI+XHJcbiAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGb290ZXJcclxuIiwiaW1wb3J0IHsgSUVkaXRpb25JbmZvIH0gZnJvbSBcIi4vYXBwLXJlZHVjZXJcIjtcclxuaW1wb3J0IHsgUm9vdFN0YXRlVCB9IGZyb20gXCIuL3N0b3JlLXJlZHV4XCI7XHJcblxyXG5cclxuY29uc3Qgc2VsZWN0b3IgPSB7XHJcbiAgZ2V0UGFnZVNpemUoc3RhdGU6IFJvb3RTdGF0ZVQpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHN0YXRlLmFwcC5wYWdlU2l6ZVxyXG4gIH0sXHJcbiAgZ2V0UGFnZXNOdW0oc3RhdGU6IFJvb3RTdGF0ZVQpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHN0YXRlLmFwcC5wYWdlc051bVxyXG4gIH0sXHJcbiAgZ2V0Q3VycmVudFBhZ2Uoc3RhdGU6IFJvb3RTdGF0ZVQpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHN0YXRlLmFwcC5jdXJyZW50UGFnZVxyXG4gIH0sXHJcbiAgZ2V0SXRlbXNPblBhZ2Uoc3RhdGU6IFJvb3RTdGF0ZVQpOiBJRWRpdGlvbkluZm9bXSB7XHJcbiAgICByZXR1cm4gc3RhdGUuYXBwLml0ZW1zT25QYWdlXHJcbiAgfSxcclxuICBnZXRJc1NlYXJjaGluZyhzdGF0ZTogUm9vdFN0YXRlVCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHN0YXRlLmFwcC5zZWFyY2hpbmdcclxuICB9LFxyXG4gIGdldExhc3RRdWVyeShzdGF0ZTogUm9vdFN0YXRlVCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gc3RhdGUuYXBwLmxhc3RRdWVyeVxyXG4gIH0sXHJcbiAgZ2V0U2VhcmNoQ291bnQoc3RhdGU6IFJvb3RTdGF0ZVQpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHN0YXRlLmFwcC5zZWFyY2hDb3VudFxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgc2VsZWN0b3IiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMjVkNmQ3ZDYxNjE2YjRkZjk3ZDQwZjhlODVmYjdiNzUuZ2lmXCI7IiwiaW1wb3J0IHByZWxvYWRlciBmcm9tICdAL2ltYWdlcy9wcmVsb2FkZXIuZ2lmJ1xyXG5pbXBvcnQgeyBGQyB9IGZyb20gJ3JlYWN0J1xyXG5cclxuaW50ZXJmYWNlIElQcm9wcyB7XHJcbiAgaXNGZXRjaGluZzogYm9vbGVhblxyXG59XHJcblxyXG5jb25zdCBQcmVsb2FkZXI6IEZDPElQcm9wcz4gPSAoeyBpc0ZldGNoaW5nIH0pID0+IChcclxuICA8Pntpc0ZldGNoaW5nID8gPGltZyBzcmM9e3ByZWxvYWRlcn0gYWx0PScnIC8+IDogJyd9PC8+XHJcbilcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFByZWxvYWRlclxyXG4iLCJpbXBvcnQgeyBGQyB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xyXG5cclxuY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXY8eyBmaXhlZEhlaWdodDogYm9vbGVhbiB9PmBcclxuICBtaW4taGVpZ2h0OiA4NnZoO1xyXG4gIGRpc3BsYXk6IGdyaWQ7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgbWlubWF4KDkwMHB4LCA4ZnIpIDFmcjtcclxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDI0cHgpIHtcclxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDcwMHB4IDFmcjtcclxuICB9XHJcbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDUwMHB4IDFmcjtcclxuICB9XHJcbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTY4cHgpIHtcclxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMGZyIG1pbm1heCgzMDBweCwgMWZyKSAwZnI7XHJcbiAgfVxyXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDMyMHB4KSB7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDBmciBtaW5tYXgoMjUwcHgsIDFmcikgMGZyO1xyXG4gIH1cclxuXHJcbiAgaGVpZ2h0OiAke3Byb3BzID0+IChwcm9wcy5maXhlZEhlaWdodCA/ICc4NnZoJyA6ICdmaXQtY29udGVudCcpfTtcclxuYFxyXG5cclxuY29uc3QgQ29udGVudEFyZWEgPSBzdHlsZWQuZGl2YFxyXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIGhlaWdodDogMTAwJTtcclxuYFxyXG5cclxuaW50ZXJmYWNlIElTaW5nbGVQYW5lUHJvcHMge1xyXG4gIGZpeGVkSGVpZ2h0PzogYm9vbGVhblxyXG59XHJcblxyXG5jb25zdCBTaW5nbGVQYW5lOiBGQzxJU2luZ2xlUGFuZVByb3BzPiA9ICh7IGNoaWxkcmVuLCBmaXhlZEhlaWdodCA9IGZhbHNlIH0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPFdyYXBwZXIgZml4ZWRIZWlnaHQ9e2ZpeGVkSGVpZ2h0fT5cclxuICAgICAgPGRpdiAvPlxyXG4gICAgICA8Q29udGVudEFyZWE+e2NoaWxkcmVufTwvQ29udGVudEFyZWE+XHJcbiAgICAgIDxkaXYgLz5cclxuICAgIDwvV3JhcHBlcj5cclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNpbmdsZVBhbmVcclxuIiwidmFyIGlzTWVyZ2VhYmxlT2JqZWN0ID0gZnVuY3Rpb24gaXNNZXJnZWFibGVPYmplY3QodmFsdWUpIHtcblx0cmV0dXJuIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSlcblx0XHQmJiAhaXNTcGVjaWFsKHZhbHVlKVxufTtcblxuZnVuY3Rpb24gaXNOb25OdWxsT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCdcbn1cblxuZnVuY3Rpb24gaXNTcGVjaWFsKHZhbHVlKSB7XG5cdHZhciBzdHJpbmdWYWx1ZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cblx0cmV0dXJuIHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBSZWdFeHBdJ1xuXHRcdHx8IHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBEYXRlXSdcblx0XHR8fCBpc1JlYWN0RWxlbWVudCh2YWx1ZSlcbn1cblxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL2I1YWM5NjNmYjc5MWQxMjk4ZTdmMzk2MjM2MzgzYmM5NTVmOTE2YzEvc3JjL2lzb21vcnBoaWMvY2xhc3NpYy9lbGVtZW50L1JlYWN0RWxlbWVudC5qcyNMMjEtTDI1XG52YXIgY2FuVXNlU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IGNhblVzZVN5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSA6IDB4ZWFjNztcblxuZnVuY3Rpb24gaXNSZWFjdEVsZW1lbnQodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEVcbn1cblxuZnVuY3Rpb24gZW1wdHlUYXJnZXQodmFsKSB7XG5cdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgPyBbXSA6IHt9XG59XG5cbmZ1bmN0aW9uIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHZhbHVlLCBvcHRpb25zKSB7XG5cdHJldHVybiAob3B0aW9ucy5jbG9uZSAhPT0gZmFsc2UgJiYgb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkpXG5cdFx0PyBkZWVwbWVyZ2UoZW1wdHlUYXJnZXQodmFsdWUpLCB2YWx1ZSwgb3B0aW9ucylcblx0XHQ6IHZhbHVlXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRBcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdHJldHVybiB0YXJnZXQuY29uY2F0KHNvdXJjZSkubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoZWxlbWVudCwgb3B0aW9ucylcblx0fSlcbn1cblxuZnVuY3Rpb24gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0dmFyIGRlc3RpbmF0aW9uID0ge307XG5cdGlmIChvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHRhcmdldCkpIHtcblx0XHRPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQodGFyZ2V0W2tleV0sIG9wdGlvbnMpO1xuXHRcdH0pO1xuXHR9XG5cdE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRpZiAoIW9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3Qoc291cmNlW2tleV0pIHx8ICF0YXJnZXRba2V5XSkge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZVtrZXldLCBvcHRpb25zKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGRlZXBtZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBkZXN0aW5hdGlvblxufVxuXG5mdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdG9wdGlvbnMuYXJyYXlNZXJnZSA9IG9wdGlvbnMuYXJyYXlNZXJnZSB8fCBkZWZhdWx0QXJyYXlNZXJnZTtcblx0b3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCA9IG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QgfHwgaXNNZXJnZWFibGVPYmplY3Q7XG5cblx0dmFyIHNvdXJjZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHNvdXJjZSk7XG5cdHZhciB0YXJnZXRJc0FycmF5ID0gQXJyYXkuaXNBcnJheSh0YXJnZXQpO1xuXHR2YXIgc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCA9IHNvdXJjZUlzQXJyYXkgPT09IHRhcmdldElzQXJyYXk7XG5cblx0aWYgKCFzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoKSB7XG5cdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIGlmIChzb3VyY2VJc0FycmF5KSB7XG5cdFx0cmV0dXJuIG9wdGlvbnMuYXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpXG5cdH1cbn1cblxuZGVlcG1lcmdlLmFsbCA9IGZ1bmN0aW9uIGRlZXBtZXJnZUFsbChhcnJheSwgb3B0aW9ucykge1xuXHRpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdmaXJzdCBhcmd1bWVudCBzaG91bGQgYmUgYW4gYXJyYXknKVxuXHR9XG5cblx0cmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbihwcmV2LCBuZXh0KSB7XG5cdFx0cmV0dXJuIGRlZXBtZXJnZShwcmV2LCBuZXh0LCBvcHRpb25zKVxuXHR9LCB7fSlcbn07XG5cbnZhciBkZWVwbWVyZ2VfMSA9IGRlZXBtZXJnZTtcblxuZXhwb3J0IGRlZmF1bHQgZGVlcG1lcmdlXzE7XG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5leHBvcnQgZGVmYXVsdCBmcmVlR2xvYmFsO1xuIiwiaW1wb3J0IGZyZWVHbG9iYWwgZnJvbSAnLi9fZnJlZUdsb2JhbC5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuZXhwb3J0IGRlZmF1bHQgcm9vdDtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuZXhwb3J0IGRlZmF1bHQgU3ltYm9sO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFJhd1RhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBvYmplY3RUb1N0cmluZztcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcbmltcG9ydCBnZXRSYXdUYWcgZnJvbSAnLi9fZ2V0UmF3VGFnLmpzJztcbmltcG9ydCBvYmplY3RUb1N0cmluZyBmcm9tICcuL19vYmplY3RUb1N0cmluZy5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlR2V0VGFnO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG92ZXJBcmc7XG4iLCJpbXBvcnQgb3ZlckFyZyBmcm9tICcuL19vdmVyQXJnLmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCk7XG5cbmV4cG9ydCBkZWZhdWx0IGdldFByb3RvdHlwZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdExpa2U7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBnZXRQcm90b3R5cGUgZnJvbSAnLi9fZ2V0UHJvdG90eXBlLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzUGxhaW5PYmplY3Q7XG4iLCIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXE7XG4iLCJpbXBvcnQgZXEgZnJvbSAnLi9lcS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzc29jSW5kZXhPZjtcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVEZWxldGU7XG4iLCJpbXBvcnQgbGlzdENhY2hlQ2xlYXIgZnJvbSAnLi9fbGlzdENhY2hlQ2xlYXIuanMnO1xuaW1wb3J0IGxpc3RDYWNoZURlbGV0ZSBmcm9tICcuL19saXN0Q2FjaGVEZWxldGUuanMnO1xuaW1wb3J0IGxpc3RDYWNoZUdldCBmcm9tICcuL19saXN0Q2FjaGVHZXQuanMnO1xuaW1wb3J0IGxpc3RDYWNoZUhhcyBmcm9tICcuL19saXN0Q2FjaGVIYXMuanMnO1xuaW1wb3J0IGxpc3RDYWNoZVNldCBmcm9tICcuL19saXN0Q2FjaGVTZXQuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IExpc3RDYWNoZTtcbiIsIi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlQ2xlYXI7XG4iLCJpbXBvcnQgYXNzb2NJbmRleE9mIGZyb20gJy4vX2Fzc29jSW5kZXhPZi5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZUdldDtcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZUhhcztcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICArK3RoaXMuc2l6ZTtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVTZXQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNPYmplY3Q7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNGdW5jdGlvbjtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5leHBvcnQgZGVmYXVsdCBjb3JlSnNEYXRhO1xuIiwiaW1wb3J0IGNvcmVKc0RhdGEgZnJvbSAnLi9fY29yZUpzRGF0YS5qcyc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzTWFza2VkO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b1NvdXJjZTtcbiIsImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgaXNNYXNrZWQgZnJvbSAnLi9faXNNYXNrZWQuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IHRvU291cmNlIGZyb20gJy4vX3RvU291cmNlLmpzJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzTmF0aXZlO1xuIiwiaW1wb3J0IGJhc2VJc05hdGl2ZSBmcm9tICcuL19iYXNlSXNOYXRpdmUuanMnO1xuaW1wb3J0IGdldFZhbHVlIGZyb20gJy4vX2dldFZhbHVlLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0TmF0aXZlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFZhbHVlO1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG5leHBvcnQgZGVmYXVsdCBNYXA7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbmV4cG9ydCBkZWZhdWx0IG5hdGl2ZUNyZWF0ZTtcbiIsImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoR2V0O1xuIiwiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hIYXM7XG4iLCJpbXBvcnQgaGFzaENsZWFyIGZyb20gJy4vX2hhc2hDbGVhci5qcyc7XG5pbXBvcnQgaGFzaERlbGV0ZSBmcm9tICcuL19oYXNoRGVsZXRlLmpzJztcbmltcG9ydCBoYXNoR2V0IGZyb20gJy4vX2hhc2hHZXQuanMnO1xuaW1wb3J0IGhhc2hIYXMgZnJvbSAnLi9faGFzaEhhcy5qcyc7XG5pbXBvcnQgaGFzaFNldCBmcm9tICcuL19oYXNoU2V0LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IEhhc2g7XG4iLCJpbXBvcnQgbmF0aXZlQ3JlYXRlIGZyb20gJy4vX25hdGl2ZUNyZWF0ZS5qcyc7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoRGVsZXRlO1xuIiwiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaFNldDtcbiIsImltcG9ydCBpc0tleWFibGUgZnJvbSAnLi9faXNLZXlhYmxlLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRNYXBEYXRhO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0tleWFibGU7XG4iLCJpbXBvcnQgbWFwQ2FjaGVDbGVhciBmcm9tICcuL19tYXBDYWNoZUNsZWFyLmpzJztcbmltcG9ydCBtYXBDYWNoZURlbGV0ZSBmcm9tICcuL19tYXBDYWNoZURlbGV0ZS5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVHZXQgZnJvbSAnLi9fbWFwQ2FjaGVHZXQuanMnO1xuaW1wb3J0IG1hcENhY2hlSGFzIGZyb20gJy4vX21hcENhY2hlSGFzLmpzJztcbmltcG9ydCBtYXBDYWNoZVNldCBmcm9tICcuL19tYXBDYWNoZVNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBNYXBDYWNoZTtcbiIsImltcG9ydCBIYXNoIGZyb20gJy4vX0hhc2guanMnO1xuaW1wb3J0IExpc3RDYWNoZSBmcm9tICcuL19MaXN0Q2FjaGUuanMnO1xuaW1wb3J0IE1hcCBmcm9tICcuL19NYXAuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlQ2xlYXI7XG4iLCJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlRGVsZXRlO1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVHZXQ7XG4iLCJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVIYXM7XG4iLCJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZVNldDtcbiIsImltcG9ydCBMaXN0Q2FjaGUgZnJvbSAnLi9fTGlzdENhY2hlLmpzJztcbmltcG9ydCBzdGFja0NsZWFyIGZyb20gJy4vX3N0YWNrQ2xlYXIuanMnO1xuaW1wb3J0IHN0YWNrRGVsZXRlIGZyb20gJy4vX3N0YWNrRGVsZXRlLmpzJztcbmltcG9ydCBzdGFja0dldCBmcm9tICcuL19zdGFja0dldC5qcyc7XG5pbXBvcnQgc3RhY2tIYXMgZnJvbSAnLi9fc3RhY2tIYXMuanMnO1xuaW1wb3J0IHN0YWNrU2V0IGZyb20gJy4vX3N0YWNrU2V0LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBTdGFjaztcbiIsImltcG9ydCBMaXN0Q2FjaGUgZnJvbSAnLi9fTGlzdENhY2hlLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tEZWxldGU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0YWNrR2V0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tIYXM7XG4iLCJpbXBvcnQgTGlzdENhY2hlIGZyb20gJy4vX0xpc3RDYWNoZS5qcyc7XG5pbXBvcnQgTWFwIGZyb20gJy4vX01hcC5qcyc7XG5pbXBvcnQgTWFwQ2FjaGUgZnJvbSAnLi9fTWFwQ2FjaGUuanMnO1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tTZXQ7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVQcm9wZXJ0eTtcbiIsImltcG9ydCBkZWZpbmVQcm9wZXJ0eSBmcm9tICcuL19kZWZpbmVQcm9wZXJ0eS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAqIHZhbHVlIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VBc3NpZ25WYWx1ZTtcbiIsImltcG9ydCBiYXNlQXNzaWduVmFsdWUgZnJvbSAnLi9fYmFzZUFzc2lnblZhbHVlLmpzJztcbmltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYXNzaWduVmFsdWU7XG4iLCJpbXBvcnQgYXNzaWduVmFsdWUgZnJvbSAnLi9fYXNzaWduVmFsdWUuanMnO1xuaW1wb3J0IGJhc2VBc3NpZ25WYWx1ZSBmcm9tICcuL19iYXNlQXNzaWduVmFsdWUuanMnO1xuXG4vKipcbiAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gICAgaWYgKGlzTmV3KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29weU9iamVjdDtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc0FyZ3VtZW50cztcbiIsImltcG9ydCBiYXNlSXNBcmd1bWVudHMgZnJvbSAnLi9fYmFzZUlzQXJndW1lbnRzLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaXNBcmd1bWVudHM7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuZXhwb3J0IGRlZmF1bHQgaXNBcnJheTtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuaW1wb3J0IHN0dWJGYWxzZSBmcm9tICcuL3N0dWJGYWxzZS5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxuZXhwb3J0IGRlZmF1bHQgaXNCdWZmZXI7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0dWJGYWxzZTtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNJbmRleDtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNMZW5ndGg7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc0xlbmd0aCBmcm9tICcuL2lzTGVuZ3RoLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc1R5cGVkQXJyYXk7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VVbmFyeTtcbiIsImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgaWYgKHR5cGVzKSB7XG4gICAgICByZXR1cm4gdHlwZXM7XG4gICAgfVxuXG4gICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5leHBvcnQgZGVmYXVsdCBub2RlVXRpbDtcbiIsImltcG9ydCBiYXNlSXNUeXBlZEFycmF5IGZyb20gJy4vX2Jhc2VJc1R5cGVkQXJyYXkuanMnO1xuaW1wb3J0IGJhc2VVbmFyeSBmcm9tICcuL19iYXNlVW5hcnkuanMnO1xuaW1wb3J0IG5vZGVVdGlsIGZyb20gJy4vX25vZGVVdGlsLmpzJztcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbmV4cG9ydCBkZWZhdWx0IGlzVHlwZWRBcnJheTtcbiIsImltcG9ydCBiYXNlVGltZXMgZnJvbSAnLi9fYmFzZVRpbWVzLmpzJztcbmltcG9ydCBpc0FyZ3VtZW50cyBmcm9tICcuL2lzQXJndW1lbnRzLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNCdWZmZXIgZnJvbSAnLi9pc0J1ZmZlci5qcyc7XG5pbXBvcnQgaXNJbmRleCBmcm9tICcuL19pc0luZGV4LmpzJztcbmltcG9ydCBpc1R5cGVkQXJyYXkgZnJvbSAnLi9pc1R5cGVkQXJyYXkuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5TGlrZUtleXM7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlVGltZXM7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzUHJvdG90eXBlO1xuIiwiaW1wb3J0IG92ZXJBcmcgZnJvbSAnLi9fb3ZlckFyZy5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxuZXhwb3J0IGRlZmF1bHQgbmF0aXZlS2V5cztcbiIsImltcG9ydCBpc1Byb3RvdHlwZSBmcm9tICcuL19pc1Byb3RvdHlwZS5qcyc7XG5pbXBvcnQgbmF0aXZlS2V5cyBmcm9tICcuL19uYXRpdmVLZXlzLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlS2V5cztcbiIsImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgaXNMZW5ndGggZnJvbSAnLi9pc0xlbmd0aC5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0FycmF5TGlrZTtcbiIsImltcG9ydCBhcnJheUxpa2VLZXlzIGZyb20gJy4vX2FycmF5TGlrZUtleXMuanMnO1xuaW1wb3J0IGJhc2VLZXlzIGZyb20gJy4vX2Jhc2VLZXlzLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL2lzQXJyYXlMaWtlLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGtleXM7XG4iLCJpbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgaXNQcm90b3R5cGUgZnJvbSAnLi9faXNQcm90b3R5cGUuanMnO1xuaW1wb3J0IG5hdGl2ZUtleXNJbiBmcm9tICcuL19uYXRpdmVLZXlzSW4uanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gIH1cbiAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlS2V5c0luO1xuIiwiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5hdGl2ZUtleXNJbjtcbiIsImltcG9ydCBhcnJheUxpa2VLZXlzIGZyb20gJy4vX2FycmF5TGlrZUtleXMuanMnO1xuaW1wb3J0IGJhc2VLZXlzSW4gZnJvbSAnLi9fYmFzZUtleXNJbi5qcyc7XG5pbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9pc0FycmF5TGlrZS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXNJbihuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICovXG5mdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBrZXlzSW47XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgYWxsb2NVbnNhZmUgPSBCdWZmZXIgPyBCdWZmZXIuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gIGlmIChpc0RlZXApIHtcbiAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gIH1cbiAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgYnVmZmVyLmNvcHkocmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVCdWZmZXI7XG4iLCIvKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29weUFycmF5O1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICogLy8gPT4gW1tdLCBbXV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R1YkFycmF5O1xuIiwiaW1wb3J0IGFycmF5RmlsdGVyIGZyb20gJy4vX2FycmF5RmlsdGVyLmpzJztcbmltcG9ydCBzdHViQXJyYXkgZnJvbSAnLi9zdHViQXJyYXkuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICovXG52YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGdldFN5bWJvbHM7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5RmlsdGVyO1xuIiwiLyoqXG4gKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheVB1c2g7XG4iLCJpbXBvcnQgYXJyYXlQdXNoIGZyb20gJy4vX2FycmF5UHVzaC5qcyc7XG5pbXBvcnQgZ2V0UHJvdG90eXBlIGZyb20gJy4vX2dldFByb3RvdHlwZS5qcyc7XG5pbXBvcnQgZ2V0U3ltYm9scyBmcm9tICcuL19nZXRTeW1ib2xzLmpzJztcbmltcG9ydCBzdHViQXJyYXkgZnJvbSAnLi9zdHViQXJyYXkuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHdoaWxlIChvYmplY3QpIHtcbiAgICBhcnJheVB1c2gocmVzdWx0LCBnZXRTeW1ib2xzKG9iamVjdCkpO1xuICAgIG9iamVjdCA9IGdldFByb3RvdHlwZShvYmplY3QpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnZXRTeW1ib2xzSW47XG4iLCJpbXBvcnQgYXJyYXlQdXNoIGZyb20gJy4vX2FycmF5UHVzaC5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXRBbGxLZXlzO1xuIiwiaW1wb3J0IGJhc2VHZXRBbGxLZXlzIGZyb20gJy4vX2Jhc2VHZXRBbGxLZXlzLmpzJztcbmltcG9ydCBnZXRTeW1ib2xzIGZyb20gJy4vX2dldFN5bWJvbHMuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0QWxsS2V5cztcbiIsImltcG9ydCBiYXNlR2V0QWxsS2V5cyBmcm9tICcuL19iYXNlR2V0QWxsS2V5cy5qcyc7XG5pbXBvcnQgZ2V0U3ltYm9sc0luIGZyb20gJy4vX2dldFN5bWJvbHNJbi5qcyc7XG5pbXBvcnQga2V5c0luIGZyb20gJy4va2V5c0luLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzSW4ob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNJbiwgZ2V0U3ltYm9sc0luKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0QWxsS2V5c0luO1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKTtcblxuZXhwb3J0IGRlZmF1bHQgRGF0YVZpZXc7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvbWlzZTtcbiIsImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcbmltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgU2V0ID0gZ2V0TmF0aXZlKHJvb3QsICdTZXQnKTtcblxuZXhwb3J0IGRlZmF1bHQgU2V0O1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBXZWFrTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdXZWFrTWFwJyk7XG5cbmV4cG9ydCBkZWZhdWx0IFdlYWtNYXA7XG4iLCJpbXBvcnQgRGF0YVZpZXcgZnJvbSAnLi9fRGF0YVZpZXcuanMnO1xuaW1wb3J0IE1hcCBmcm9tICcuL19NYXAuanMnO1xuaW1wb3J0IFByb21pc2UgZnJvbSAnLi9fUHJvbWlzZS5qcyc7XG5pbXBvcnQgU2V0IGZyb20gJy4vX1NldC5qcyc7XG5pbXBvcnQgV2Vha01hcCBmcm9tICcuL19XZWFrTWFwLmpzJztcbmltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IHRvU291cmNlIGZyb20gJy4vX3RvU291cmNlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbnZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0VGFnO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBhcnJheSBjbG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lQXJyYXkoYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIC8vIEFkZCBwcm9wZXJ0aWVzIGFzc2lnbmVkIGJ5IGBSZWdFeHAjZXhlY2AuXG4gIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgcmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaW5pdENsb25lQXJyYXk7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheTtcblxuZXhwb3J0IGRlZmF1bHQgVWludDhBcnJheTtcbiIsImltcG9ydCBVaW50OEFycmF5IGZyb20gJy4vX1VpbnQ4QXJyYXkuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lQXJyYXlCdWZmZXI7XG4iLCIvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUZsYWdzID0gL1xcdyokLztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gKi9cbmZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZVJlZ0V4cDtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZVN5bWJvbDtcbiIsImltcG9ydCBjbG9uZUFycmF5QnVmZmVyIGZyb20gJy4vX2Nsb25lQXJyYXlCdWZmZXIuanMnO1xuaW1wb3J0IGNsb25lRGF0YVZpZXcgZnJvbSAnLi9fY2xvbmVEYXRhVmlldy5qcyc7XG5pbXBvcnQgY2xvbmVSZWdFeHAgZnJvbSAnLi9fY2xvbmVSZWdFeHAuanMnO1xuaW1wb3J0IGNsb25lU3ltYm9sIGZyb20gJy4vX2Nsb25lU3ltYm9sLmpzJztcbmltcG9ydCBjbG9uZVR5cGVkQXJyYXkgZnJvbSAnLi9fY2xvbmVUeXBlZEFycmF5LmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lIGJhc2VkIG9uIGl0cyBgdG9TdHJpbmdUYWdgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY2xvbmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE1hcGAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgYFNldGAsIG9yIGBTdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUJ5VGFnKG9iamVjdCwgdGFnLCBpc0RlZXApIHtcbiAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIHJldHVybiBjbG9uZUFycmF5QnVmZmVyKG9iamVjdCk7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuXG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIHJldHVybiBjbG9uZURhdGFWaWV3KG9iamVjdCwgaXNEZWVwKTtcblxuICAgIGNhc2UgZmxvYXQzMlRhZzogY2FzZSBmbG9hdDY0VGFnOlxuICAgIGNhc2UgaW50OFRhZzogY2FzZSBpbnQxNlRhZzogY2FzZSBpbnQzMlRhZzpcbiAgICBjYXNlIHVpbnQ4VGFnOiBjYXNlIHVpbnQ4Q2xhbXBlZFRhZzogY2FzZSB1aW50MTZUYWc6IGNhc2UgdWludDMyVGFnOlxuICAgICAgcmV0dXJuIGNsb25lVHlwZWRBcnJheShvYmplY3QsIGlzRGVlcCk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgIHJldHVybiBjbG9uZVJlZ0V4cChvYmplY3QpO1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGluaXRDbG9uZUJ5VGFnO1xuIiwiaW1wb3J0IGNsb25lQXJyYXlCdWZmZXIgZnJvbSAnLi9fY2xvbmVBcnJheUJ1ZmZlci5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gKi9cbmZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lRGF0YVZpZXc7XG4iLCJpbXBvcnQgY2xvbmVBcnJheUJ1ZmZlciBmcm9tICcuL19jbG9uZUFycmF5QnVmZmVyLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVUeXBlZEFycmF5O1xuIiwiaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICovXG52YXIgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgaWYgKCFpc09iamVjdChwcm90bykpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgfVxuICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59KCkpO1xuXG5leHBvcnQgZGVmYXVsdCBiYXNlQ3JlYXRlO1xuIiwiaW1wb3J0IGJhc2VJc01hcCBmcm9tICcuL19iYXNlSXNNYXAuanMnO1xuaW1wb3J0IGJhc2VVbmFyeSBmcm9tICcuL19iYXNlVW5hcnkuanMnO1xuaW1wb3J0IG5vZGVVdGlsIGZyb20gJy4vX25vZGVVdGlsLmpzJztcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE1hcGAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNNYXAobmV3IE1hcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc01hcChuZXcgV2Vha01hcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNNYXAgPSBub2RlSXNNYXAgPyBiYXNlVW5hcnkobm9kZUlzTWFwKSA6IGJhc2VJc01hcDtcblxuZXhwb3J0IGRlZmF1bHQgaXNNYXA7XG4iLCJpbXBvcnQgZ2V0VGFnIGZyb20gJy4vX2dldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWFwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXAodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBtYXBUYWc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc01hcDtcbiIsImltcG9ydCBiYXNlSXNTZXQgZnJvbSAnLi9fYmFzZUlzU2V0LmpzJztcbmltcG9ydCBiYXNlVW5hcnkgZnJvbSAnLi9fYmFzZVVuYXJ5LmpzJztcbmltcG9ydCBub2RlVXRpbCBmcm9tICcuL19ub2RlVXRpbC5qcyc7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTZXRgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU2V0KG5ldyBTZXQpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IGlzU2V0O1xuIiwiaW1wb3J0IGdldFRhZyBmcm9tICcuL19nZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzZXRUYWcgPSAnW29iamVjdCBTZXRdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1NldGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzU2V0KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gc2V0VGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNTZXQ7XG4iLCJpbXBvcnQgU3RhY2sgZnJvbSAnLi9fU3RhY2suanMnO1xuaW1wb3J0IGFycmF5RWFjaCBmcm9tICcuL19hcnJheUVhY2guanMnO1xuaW1wb3J0IGFzc2lnblZhbHVlIGZyb20gJy4vX2Fzc2lnblZhbHVlLmpzJztcbmltcG9ydCBiYXNlQXNzaWduIGZyb20gJy4vX2Jhc2VBc3NpZ24uanMnO1xuaW1wb3J0IGJhc2VBc3NpZ25JbiBmcm9tICcuL19iYXNlQXNzaWduSW4uanMnO1xuaW1wb3J0IGNsb25lQnVmZmVyIGZyb20gJy4vX2Nsb25lQnVmZmVyLmpzJztcbmltcG9ydCBjb3B5QXJyYXkgZnJvbSAnLi9fY29weUFycmF5LmpzJztcbmltcG9ydCBjb3B5U3ltYm9scyBmcm9tICcuL19jb3B5U3ltYm9scy5qcyc7XG5pbXBvcnQgY29weVN5bWJvbHNJbiBmcm9tICcuL19jb3B5U3ltYm9sc0luLmpzJztcbmltcG9ydCBnZXRBbGxLZXlzIGZyb20gJy4vX2dldEFsbEtleXMuanMnO1xuaW1wb3J0IGdldEFsbEtleXNJbiBmcm9tICcuL19nZXRBbGxLZXlzSW4uanMnO1xuaW1wb3J0IGdldFRhZyBmcm9tICcuL19nZXRUYWcuanMnO1xuaW1wb3J0IGluaXRDbG9uZUFycmF5IGZyb20gJy4vX2luaXRDbG9uZUFycmF5LmpzJztcbmltcG9ydCBpbml0Q2xvbmVCeVRhZyBmcm9tICcuL19pbml0Q2xvbmVCeVRhZy5qcyc7XG5pbXBvcnQgaW5pdENsb25lT2JqZWN0IGZyb20gJy4vX2luaXRDbG9uZU9iamVjdC5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzQnVmZmVyIGZyb20gJy4vaXNCdWZmZXIuanMnO1xuaW1wb3J0IGlzTWFwIGZyb20gJy4vaXNNYXAuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IGlzU2V0IGZyb20gJy4vaXNTZXQuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcbmltcG9ydCBrZXlzSW4gZnJvbSAnLi9rZXlzSW4uanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xudmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIHN1cHBvcnRlZCBieSBgXy5jbG9uZWAuICovXG52YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbmNsb25lYWJsZVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRhVmlld1RhZ10gPVxuY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbaW50MTZUYWddID1cbmNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbmNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9XG5jbG9uZWFibGVUYWdzW3JlZ2V4cFRhZ10gPSBjbG9uZWFibGVUYWdzW3NldFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDE2VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG5jbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gRGVlcCBjbG9uZVxuICogIDIgLSBGbGF0dGVuIGluaGVyaXRlZCBwcm9wZXJ0aWVzXG4gKiAgNCAtIENsb25lIHN5bWJvbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gIHZhciByZXN1bHQsXG4gICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUc7XG5cbiAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gIH1cbiAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgaWYgKGlzQXJyKSB7XG4gICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgIGlmICghaXNEZWVwKSB7XG4gICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcblxuICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICB9XG4gICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgIDogY29weVN5bWJvbHModmFsdWUsIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcCk7XG4gICAgfVxuICB9XG4gIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgaWYgKHN0YWNrZWQpIHtcbiAgICByZXR1cm4gc3RhY2tlZDtcbiAgfVxuICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgIHJlc3VsdC5hZGQoYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdWJWYWx1ZSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICA6IChpc0ZsYXQgPyBrZXlzSW4gOiBrZXlzKTtcblxuICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgaWYgKHByb3BzKSB7XG4gICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUNsb25lO1xuIiwiaW1wb3J0IGJhc2VDcmVhdGUgZnJvbSAnLi9fYmFzZUNyZWF0ZS5qcyc7XG5pbXBvcnQgZ2V0UHJvdG90eXBlIGZyb20gJy4vX2dldFByb3RvdHlwZS5qcyc7XG5pbXBvcnQgaXNQcm90b3R5cGUgZnJvbSAnLi9faXNQcm90b3R5cGUuanMnO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgIDoge307XG59XG5cbmV4cG9ydCBkZWZhdWx0IGluaXRDbG9uZU9iamVjdDtcbiIsImltcG9ydCBjb3B5T2JqZWN0IGZyb20gJy4vX2NvcHlPYmplY3QuanMnO1xuaW1wb3J0IGdldFN5bWJvbHNJbiBmcm9tICcuL19nZXRTeW1ib2xzSW4uanMnO1xuXG4vKipcbiAqIENvcGllcyBvd24gYW5kIGluaGVyaXRlZCBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5U3ltYm9sc0luKHNvdXJjZSwgb2JqZWN0KSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9sc0luKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvcHlTeW1ib2xzSW47XG4iLCJpbXBvcnQgY29weU9iamVjdCBmcm9tICcuL19jb3B5T2JqZWN0LmpzJztcbmltcG9ydCBrZXlzSW4gZnJvbSAnLi9rZXlzSW4uanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbkluYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduSW4ob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VBc3NpZ25JbjtcbiIsImltcG9ydCBjb3B5T2JqZWN0IGZyb20gJy4vX2NvcHlPYmplY3QuanMnO1xuaW1wb3J0IGdldFN5bWJvbHMgZnJvbSAnLi9fZ2V0U3ltYm9scy5qcyc7XG5cbi8qKlxuICogQ29waWVzIG93biBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5U3ltYm9scyhzb3VyY2UsIG9iamVjdCkge1xuICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHMoc291cmNlKSwgb2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29weVN5bWJvbHM7XG4iLCJpbXBvcnQgY29weU9iamVjdCBmcm9tICcuL19jb3B5T2JqZWN0LmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUFzc2lnbjtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheUVhY2goYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXJyYXlFYWNoO1xuIiwiaW1wb3J0IGJhc2VDbG9uZSBmcm9tICcuL19iYXNlQ2xvbmUuanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xudmFyIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNoYWxsb3cgY2xvbmUgb2YgYHZhbHVlYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvbiB0aGVcbiAqIFtzdHJ1Y3R1cmVkIGNsb25lIGFsZ29yaXRobV0oaHR0cHM6Ly9tZG4uaW8vU3RydWN0dXJlZF9jbG9uZV9hbGdvcml0aG0pXG4gKiBhbmQgc3VwcG9ydHMgY2xvbmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLCBkYXRlIG9iamVjdHMsIG1hcHMsXG4gKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWRcbiAqIGFycmF5cy4gVGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYGFyZ3VtZW50c2Agb2JqZWN0cyBhcmUgY2xvbmVkXG4gKiBhcyBwbGFpbiBvYmplY3RzLiBBbiBlbXB0eSBvYmplY3QgaXMgcmV0dXJuZWQgZm9yIHVuY2xvbmVhYmxlIHZhbHVlcyBzdWNoXG4gKiBhcyBlcnJvciBvYmplY3RzLCBmdW5jdGlvbnMsIERPTSBub2RlcywgYW5kIFdlYWtNYXBzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gKiBAc2VlIF8uY2xvbmVEZWVwXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICpcbiAqIHZhciBzaGFsbG93ID0gXy5jbG9uZShvYmplY3RzKTtcbiAqIGNvbnNvbGUubG9nKHNoYWxsb3dbMF0gPT09IG9iamVjdHNbMF0pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBjbG9uZSh2YWx1ZSkge1xuICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5TWFwO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc1N5bWJvbDtcbiIsImltcG9ydCBNYXBDYWNoZSBmcm9tICcuL19NYXBDYWNoZS5qcyc7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsImltcG9ydCBtZW1vaXplQ2FwcGVkIGZyb20gJy4vX21lbW9pemVDYXBwZWQuanMnO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgcmVzdWx0LnB1c2goJycpO1xuICB9XG4gIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ1RvUGF0aDtcbiIsImltcG9ydCBtZW1vaXplIGZyb20gJy4vbWVtb2l6ZS5qcyc7XG5cbi8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbnZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG4gIH0pO1xuXG4gIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZUNhcHBlZDtcbiIsImltcG9ydCBpc1N5bWJvbCBmcm9tICcuL2lzU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICovXG5mdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvS2V5O1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IGFycmF5TWFwIGZyb20gJy4vX2FycmF5TWFwLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNTeW1ib2wgZnJvbSAnLi9pc1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VUb1N0cmluZztcbiIsImltcG9ydCBiYXNlVG9TdHJpbmcgZnJvbSAnLi9fYmFzZVRvU3RyaW5nLmpzJztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b1N0cmluZztcbiIsImltcG9ydCBhcnJheU1hcCBmcm9tICcuL19hcnJheU1hcC5qcyc7XG5pbXBvcnQgY29weUFycmF5IGZyb20gJy4vX2NvcHlBcnJheS5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzU3ltYm9sIGZyb20gJy4vaXNTeW1ib2wuanMnO1xuaW1wb3J0IHN0cmluZ1RvUGF0aCBmcm9tICcuL19zdHJpbmdUb1BhdGguanMnO1xuaW1wb3J0IHRvS2V5IGZyb20gJy4vX3RvS2V5LmpzJztcbmltcG9ydCB0b1N0cmluZyBmcm9tICcuL3RvU3RyaW5nLmpzJztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9QYXRoKCdhLmIuYycpO1xuICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gKlxuICogXy50b1BhdGgoJ2FbMF0uYi5jJyk7XG4gKiAvLyA9PiBbJ2EnLCAnMCcsICdiJywgJ2MnXVxuICovXG5mdW5jdGlvbiB0b1BhdGgodmFsdWUpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCB0b0tleSk7XG4gIH1cbiAgcmV0dXJuIGlzU3ltYm9sKHZhbHVlKSA/IFt2YWx1ZV0gOiBjb3B5QXJyYXkoc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b1BhdGg7XG4iLCJpbXBvcnQgYmFzZUNsb25lIGZyb20gJy4vX2Jhc2VDbG9uZS5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMS4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAqIEBzZWUgXy5jbG9uZVxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAqXG4gKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICogY29uc29sZS5sb2coZGVlcFswXSA9PT0gb2JqZWN0c1swXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVEZWVwO1xuIiwiaW1wb3J0IGNsb25lIGZyb20gJ2xvZGFzaC9jbG9uZSc7XG5pbXBvcnQgdG9QYXRoIGZyb20gJ2xvZGFzaC90b1BhdGgnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vLyBBc3NlcnRpb25zXG5cbi8qKiBAcHJpdmF0ZSBpcyB0aGUgdmFsdWUgYW4gZW1wdHkgYXJyYXk/ICovXG5leHBvcnQgY29uc3QgaXNFbXB0eUFycmF5ID0gKHZhbHVlPzogYW55KSA9PlxuICBBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDA7XG5cbi8qKiBAcHJpdmF0ZSBpcyB0aGUgZ2l2ZW4gb2JqZWN0IGEgRnVuY3Rpb24/ICovXG5leHBvcnQgY29uc3QgaXNGdW5jdGlvbiA9IChvYmo6IGFueSk6IG9iaiBpcyBGdW5jdGlvbiA9PlxuICB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nO1xuXG4vKiogQHByaXZhdGUgaXMgdGhlIGdpdmVuIG9iamVjdCBhbiBPYmplY3Q/ICovXG5leHBvcnQgY29uc3QgaXNPYmplY3QgPSAob2JqOiBhbnkpOiBvYmogaXMgT2JqZWN0ID0+XG4gIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JztcblxuLyoqIEBwcml2YXRlIGlzIHRoZSBnaXZlbiBvYmplY3QgYW4gaW50ZWdlcj8gKi9cbmV4cG9ydCBjb25zdCBpc0ludGVnZXIgPSAob2JqOiBhbnkpOiBib29sZWFuID0+XG4gIFN0cmluZyhNYXRoLmZsb29yKE51bWJlcihvYmopKSkgPT09IG9iajtcblxuLyoqIEBwcml2YXRlIGlzIHRoZSBnaXZlbiBvYmplY3QgYSBzdHJpbmc/ICovXG5leHBvcnQgY29uc3QgaXNTdHJpbmcgPSAob2JqOiBhbnkpOiBvYmogaXMgc3RyaW5nID0+XG4gIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBTdHJpbmddJztcblxuLyoqIEBwcml2YXRlIGlzIHRoZSBnaXZlbiBvYmplY3QgYSBOYU4/ICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG5leHBvcnQgY29uc3QgaXNOYU4gPSAob2JqOiBhbnkpOiBib29sZWFuID0+IG9iaiAhPT0gb2JqO1xuXG4vKiogQHByaXZhdGUgRG9lcyBhIFJlYWN0IGNvbXBvbmVudCBoYXZlIGV4YWN0bHkgMCBjaGlsZHJlbj8gKi9cbmV4cG9ydCBjb25zdCBpc0VtcHR5Q2hpbGRyZW4gPSAoY2hpbGRyZW46IGFueSk6IGJvb2xlYW4gPT5cbiAgUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xuXG4vKiogQHByaXZhdGUgaXMgdGhlIGdpdmVuIG9iamVjdC92YWx1ZSBhIHByb21pc2U/ICovXG5leHBvcnQgY29uc3QgaXNQcm9taXNlID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBQcm9taXNlTGlrZTxhbnk+ID0+XG4gIGlzT2JqZWN0KHZhbHVlKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnRoZW4pO1xuXG4vKiogQHByaXZhdGUgaXMgdGhlIGdpdmVuIG9iamVjdC92YWx1ZSBhIHR5cGUgb2Ygc3ludGhldGljIGV2ZW50PyAqL1xuZXhwb3J0IGNvbnN0IGlzSW5wdXRFdmVudCA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgUmVhY3QuU3ludGhldGljRXZlbnQ8YW55PiA9PlxuICB2YWx1ZSAmJiBpc09iamVjdCh2YWx1ZSkgJiYgaXNPYmplY3QodmFsdWUudGFyZ2V0KTtcblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgb3IgZG9jdW1lbnQgYm9keSBpcyBub3RcbiAqIHlldCBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7P0RvY3VtZW50fSBkb2MgRGVmYXVsdHMgdG8gY3VycmVudCBkb2N1bWVudC5cbiAqIEByZXR1cm4ge0VsZW1lbnQgfCBudWxsfVxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmJqcy9ibG9iL21hc3Rlci9wYWNrYWdlcy9mYmpzL3NyYy9jb3JlL2RvbS9nZXRBY3RpdmVFbGVtZW50LmpzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KGRvYz86IERvY3VtZW50KTogRWxlbWVudCB8IG51bGwge1xuICBkb2MgPSBkb2MgfHwgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHVuZGVmaW5lZCk7XG4gIGlmICh0eXBlb2YgZG9jID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50IHx8IGRvYy5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvYy5ib2R5O1xuICB9XG59XG5cbi8qKlxuICogRGVlcGx5IGdldCBhIHZhbHVlIGZyb20gYW4gb2JqZWN0IHZpYSBpdHMgcGF0aC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEluKFxuICBvYmo6IGFueSxcbiAga2V5OiBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgZGVmPzogYW55LFxuICBwOiBudW1iZXIgPSAwXG4pIHtcbiAgY29uc3QgcGF0aCA9IHRvUGF0aChrZXkpO1xuICB3aGlsZSAob2JqICYmIHAgPCBwYXRoLmxlbmd0aCkge1xuICAgIG9iaiA9IG9ialtwYXRoW3ArK11dO1xuICB9XG4gIHJldHVybiBvYmogPT09IHVuZGVmaW5lZCA/IGRlZiA6IG9iajtcbn1cblxuLyoqXG4gKiBEZWVwbHkgc2V0IGEgdmFsdWUgZnJvbSBpbiBvYmplY3QgdmlhIGl0J3MgcGF0aC4gSWYgdGhlIHZhbHVlIGF0IGBwYXRoYFxuICogaGFzIGNoYW5nZWQsIHJldHVybiBhIHNoYWxsb3cgY29weSBvZiBvYmogd2l0aCBgdmFsdWVgIHNldCBhdCBgcGF0aGAuXG4gKiBJZiBgdmFsdWVgIGhhcyBub3QgY2hhbmdlZCwgcmV0dXJuIHRoZSBvcmlnaW5hbCBgb2JqYC5cbiAqXG4gKiBFeGlzdGluZyBvYmplY3RzIC8gYXJyYXlzIGFsb25nIGBwYXRoYCBhcmUgYWxzbyBzaGFsbG93IGNvcGllZC4gU2libGluZ1xuICogb2JqZWN0cyBhbG9uZyBwYXRoIHJldGFpbiB0aGUgc2FtZSBpbnRlcm5hbCBqcyByZWZlcmVuY2UuIFNpbmNlIG5ld1xuICogb2JqZWN0cyAvIGFycmF5cyBhcmUgb25seSBjcmVhdGVkIGFsb25nIGBwYXRoYCwgd2UgY2FuIHRlc3QgaWYgYW55dGhpbmdcbiAqIGNoYW5nZWQgaW4gYSBuZXN0ZWQgc3RydWN0dXJlIGJ5IGNvbXBhcmluZyB0aGUgb2JqZWN0J3MgcmVmZXJlbmNlIGluXG4gKiB0aGUgb2xkIGFuZCBuZXcgb2JqZWN0LCBzaW1pbGFyIHRvIGhvdyBydXNzaWFuIGRvbGwgY2FjaGUgaW52YWxpZGF0aW9uXG4gKiB3b3Jrcy5cbiAqXG4gKiBJbiBlYXJsaWVyIHZlcnNpb25zIG9mIHRoaXMgZnVuY3Rpb24sIHdoaWNoIHVzZWQgY2xvbmVEZWVwLCB0aGVyZSB3ZXJlXG4gKiBpc3N1ZXMgd2hlcmVieSBzZXR0aW5ncyBhIG5lc3RlZCB2YWx1ZSB3b3VsZCBtdXRhdGUgdGhlIHBhcmVudFxuICogaW5zdGVhZCBvZiBjcmVhdGluZyBhIG5ldyBvYmplY3QuIGBjbG9uZWAgYXZvaWRzIHRoYXQgYnVnIG1ha2luZyBhXG4gKiBzaGFsbG93IGNvcHkgb2YgdGhlIG9iamVjdHMgYWxvbmcgdGhlIHVwZGF0ZSBwYXRoXG4gKiBzbyBubyBvYmplY3QgaXMgbXV0YXRlZCBpbiBwbGFjZS5cbiAqXG4gKiBCZWZvcmUgY2hhbmdpbmcgdGhpcyBmdW5jdGlvbiwgcGxlYXNlIHJlYWQgdGhyb3VnaCB0aGUgZm9sbG93aW5nXG4gKiBkaXNjdXNzaW9ucy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9kZXZlbG9waXQvbGlua3N0YXRlXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXJlZHBhbG1lci9mb3JtaWsvcHVsbC8xMjNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEluKG9iajogYW55LCBwYXRoOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBhbnkge1xuICBsZXQgcmVzOiBhbnkgPSBjbG9uZShvYmopOyAvLyB0aGlzIGtlZXBzIGluaGVyaXRhbmNlIHdoZW4gb2JqIGlzIGEgY2xhc3NcbiAgbGV0IHJlc1ZhbDogYW55ID0gcmVzO1xuICBsZXQgaSA9IDA7XG4gIGxldCBwYXRoQXJyYXkgPSB0b1BhdGgocGF0aCk7XG5cbiAgZm9yICg7IGkgPCBwYXRoQXJyYXkubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgY29uc3QgY3VycmVudFBhdGg6IHN0cmluZyA9IHBhdGhBcnJheVtpXTtcbiAgICBsZXQgY3VycmVudE9iajogYW55ID0gZ2V0SW4ob2JqLCBwYXRoQXJyYXkuc2xpY2UoMCwgaSArIDEpKTtcblxuICAgIGlmIChjdXJyZW50T2JqICYmIChpc09iamVjdChjdXJyZW50T2JqKSB8fCBBcnJheS5pc0FycmF5KGN1cnJlbnRPYmopKSkge1xuICAgICAgcmVzVmFsID0gcmVzVmFsW2N1cnJlbnRQYXRoXSA9IGNsb25lKGN1cnJlbnRPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBuZXh0UGF0aDogc3RyaW5nID0gcGF0aEFycmF5W2kgKyAxXTtcbiAgICAgIHJlc1ZhbCA9IHJlc1ZhbFtjdXJyZW50UGF0aF0gPVxuICAgICAgICBpc0ludGVnZXIobmV4dFBhdGgpICYmIE51bWJlcihuZXh0UGF0aCkgPj0gMCA/IFtdIDoge307XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0dXJuIG9yaWdpbmFsIG9iamVjdCBpZiBuZXcgdmFsdWUgaXMgdGhlIHNhbWUgYXMgY3VycmVudFxuICBpZiAoKGkgPT09IDAgPyBvYmogOiByZXNWYWwpW3BhdGhBcnJheVtpXV0gPT09IHZhbHVlKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZGVsZXRlIHJlc1ZhbFtwYXRoQXJyYXlbaV1dO1xuICB9IGVsc2Uge1xuICAgIHJlc1ZhbFtwYXRoQXJyYXlbaV1dID0gdmFsdWU7XG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBhcnJheSBoYXMgYSBzaW5nbGUgZWxlbWVudCwgdGhlIGxvb3AgZGlkIG5vdCBydW4uXG4gIC8vIERlbGV0aW5nIG9uIGByZXNWYWxgIGhhZCBubyBlZmZlY3QgaW4gdGhpcyBzY2VuYXJpbywgc28gd2UgZGVsZXRlIG9uIHRoZSByZXN1bHQgaW5zdGVhZC5cbiAgaWYgKGkgPT09IDAgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIGRlbGV0ZSByZXNbcGF0aEFycmF5W2ldXTtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgYSBzZXQgdGhlIHNhbWUgdmFsdWUgZm9yIGFsbCBrZXlzIGFuZCBhcnJheXMgbmVzdGVkIG9iamVjdCwgY2xvbmluZ1xuICogQHBhcmFtIG9iamVjdFxuICogQHBhcmFtIHZhbHVlXG4gKiBAcGFyYW0gdmlzaXRlZFxuICogQHBhcmFtIHJlc3BvbnNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXROZXN0ZWRPYmplY3RWYWx1ZXM8VD4oXG4gIG9iamVjdDogYW55LFxuICB2YWx1ZTogYW55LFxuICB2aXNpdGVkOiBhbnkgPSBuZXcgV2Vha01hcCgpLFxuICByZXNwb25zZTogYW55ID0ge31cbik6IFQge1xuICBmb3IgKGxldCBrIG9mIE9iamVjdC5rZXlzKG9iamVjdCkpIHtcbiAgICBjb25zdCB2YWwgPSBvYmplY3Rba107XG4gICAgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICAgIGlmICghdmlzaXRlZC5nZXQodmFsKSkge1xuICAgICAgICB2aXNpdGVkLnNldCh2YWwsIHRydWUpO1xuICAgICAgICAvLyBJbiBvcmRlciB0byBrZWVwIGFycmF5IHZhbHVlcyBjb25zaXN0ZW50IGZvciBib3RoIGRvdCBwYXRoICBhbmRcbiAgICAgICAgLy8gYnJhY2tldCBzeW50YXgsIHdlIG5lZWQgdG8gY2hlY2sgaWYgdGhpcyBpcyBhbiBhcnJheSBzbyB0aGF0XG4gICAgICAgIC8vIHRoaXMgd2lsbCBvdXRwdXQgIHsgZnJpZW5kczogW3RydWVdIH0gYW5kIG5vdCB7IGZyaWVuZHM6IHsgXCIwXCI6IHRydWUgfSB9XG4gICAgICAgIHJlc3BvbnNlW2tdID0gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fTtcbiAgICAgICAgc2V0TmVzdGVkT2JqZWN0VmFsdWVzKHZhbCwgdmFsdWUsIHZpc2l0ZWQsIHJlc3BvbnNlW2tdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzcG9uc2Vba10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzcG9uc2U7XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGb3JtaWtDb250ZXh0VHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG5leHBvcnQgY29uc3QgRm9ybWlrQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8Rm9ybWlrQ29udGV4dFR5cGU8YW55Pj4oXG4gIHVuZGVmaW5lZCBhcyBhbnlcbik7XG5Gb3JtaWtDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0Zvcm1pa0NvbnRleHQnO1xuXG5leHBvcnQgY29uc3QgRm9ybWlrUHJvdmlkZXIgPSBGb3JtaWtDb250ZXh0LlByb3ZpZGVyO1xuZXhwb3J0IGNvbnN0IEZvcm1pa0NvbnN1bWVyID0gRm9ybWlrQ29udGV4dC5Db25zdW1lcjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUZvcm1pa0NvbnRleHQ8VmFsdWVzPigpIHtcbiAgY29uc3QgZm9ybWlrID0gUmVhY3QudXNlQ29udGV4dDxGb3JtaWtDb250ZXh0VHlwZTxWYWx1ZXM+PihGb3JtaWtDb250ZXh0KTtcblxuICBpbnZhcmlhbnQoXG4gICAgISFmb3JtaWssXG4gICAgYEZvcm1payBjb250ZXh0IGlzIHVuZGVmaW5lZCwgcGxlYXNlIHZlcmlmeSB5b3UgYXJlIGNhbGxpbmcgdXNlRm9ybWlrQ29udGV4dCgpIGFzIGNoaWxkIG9mIGEgPEZvcm1paz4gY29tcG9uZW50LmBcbiAgKTtcblxuICByZXR1cm4gZm9ybWlrO1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGlzRXF1YWwgZnJvbSAncmVhY3QtZmFzdC1jb21wYXJlJztcbmltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnZGVlcG1lcmdlJztcbmltcG9ydCBpc1BsYWluT2JqZWN0IGZyb20gJ2xvZGFzaC9pc1BsYWluT2JqZWN0JztcbmltcG9ydCB7XG4gIEZvcm1pa0NvbmZpZyxcbiAgRm9ybWlrRXJyb3JzLFxuICBGb3JtaWtTdGF0ZSxcbiAgRm9ybWlrVG91Y2hlZCxcbiAgRm9ybWlrVmFsdWVzLFxuICBGb3JtaWtQcm9wcyxcbiAgRmllbGRNZXRhUHJvcHMsXG4gIEZpZWxkSGVscGVyUHJvcHMsXG4gIEZpZWxkSW5wdXRQcm9wcyxcbiAgRm9ybWlrSGVscGVycyxcbiAgRm9ybWlrSGFuZGxlcnMsXG59IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHtcbiAgaXNGdW5jdGlvbixcbiAgaXNTdHJpbmcsXG4gIHNldEluLFxuICBpc0VtcHR5Q2hpbGRyZW4sXG4gIGlzUHJvbWlzZSxcbiAgc2V0TmVzdGVkT2JqZWN0VmFsdWVzLFxuICBnZXRBY3RpdmVFbGVtZW50LFxuICBnZXRJbixcbiAgaXNPYmplY3QsXG59IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgRm9ybWlrUHJvdmlkZXIgfSBmcm9tICcuL0Zvcm1pa0NvbnRleHQnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG50eXBlIEZvcm1pa01lc3NhZ2U8VmFsdWVzPiA9XG4gIHwgeyB0eXBlOiAnU1VCTUlUX0FUVEVNUFQnIH1cbiAgfCB7IHR5cGU6ICdTVUJNSVRfRkFJTFVSRScgfVxuICB8IHsgdHlwZTogJ1NVQk1JVF9TVUNDRVNTJyB9XG4gIHwgeyB0eXBlOiAnU0VUX0lTVkFMSURBVElORyc7IHBheWxvYWQ6IGJvb2xlYW4gfVxuICB8IHsgdHlwZTogJ1NFVF9JU1NVQk1JVFRJTkcnOyBwYXlsb2FkOiBib29sZWFuIH1cbiAgfCB7IHR5cGU6ICdTRVRfVkFMVUVTJzsgcGF5bG9hZDogVmFsdWVzIH1cbiAgfCB7IHR5cGU6ICdTRVRfRklFTERfVkFMVUUnOyBwYXlsb2FkOiB7IGZpZWxkOiBzdHJpbmc7IHZhbHVlPzogYW55IH0gfVxuICB8IHsgdHlwZTogJ1NFVF9GSUVMRF9UT1VDSEVEJzsgcGF5bG9hZDogeyBmaWVsZDogc3RyaW5nOyB2YWx1ZT86IGJvb2xlYW4gfSB9XG4gIHwgeyB0eXBlOiAnU0VUX0ZJRUxEX0VSUk9SJzsgcGF5bG9hZDogeyBmaWVsZDogc3RyaW5nOyB2YWx1ZT86IHN0cmluZyB9IH1cbiAgfCB7IHR5cGU6ICdTRVRfVE9VQ0hFRCc7IHBheWxvYWQ6IEZvcm1pa1RvdWNoZWQ8VmFsdWVzPiB9XG4gIHwgeyB0eXBlOiAnU0VUX0VSUk9SUyc7IHBheWxvYWQ6IEZvcm1pa0Vycm9yczxWYWx1ZXM+IH1cbiAgfCB7IHR5cGU6ICdTRVRfU1RBVFVTJzsgcGF5bG9hZDogYW55IH1cbiAgfCB7XG4gICAgICB0eXBlOiAnU0VUX0ZPUk1JS19TVEFURSc7XG4gICAgICBwYXlsb2FkOiAoczogRm9ybWlrU3RhdGU8VmFsdWVzPikgPT4gRm9ybWlrU3RhdGU8VmFsdWVzPjtcbiAgICB9XG4gIHwge1xuICAgICAgdHlwZTogJ1JFU0VUX0ZPUk0nO1xuICAgICAgcGF5bG9hZDogRm9ybWlrU3RhdGU8VmFsdWVzPjtcbiAgICB9O1xuXG4vLyBTdGF0ZSByZWR1Y2VyXG5mdW5jdGlvbiBmb3JtaWtSZWR1Y2VyPFZhbHVlcz4oXG4gIHN0YXRlOiBGb3JtaWtTdGF0ZTxWYWx1ZXM+LFxuICBtc2c6IEZvcm1pa01lc3NhZ2U8VmFsdWVzPlxuKSB7XG4gIHN3aXRjaCAobXNnLnR5cGUpIHtcbiAgICBjYXNlICdTRVRfVkFMVUVTJzpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB2YWx1ZXM6IG1zZy5wYXlsb2FkIH07XG4gICAgY2FzZSAnU0VUX1RPVUNIRUQnOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHRvdWNoZWQ6IG1zZy5wYXlsb2FkIH07XG4gICAgY2FzZSAnU0VUX0VSUk9SUyc6XG4gICAgICBpZiAoaXNFcXVhbChzdGF0ZS5lcnJvcnMsIG1zZy5wYXlsb2FkKSkge1xuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBlcnJvcnM6IG1zZy5wYXlsb2FkIH07XG4gICAgY2FzZSAnU0VUX1NUQVRVUyc6XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgc3RhdHVzOiBtc2cucGF5bG9hZCB9O1xuICAgIGNhc2UgJ1NFVF9JU1NVQk1JVFRJTkcnOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGlzU3VibWl0dGluZzogbXNnLnBheWxvYWQgfTtcbiAgICBjYXNlICdTRVRfSVNWQUxJREFUSU5HJzpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBpc1ZhbGlkYXRpbmc6IG1zZy5wYXlsb2FkIH07XG4gICAgY2FzZSAnU0VUX0ZJRUxEX1ZBTFVFJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICB2YWx1ZXM6IHNldEluKHN0YXRlLnZhbHVlcywgbXNnLnBheWxvYWQuZmllbGQsIG1zZy5wYXlsb2FkLnZhbHVlKSxcbiAgICAgIH07XG4gICAgY2FzZSAnU0VUX0ZJRUxEX1RPVUNIRUQnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHRvdWNoZWQ6IHNldEluKHN0YXRlLnRvdWNoZWQsIG1zZy5wYXlsb2FkLmZpZWxkLCBtc2cucGF5bG9hZC52YWx1ZSksXG4gICAgICB9O1xuICAgIGNhc2UgJ1NFVF9GSUVMRF9FUlJPUic6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZXJyb3JzOiBzZXRJbihzdGF0ZS5lcnJvcnMsIG1zZy5wYXlsb2FkLmZpZWxkLCBtc2cucGF5bG9hZC52YWx1ZSksXG4gICAgICB9O1xuICAgIGNhc2UgJ1JFU0VUX0ZPUk0nOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIC4uLm1zZy5wYXlsb2FkIH07XG4gICAgY2FzZSAnU0VUX0ZPUk1JS19TVEFURSc6XG4gICAgICByZXR1cm4gbXNnLnBheWxvYWQoc3RhdGUpO1xuICAgIGNhc2UgJ1NVQk1JVF9BVFRFTVBUJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICB0b3VjaGVkOiBzZXROZXN0ZWRPYmplY3RWYWx1ZXM8Rm9ybWlrVG91Y2hlZDxWYWx1ZXM+PihcbiAgICAgICAgICBzdGF0ZS52YWx1ZXMsXG4gICAgICAgICAgdHJ1ZVxuICAgICAgICApLFxuICAgICAgICBpc1N1Ym1pdHRpbmc6IHRydWUsXG4gICAgICAgIHN1Ym1pdENvdW50OiBzdGF0ZS5zdWJtaXRDb3VudCArIDEsXG4gICAgICB9O1xuICAgIGNhc2UgJ1NVQk1JVF9GQUlMVVJFJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBpc1N1Ym1pdHRpbmc6IGZhbHNlLFxuICAgICAgfTtcbiAgICBjYXNlICdTVUJNSVRfU1VDQ0VTUyc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgaXNTdWJtaXR0aW5nOiBmYWxzZSxcbiAgICAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuXG4vLyBJbml0aWFsIGVtcHR5IHN0YXRlcyAvLyBvYmplY3RzXG5jb25zdCBlbXB0eUVycm9yczogRm9ybWlrRXJyb3JzPHVua25vd24+ID0ge307XG5jb25zdCBlbXB0eVRvdWNoZWQ6IEZvcm1pa1RvdWNoZWQ8dW5rbm93bj4gPSB7fTtcblxuLy8gVGhpcyBpcyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG1hcCBvZiBhbGwgcmVnaXN0ZXJlZCBmaWVsZHNcbi8vIGFuZCB0aGVpciB2YWxpZGF0ZSBmdW5jdGlvbnNcbmludGVyZmFjZSBGaWVsZFJlZ2lzdHJ5IHtcbiAgW2ZpZWxkOiBzdHJpbmddOiB7XG4gICAgdmFsaWRhdGU6ICh2YWx1ZTogYW55KSA9PiBzdHJpbmcgfCBQcm9taXNlPHN0cmluZz4gfCB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VGb3JtaWs8VmFsdWVzIGV4dGVuZHMgRm9ybWlrVmFsdWVzID0gRm9ybWlrVmFsdWVzPih7XG4gIHZhbGlkYXRlT25DaGFuZ2UgPSB0cnVlLFxuICB2YWxpZGF0ZU9uQmx1ciA9IHRydWUsXG4gIHZhbGlkYXRlT25Nb3VudCA9IGZhbHNlLFxuICBpc0luaXRpYWxWYWxpZCxcbiAgZW5hYmxlUmVpbml0aWFsaXplID0gZmFsc2UsXG4gIG9uU3VibWl0LFxuICAuLi5yZXN0XG59OiBGb3JtaWtDb25maWc8VmFsdWVzPikge1xuICBjb25zdCBwcm9wcyA9IHtcbiAgICB2YWxpZGF0ZU9uQ2hhbmdlLFxuICAgIHZhbGlkYXRlT25CbHVyLFxuICAgIHZhbGlkYXRlT25Nb3VudCxcbiAgICBvblN1Ym1pdCxcbiAgICAuLi5yZXN0LFxuICB9O1xuICBjb25zdCBpbml0aWFsVmFsdWVzID0gUmVhY3QudXNlUmVmKHByb3BzLmluaXRpYWxWYWx1ZXMpO1xuICBjb25zdCBpbml0aWFsRXJyb3JzID0gUmVhY3QudXNlUmVmKHByb3BzLmluaXRpYWxFcnJvcnMgfHwgZW1wdHlFcnJvcnMpO1xuICBjb25zdCBpbml0aWFsVG91Y2hlZCA9IFJlYWN0LnVzZVJlZihwcm9wcy5pbml0aWFsVG91Y2hlZCB8fCBlbXB0eVRvdWNoZWQpO1xuICBjb25zdCBpbml0aWFsU3RhdHVzID0gUmVhY3QudXNlUmVmKHByb3BzLmluaXRpYWxTdGF0dXMpO1xuICBjb25zdCBpc01vdW50ZWQgPSBSZWFjdC51c2VSZWY8Ym9vbGVhbj4oZmFsc2UpO1xuICBjb25zdCBmaWVsZFJlZ2lzdHJ5ID0gUmVhY3QudXNlUmVmPEZpZWxkUmVnaXN0cnk+KHt9KTtcbiAgaWYgKF9fREVWX18pIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICB0eXBlb2YgaXNJbml0aWFsVmFsaWQgPT09ICd1bmRlZmluZWQnLFxuICAgICAgICAnaXNJbml0aWFsVmFsaWQgaGFzIGJlZW4gZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBGb3JtaWsuIFBsZWFzZSB1c2UgaW5pdGlhbEVycm9ycyBvciB2YWxpZGF0ZU9uTW91bnQgaW5zdGVhZC4nXG4gICAgICApO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgfSwgW10pO1xuICB9XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpc01vdW50ZWQuY3VycmVudCA9IHRydWU7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSBmYWxzZTtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgY29uc3QgW3N0YXRlLCBkaXNwYXRjaF0gPSBSZWFjdC51c2VSZWR1Y2VyPFxuICAgIFJlYWN0LlJlZHVjZXI8Rm9ybWlrU3RhdGU8VmFsdWVzPiwgRm9ybWlrTWVzc2FnZTxWYWx1ZXM+PlxuICA+KGZvcm1pa1JlZHVjZXIsIHtcbiAgICB2YWx1ZXM6IHByb3BzLmluaXRpYWxWYWx1ZXMsXG4gICAgZXJyb3JzOiBwcm9wcy5pbml0aWFsRXJyb3JzIHx8IGVtcHR5RXJyb3JzLFxuICAgIHRvdWNoZWQ6IHByb3BzLmluaXRpYWxUb3VjaGVkIHx8IGVtcHR5VG91Y2hlZCxcbiAgICBzdGF0dXM6IHByb3BzLmluaXRpYWxTdGF0dXMsXG4gICAgaXNTdWJtaXR0aW5nOiBmYWxzZSxcbiAgICBpc1ZhbGlkYXRpbmc6IGZhbHNlLFxuICAgIHN1Ym1pdENvdW50OiAwLFxuICB9KTtcblxuICBjb25zdCBydW5WYWxpZGF0ZUhhbmRsZXIgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAodmFsdWVzOiBWYWx1ZXMsIGZpZWxkPzogc3RyaW5nKTogUHJvbWlzZTxGb3JtaWtFcnJvcnM8VmFsdWVzPj4gPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgbWF5YmVQcm9taXNlZEVycm9ycyA9IChwcm9wcy52YWxpZGF0ZSBhcyBhbnkpKHZhbHVlcywgZmllbGQpO1xuICAgICAgICBpZiAobWF5YmVQcm9taXNlZEVycm9ycyA9PSBudWxsKSB7XG4gICAgICAgICAgLy8gdXNlIGxvb3NlIG51bGwgY2hlY2sgaGVyZSBvbiBwdXJwb3NlXG4gICAgICAgICAgcmVzb2x2ZShlbXB0eUVycm9ycyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlKG1heWJlUHJvbWlzZWRFcnJvcnMpKSB7XG4gICAgICAgICAgKG1heWJlUHJvbWlzZWRFcnJvcnMgYXMgUHJvbWlzZTxhbnk+KS50aGVuKFxuICAgICAgICAgICAgZXJyb3JzID0+IHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShlcnJvcnMgfHwgZW1wdHlFcnJvcnMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFjdHVhbEV4Y2VwdGlvbiA9PiB7XG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgYFdhcm5pbmc6IEFuIHVuaGFuZGxlZCBlcnJvciB3YXMgY2F1Z2h0IGR1cmluZyB2YWxpZGF0aW9uIGluIDxGb3JtaWsgdmFsaWRhdGUgLz5gLFxuICAgICAgICAgICAgICAgICAgYWN0dWFsRXhjZXB0aW9uXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJlamVjdChhY3R1YWxFeGNlcHRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZShtYXliZVByb21pc2VkRXJyb3JzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBbcHJvcHMudmFsaWRhdGVdXG4gICk7XG5cbiAgLyoqXG4gICAqIFJ1biB2YWxpZGF0aW9uIGFnYWluc3QgYSBZdXAgc2NoZW1hIGFuZCBvcHRpb25hbGx5IHJ1biBhIGZ1bmN0aW9uIGlmIHN1Y2Nlc3NmdWxcbiAgICovXG4gIGNvbnN0IHJ1blZhbGlkYXRpb25TY2hlbWEgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAodmFsdWVzOiBWYWx1ZXMsIGZpZWxkPzogc3RyaW5nKTogUHJvbWlzZTxGb3JtaWtFcnJvcnM8VmFsdWVzPj4gPT4ge1xuICAgICAgY29uc3QgdmFsaWRhdGlvblNjaGVtYSA9IHByb3BzLnZhbGlkYXRpb25TY2hlbWE7XG4gICAgICBjb25zdCBzY2hlbWEgPSBpc0Z1bmN0aW9uKHZhbGlkYXRpb25TY2hlbWEpXG4gICAgICAgID8gdmFsaWRhdGlvblNjaGVtYShmaWVsZClcbiAgICAgICAgOiB2YWxpZGF0aW9uU2NoZW1hO1xuICAgICAgY29uc3QgcHJvbWlzZSA9XG4gICAgICAgIGZpZWxkICYmIHNjaGVtYS52YWxpZGF0ZUF0XG4gICAgICAgICAgPyBzY2hlbWEudmFsaWRhdGVBdChmaWVsZCwgdmFsdWVzKVxuICAgICAgICAgIDogdmFsaWRhdGVZdXBTY2hlbWEodmFsdWVzLCBzY2hlbWEpO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgcHJvbWlzZS50aGVuKFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoZW1wdHlFcnJvcnMpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgKGVycjogYW55KSA9PiB7XG4gICAgICAgICAgICAvLyBZdXAgd2lsbCB0aHJvdyBhIHZhbGlkYXRpb24gZXJyb3IgaWYgdmFsaWRhdGlvbiBmYWlscy4gV2UgY2F0Y2ggdGhvc2UgYW5kXG4gICAgICAgICAgICAvLyByZXNvbHZlIHRoZW0gaW50byBGb3JtaWsgZXJyb3JzLiBXZSBjYW4gc25pZmYgaWYgc29tZXRoaW5nIGlzIGEgWXVwIGVycm9yXG4gICAgICAgICAgICAvLyBieSBjaGVja2luZyBlcnJvci5uYW1lLlxuICAgICAgICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZW5zZS95dXAjdmFsaWRhdGlvbmVycm9yZXJyb3JzLXN0cmluZy0tYXJyYXlzdHJpbmctdmFsdWUtYW55LXBhdGgtc3RyaW5nXG4gICAgICAgICAgICBpZiAoZXJyLm5hbWUgPT09ICdWYWxpZGF0aW9uRXJyb3InKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUoeXVwVG9Gb3JtRXJyb3JzKGVycikpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gV2UgdGhyb3cgYW55IG90aGVyIGVycm9yc1xuICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgIGBXYXJuaW5nOiBBbiB1bmhhbmRsZWQgZXJyb3Igd2FzIGNhdWdodCBkdXJpbmcgdmFsaWRhdGlvbiBpbiA8Rm9ybWlrIHZhbGlkYXRpb25TY2hlbWEgLz5gLFxuICAgICAgICAgICAgICAgICAgZXJyXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgW3Byb3BzLnZhbGlkYXRpb25TY2hlbWFdXG4gICk7XG5cbiAgY29uc3QgcnVuU2luZ2xlRmllbGRMZXZlbFZhbGlkYXRpb24gPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoZmllbGQ6IHN0cmluZywgdmFsdWU6IHZvaWQgfCBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT5cbiAgICAgICAgcmVzb2x2ZShmaWVsZFJlZ2lzdHJ5LmN1cnJlbnRbZmllbGRdLnZhbGlkYXRlKHZhbHVlKSBhcyBzdHJpbmcpXG4gICAgICApO1xuICAgIH0sXG4gICAgW11cbiAgKTtcblxuICBjb25zdCBydW5GaWVsZExldmVsVmFsaWRhdGlvbnMgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAodmFsdWVzOiBWYWx1ZXMpOiBQcm9taXNlPEZvcm1pa0Vycm9yczxWYWx1ZXM+PiA9PiB7XG4gICAgICBjb25zdCBmaWVsZEtleXNXaXRoVmFsaWRhdGlvbjogc3RyaW5nW10gPSBPYmplY3Qua2V5cyhcbiAgICAgICAgZmllbGRSZWdpc3RyeS5jdXJyZW50XG4gICAgICApLmZpbHRlcihmID0+IGlzRnVuY3Rpb24oZmllbGRSZWdpc3RyeS5jdXJyZW50W2ZdLnZhbGlkYXRlKSk7XG5cbiAgICAgIC8vIENvbnN0cnVjdCBhbiBhcnJheSB3aXRoIGFsbCBvZiB0aGUgZmllbGQgdmFsaWRhdGlvbiBmdW5jdGlvbnNcbiAgICAgIGNvbnN0IGZpZWxkVmFsaWRhdGlvbnM6IFByb21pc2U8c3RyaW5nPltdID1cbiAgICAgICAgZmllbGRLZXlzV2l0aFZhbGlkYXRpb24ubGVuZ3RoID4gMFxuICAgICAgICAgID8gZmllbGRLZXlzV2l0aFZhbGlkYXRpb24ubWFwKGYgPT5cbiAgICAgICAgICAgICAgcnVuU2luZ2xlRmllbGRMZXZlbFZhbGlkYXRpb24oZiwgZ2V0SW4odmFsdWVzLCBmKSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IFtQcm9taXNlLnJlc29sdmUoJ0RPX05PVF9ERUxFVEVfWU9VX1dJTExfQkVfRklSRUQnKV07IC8vIHVzZSBzcGVjaWFsIGNhc2UgOylcblxuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGZpZWxkVmFsaWRhdGlvbnMpLnRoZW4oKGZpZWxkRXJyb3JzTGlzdDogc3RyaW5nW10pID0+XG4gICAgICAgIGZpZWxkRXJyb3JzTGlzdC5yZWR1Y2UoKHByZXYsIGN1cnIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKGN1cnIgPT09ICdET19OT1RfREVMRVRFX1lPVV9XSUxMX0JFX0ZJUkVEJykge1xuICAgICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjdXJyKSB7XG4gICAgICAgICAgICBwcmV2ID0gc2V0SW4ocHJldiwgZmllbGRLZXlzV2l0aFZhbGlkYXRpb25baW5kZXhdLCBjdXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgIH0sIHt9KVxuICAgICAgKTtcbiAgICB9LFxuICAgIFtydW5TaW5nbGVGaWVsZExldmVsVmFsaWRhdGlvbl1cbiAgKTtcblxuICAvLyBSdW4gYWxsIHZhbGlkYXRpb25zIGFuZCByZXR1cm4gdGhlIHJlc3VsdFxuICBjb25zdCBydW5BbGxWYWxpZGF0aW9ucyA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgICh2YWx1ZXM6IFZhbHVlcykgPT4ge1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtcbiAgICAgICAgcnVuRmllbGRMZXZlbFZhbGlkYXRpb25zKHZhbHVlcyksXG4gICAgICAgIHByb3BzLnZhbGlkYXRpb25TY2hlbWEgPyBydW5WYWxpZGF0aW9uU2NoZW1hKHZhbHVlcykgOiB7fSxcbiAgICAgICAgcHJvcHMudmFsaWRhdGUgPyBydW5WYWxpZGF0ZUhhbmRsZXIodmFsdWVzKSA6IHt9LFxuICAgICAgXSkudGhlbigoW2ZpZWxkRXJyb3JzLCBzY2hlbWFFcnJvcnMsIHZhbGlkYXRlRXJyb3JzXSkgPT4ge1xuICAgICAgICBjb25zdCBjb21iaW5lZEVycm9ycyA9IGRlZXBtZXJnZS5hbGw8Rm9ybWlrRXJyb3JzPFZhbHVlcz4+KFxuICAgICAgICAgIFtmaWVsZEVycm9ycywgc2NoZW1hRXJyb3JzLCB2YWxpZGF0ZUVycm9yc10sXG4gICAgICAgICAgeyBhcnJheU1lcmdlIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkRXJyb3JzO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBbXG4gICAgICBwcm9wcy52YWxpZGF0ZSxcbiAgICAgIHByb3BzLnZhbGlkYXRpb25TY2hlbWEsXG4gICAgICBydW5GaWVsZExldmVsVmFsaWRhdGlvbnMsXG4gICAgICBydW5WYWxpZGF0ZUhhbmRsZXIsXG4gICAgICBydW5WYWxpZGF0aW9uU2NoZW1hLFxuICAgIF1cbiAgKTtcblxuICAvLyBSdW4gYWxsIHZhbGlkYXRpb25zIG1ldGhvZHMgYW5kIHVwZGF0ZSBzdGF0ZSBhY2NvcmRpbmdseVxuICBjb25zdCB2YWxpZGF0ZUZvcm1XaXRoSGlnaFByaW9yaXR5ID0gdXNlRXZlbnRDYWxsYmFjayhcbiAgICAodmFsdWVzOiBWYWx1ZXMgPSBzdGF0ZS52YWx1ZXMpID0+IHtcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9JU1ZBTElEQVRJTkcnLCBwYXlsb2FkOiB0cnVlIH0pO1xuICAgICAgcmV0dXJuIHJ1bkFsbFZhbGlkYXRpb25zKHZhbHVlcykudGhlbihjb21iaW5lZEVycm9ycyA9PiB7XG4gICAgICAgIGlmICghIWlzTW91bnRlZC5jdXJyZW50KSB7XG4gICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0lTVkFMSURBVElORycsIHBheWxvYWQ6IGZhbHNlIH0pO1xuICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9FUlJPUlMnLCBwYXlsb2FkOiBjb21iaW5lZEVycm9ycyB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29tYmluZWRFcnJvcnM7XG4gICAgICB9KTtcbiAgICB9XG4gICk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoXG4gICAgICB2YWxpZGF0ZU9uTW91bnQgJiZcbiAgICAgIGlzTW91bnRlZC5jdXJyZW50ID09PSB0cnVlICYmXG4gICAgICBpc0VxdWFsKGluaXRpYWxWYWx1ZXMuY3VycmVudCwgcHJvcHMuaW5pdGlhbFZhbHVlcylcbiAgICApIHtcbiAgICAgIHZhbGlkYXRlRm9ybVdpdGhIaWdoUHJpb3JpdHkoaW5pdGlhbFZhbHVlcy5jdXJyZW50KTtcbiAgICB9XG4gIH0sIFt2YWxpZGF0ZU9uTW91bnQsIHZhbGlkYXRlRm9ybVdpdGhIaWdoUHJpb3JpdHldKTtcblxuICBjb25zdCByZXNldEZvcm0gPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAobmV4dFN0YXRlPzogUGFydGlhbDxGb3JtaWtTdGF0ZTxWYWx1ZXM+PikgPT4ge1xuICAgICAgY29uc3QgdmFsdWVzID1cbiAgICAgICAgbmV4dFN0YXRlICYmIG5leHRTdGF0ZS52YWx1ZXNcbiAgICAgICAgICA/IG5leHRTdGF0ZS52YWx1ZXNcbiAgICAgICAgICA6IGluaXRpYWxWYWx1ZXMuY3VycmVudDtcbiAgICAgIGNvbnN0IGVycm9ycyA9XG4gICAgICAgIG5leHRTdGF0ZSAmJiBuZXh0U3RhdGUuZXJyb3JzXG4gICAgICAgICAgPyBuZXh0U3RhdGUuZXJyb3JzXG4gICAgICAgICAgOiBpbml0aWFsRXJyb3JzLmN1cnJlbnRcbiAgICAgICAgICA/IGluaXRpYWxFcnJvcnMuY3VycmVudFxuICAgICAgICAgIDogcHJvcHMuaW5pdGlhbEVycm9ycyB8fCB7fTtcbiAgICAgIGNvbnN0IHRvdWNoZWQgPVxuICAgICAgICBuZXh0U3RhdGUgJiYgbmV4dFN0YXRlLnRvdWNoZWRcbiAgICAgICAgICA/IG5leHRTdGF0ZS50b3VjaGVkXG4gICAgICAgICAgOiBpbml0aWFsVG91Y2hlZC5jdXJyZW50XG4gICAgICAgICAgPyBpbml0aWFsVG91Y2hlZC5jdXJyZW50XG4gICAgICAgICAgOiBwcm9wcy5pbml0aWFsVG91Y2hlZCB8fCB7fTtcbiAgICAgIGNvbnN0IHN0YXR1cyA9XG4gICAgICAgIG5leHRTdGF0ZSAmJiBuZXh0U3RhdGUuc3RhdHVzXG4gICAgICAgICAgPyBuZXh0U3RhdGUuc3RhdHVzXG4gICAgICAgICAgOiBpbml0aWFsU3RhdHVzLmN1cnJlbnRcbiAgICAgICAgICA/IGluaXRpYWxTdGF0dXMuY3VycmVudFxuICAgICAgICAgIDogcHJvcHMuaW5pdGlhbFN0YXR1cztcbiAgICAgIGluaXRpYWxWYWx1ZXMuY3VycmVudCA9IHZhbHVlcztcbiAgICAgIGluaXRpYWxFcnJvcnMuY3VycmVudCA9IGVycm9ycztcbiAgICAgIGluaXRpYWxUb3VjaGVkLmN1cnJlbnQgPSB0b3VjaGVkO1xuICAgICAgaW5pdGlhbFN0YXR1cy5jdXJyZW50ID0gc3RhdHVzO1xuXG4gICAgICBjb25zdCBkaXNwYXRjaEZuID0gKCkgPT4ge1xuICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgdHlwZTogJ1JFU0VUX0ZPUk0nLFxuICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgIGlzU3VibWl0dGluZzogISFuZXh0U3RhdGUgJiYgISFuZXh0U3RhdGUuaXNTdWJtaXR0aW5nLFxuICAgICAgICAgICAgZXJyb3JzLFxuICAgICAgICAgICAgdG91Y2hlZCxcbiAgICAgICAgICAgIHN0YXR1cyxcbiAgICAgICAgICAgIHZhbHVlcyxcbiAgICAgICAgICAgIGlzVmFsaWRhdGluZzogISFuZXh0U3RhdGUgJiYgISFuZXh0U3RhdGUuaXNWYWxpZGF0aW5nLFxuICAgICAgICAgICAgc3VibWl0Q291bnQ6XG4gICAgICAgICAgICAgICEhbmV4dFN0YXRlICYmXG4gICAgICAgICAgICAgICEhbmV4dFN0YXRlLnN1Ym1pdENvdW50ICYmXG4gICAgICAgICAgICAgIHR5cGVvZiBuZXh0U3RhdGUuc3VibWl0Q291bnQgPT09ICdudW1iZXInXG4gICAgICAgICAgICAgICAgPyBuZXh0U3RhdGUuc3VibWl0Q291bnRcbiAgICAgICAgICAgICAgICA6IDAsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBpZiAocHJvcHMub25SZXNldCkge1xuICAgICAgICBjb25zdCBtYXliZVByb21pc2VkT25SZXNldCA9IChwcm9wcy5vblJlc2V0IGFzIGFueSkoXG4gICAgICAgICAgc3RhdGUudmFsdWVzLFxuICAgICAgICAgIGltcGVyYXRpdmVNZXRob2RzXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKGlzUHJvbWlzZShtYXliZVByb21pc2VkT25SZXNldCkpIHtcbiAgICAgICAgICAobWF5YmVQcm9taXNlZE9uUmVzZXQgYXMgUHJvbWlzZTxhbnk+KS50aGVuKGRpc3BhdGNoRm4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRpc3BhdGNoRm4oKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlzcGF0Y2hGbigpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW3Byb3BzLmluaXRpYWxFcnJvcnMsIHByb3BzLmluaXRpYWxTdGF0dXMsIHByb3BzLmluaXRpYWxUb3VjaGVkXVxuICApO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKFxuICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPT09IHRydWUgJiZcbiAgICAgICFpc0VxdWFsKGluaXRpYWxWYWx1ZXMuY3VycmVudCwgcHJvcHMuaW5pdGlhbFZhbHVlcylcbiAgICApIHtcbiAgICAgIGlmIChlbmFibGVSZWluaXRpYWxpemUpIHtcbiAgICAgICAgaW5pdGlhbFZhbHVlcy5jdXJyZW50ID0gcHJvcHMuaW5pdGlhbFZhbHVlcztcbiAgICAgICAgcmVzZXRGb3JtKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWxpZGF0ZU9uTW91bnQpIHtcbiAgICAgICAgdmFsaWRhdGVGb3JtV2l0aEhpZ2hQcmlvcml0eShpbml0aWFsVmFsdWVzLmN1cnJlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW1xuICAgIGVuYWJsZVJlaW5pdGlhbGl6ZSxcbiAgICBwcm9wcy5pbml0aWFsVmFsdWVzLFxuICAgIHJlc2V0Rm9ybSxcbiAgICB2YWxpZGF0ZU9uTW91bnQsXG4gICAgdmFsaWRhdGVGb3JtV2l0aEhpZ2hQcmlvcml0eSxcbiAgXSk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoXG4gICAgICBlbmFibGVSZWluaXRpYWxpemUgJiZcbiAgICAgIGlzTW91bnRlZC5jdXJyZW50ID09PSB0cnVlICYmXG4gICAgICAhaXNFcXVhbChpbml0aWFsRXJyb3JzLmN1cnJlbnQsIHByb3BzLmluaXRpYWxFcnJvcnMpXG4gICAgKSB7XG4gICAgICBpbml0aWFsRXJyb3JzLmN1cnJlbnQgPSBwcm9wcy5pbml0aWFsRXJyb3JzIHx8IGVtcHR5RXJyb3JzO1xuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnU0VUX0VSUk9SUycsXG4gICAgICAgIHBheWxvYWQ6IHByb3BzLmluaXRpYWxFcnJvcnMgfHwgZW1wdHlFcnJvcnMsXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtlbmFibGVSZWluaXRpYWxpemUsIHByb3BzLmluaXRpYWxFcnJvcnNdKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChcbiAgICAgIGVuYWJsZVJlaW5pdGlhbGl6ZSAmJlxuICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPT09IHRydWUgJiZcbiAgICAgICFpc0VxdWFsKGluaXRpYWxUb3VjaGVkLmN1cnJlbnQsIHByb3BzLmluaXRpYWxUb3VjaGVkKVxuICAgICkge1xuICAgICAgaW5pdGlhbFRvdWNoZWQuY3VycmVudCA9IHByb3BzLmluaXRpYWxUb3VjaGVkIHx8IGVtcHR5VG91Y2hlZDtcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1NFVF9UT1VDSEVEJyxcbiAgICAgICAgcGF5bG9hZDogcHJvcHMuaW5pdGlhbFRvdWNoZWQgfHwgZW1wdHlUb3VjaGVkLFxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbZW5hYmxlUmVpbml0aWFsaXplLCBwcm9wcy5pbml0aWFsVG91Y2hlZF0pO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKFxuICAgICAgZW5hYmxlUmVpbml0aWFsaXplICYmXG4gICAgICBpc01vdW50ZWQuY3VycmVudCA9PT0gdHJ1ZSAmJlxuICAgICAgIWlzRXF1YWwoaW5pdGlhbFN0YXR1cy5jdXJyZW50LCBwcm9wcy5pbml0aWFsU3RhdHVzKVxuICAgICkge1xuICAgICAgaW5pdGlhbFN0YXR1cy5jdXJyZW50ID0gcHJvcHMuaW5pdGlhbFN0YXR1cztcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1NFVF9TVEFUVVMnLFxuICAgICAgICBwYXlsb2FkOiBwcm9wcy5pbml0aWFsU3RhdHVzLFxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbZW5hYmxlUmVpbml0aWFsaXplLCBwcm9wcy5pbml0aWFsU3RhdHVzLCBwcm9wcy5pbml0aWFsVG91Y2hlZF0pO1xuXG4gIGNvbnN0IHZhbGlkYXRlRmllbGQgPSB1c2VFdmVudENhbGxiYWNrKChuYW1lOiBzdHJpbmcpID0+IHtcbiAgICAvLyBUaGlzIHdpbGwgZWZmaWNpZW50bHkgdmFsaWRhdGUgYSBzaW5nbGUgZmllbGQgYnkgYXZvaWRpbmcgc3RhdGVcbiAgICAvLyBjaGFuZ2VzIGlmIHRoZSB2YWxpZGF0aW9uIGZ1bmN0aW9uIGlzIHN5bmNocm9ub3VzLiBJdCdzIGRpZmZlcmVudCBmcm9tXG4gICAgLy8gd2hhdCBpcyBjYWxsZWQgd2hlbiB1c2luZyB2YWxpZGF0ZUZvcm0uXG5cbiAgICBpZiAoXG4gICAgICBmaWVsZFJlZ2lzdHJ5LmN1cnJlbnRbbmFtZV0gJiZcbiAgICAgIGlzRnVuY3Rpb24oZmllbGRSZWdpc3RyeS5jdXJyZW50W25hbWVdLnZhbGlkYXRlKVxuICAgICkge1xuICAgICAgY29uc3QgdmFsdWUgPSBnZXRJbihzdGF0ZS52YWx1ZXMsIG5hbWUpO1xuICAgICAgY29uc3QgbWF5YmVQcm9taXNlID0gZmllbGRSZWdpc3RyeS5jdXJyZW50W25hbWVdLnZhbGlkYXRlKHZhbHVlKTtcbiAgICAgIGlmIChpc1Byb21pc2UobWF5YmVQcm9taXNlKSkge1xuICAgICAgICAvLyBPbmx5IGZsaXAgaXNWYWxpZGF0aW5nIGlmIHRoZSBmdW5jdGlvbiBpcyBhc3luYy5cbiAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0lTVkFMSURBVElORycsIHBheWxvYWQ6IHRydWUgfSk7XG4gICAgICAgIHJldHVybiBtYXliZVByb21pc2VcbiAgICAgICAgICAudGhlbigoeDogYW55KSA9PiB4KVxuICAgICAgICAgIC50aGVuKChlcnJvcjogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgICAgIHR5cGU6ICdTRVRfRklFTERfRVJST1InLFxuICAgICAgICAgICAgICBwYXlsb2FkOiB7IGZpZWxkOiBuYW1lLCB2YWx1ZTogZXJyb3IgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0lTVkFMSURBVElORycsIHBheWxvYWQ6IGZhbHNlIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6ICdTRVRfRklFTERfRVJST1InLFxuICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgIGZpZWxkOiBuYW1lLFxuICAgICAgICAgICAgdmFsdWU6IG1heWJlUHJvbWlzZSBhcyBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobWF5YmVQcm9taXNlIGFzIHN0cmluZyB8IHVuZGVmaW5lZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwcm9wcy52YWxpZGF0aW9uU2NoZW1hKSB7XG4gICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfSVNWQUxJREFUSU5HJywgcGF5bG9hZDogdHJ1ZSB9KTtcbiAgICAgIHJldHVybiBydW5WYWxpZGF0aW9uU2NoZW1hKHN0YXRlLnZhbHVlcywgbmFtZSlcbiAgICAgICAgLnRoZW4oKHg6IGFueSkgPT4geClcbiAgICAgICAgLnRoZW4oKGVycm9yOiBhbnkpID0+IHtcbiAgICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgICB0eXBlOiAnU0VUX0ZJRUxEX0VSUk9SJyxcbiAgICAgICAgICAgIHBheWxvYWQ6IHsgZmllbGQ6IG5hbWUsIHZhbHVlOiBlcnJvcltuYW1lXSB9LFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9JU1ZBTElEQVRJTkcnLCBwYXlsb2FkOiBmYWxzZSB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9KTtcblxuICBjb25zdCByZWdpc3RlckZpZWxkID0gUmVhY3QudXNlQ2FsbGJhY2soKG5hbWU6IHN0cmluZywgeyB2YWxpZGF0ZSB9OiBhbnkpID0+IHtcbiAgICBmaWVsZFJlZ2lzdHJ5LmN1cnJlbnRbbmFtZV0gPSB7XG4gICAgICB2YWxpZGF0ZSxcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgY29uc3QgdW5yZWdpc3RlckZpZWxkID0gUmVhY3QudXNlQ2FsbGJhY2soKG5hbWU6IHN0cmluZykgPT4ge1xuICAgIGRlbGV0ZSBmaWVsZFJlZ2lzdHJ5LmN1cnJlbnRbbmFtZV07XG4gIH0sIFtdKTtcblxuICBjb25zdCBzZXRUb3VjaGVkID0gdXNlRXZlbnRDYWxsYmFjayhcbiAgICAodG91Y2hlZDogRm9ybWlrVG91Y2hlZDxWYWx1ZXM+LCBzaG91bGRWYWxpZGF0ZT86IGJvb2xlYW4pID0+IHtcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9UT1VDSEVEJywgcGF5bG9hZDogdG91Y2hlZCB9KTtcbiAgICAgIGNvbnN0IHdpbGxWYWxpZGF0ZSA9XG4gICAgICAgIHNob3VsZFZhbGlkYXRlID09PSB1bmRlZmluZWQgPyB2YWxpZGF0ZU9uQmx1ciA6IHNob3VsZFZhbGlkYXRlO1xuICAgICAgcmV0dXJuIHdpbGxWYWxpZGF0ZVxuICAgICAgICA/IHZhbGlkYXRlRm9ybVdpdGhIaWdoUHJpb3JpdHkoc3RhdGUudmFsdWVzKVxuICAgICAgICA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgKTtcblxuICBjb25zdCBzZXRFcnJvcnMgPSBSZWFjdC51c2VDYWxsYmFjaygoZXJyb3JzOiBGb3JtaWtFcnJvcnM8VmFsdWVzPikgPT4ge1xuICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9FUlJPUlMnLCBwYXlsb2FkOiBlcnJvcnMgfSk7XG4gIH0sIFtdKTtcblxuICBjb25zdCBzZXRWYWx1ZXMgPSB1c2VFdmVudENhbGxiYWNrKFxuICAgICh2YWx1ZXM6IFJlYWN0LlNldFN0YXRlQWN0aW9uPFZhbHVlcz4sIHNob3VsZFZhbGlkYXRlPzogYm9vbGVhbikgPT4ge1xuICAgICAgY29uc3QgcmVzb2x2ZWRWYWx1ZXMgPSBpc0Z1bmN0aW9uKHZhbHVlcykgPyB2YWx1ZXMoc3RhdGUudmFsdWVzKSA6IHZhbHVlcztcblxuICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX1ZBTFVFUycsIHBheWxvYWQ6IHJlc29sdmVkVmFsdWVzIH0pO1xuICAgICAgY29uc3Qgd2lsbFZhbGlkYXRlID1cbiAgICAgICAgc2hvdWxkVmFsaWRhdGUgPT09IHVuZGVmaW5lZCA/IHZhbGlkYXRlT25DaGFuZ2UgOiBzaG91bGRWYWxpZGF0ZTtcbiAgICAgIHJldHVybiB3aWxsVmFsaWRhdGVcbiAgICAgICAgPyB2YWxpZGF0ZUZvcm1XaXRoSGlnaFByaW9yaXR5KHJlc29sdmVkVmFsdWVzKVxuICAgICAgICA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgKTtcblxuICBjb25zdCBzZXRGaWVsZEVycm9yID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKGZpZWxkOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQpID0+IHtcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1NFVF9GSUVMRF9FUlJPUicsXG4gICAgICAgIHBheWxvYWQ6IHsgZmllbGQsIHZhbHVlIH0sXG4gICAgICB9KTtcbiAgICB9LFxuICAgIFtdXG4gICk7XG5cbiAgY29uc3Qgc2V0RmllbGRWYWx1ZSA9IHVzZUV2ZW50Q2FsbGJhY2soXG4gICAgKGZpZWxkOiBzdHJpbmcsIHZhbHVlOiBhbnksIHNob3VsZFZhbGlkYXRlPzogYm9vbGVhbikgPT4ge1xuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnU0VUX0ZJRUxEX1ZBTFVFJyxcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgIGZpZWxkLFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBjb25zdCB3aWxsVmFsaWRhdGUgPVxuICAgICAgICBzaG91bGRWYWxpZGF0ZSA9PT0gdW5kZWZpbmVkID8gdmFsaWRhdGVPbkNoYW5nZSA6IHNob3VsZFZhbGlkYXRlO1xuICAgICAgcmV0dXJuIHdpbGxWYWxpZGF0ZVxuICAgICAgICA/IHZhbGlkYXRlRm9ybVdpdGhIaWdoUHJpb3JpdHkoc2V0SW4oc3RhdGUudmFsdWVzLCBmaWVsZCwgdmFsdWUpKVxuICAgICAgICA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgKTtcblxuICBjb25zdCBleGVjdXRlQ2hhbmdlID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKGV2ZW50T3JUZXh0VmFsdWU6IHN0cmluZyB8IFJlYWN0LkNoYW5nZUV2ZW50PGFueT4sIG1heWJlUGF0aD86IHN0cmluZykgPT4ge1xuICAgICAgLy8gQnkgZGVmYXVsdCwgYXNzdW1lIHRoYXQgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIGEgc3RyaW5nLiBUaGlzIGFsbG93cyB1cyB0byB1c2VcbiAgICAgIC8vIGhhbmRsZUNoYW5nZSB3aXRoIFJlYWN0IE5hdGl2ZSBhbmQgUmVhY3QgTmF0aXZlIFdlYidzIG9uQ2hhbmdlVGV4dCBwcm9wIHdoaWNoXG4gICAgICAvLyBwcm92aWRlcyBqdXN0IHRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQuXG4gICAgICBsZXQgZmllbGQgPSBtYXliZVBhdGg7XG4gICAgICBsZXQgdmFsID0gZXZlbnRPclRleHRWYWx1ZTtcbiAgICAgIGxldCBwYXJzZWQ7XG4gICAgICAvLyBJZiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgbm90IGEgc3RyaW5nIHRob3VnaCwgaXQgaGFzIHRvIGJlIGEgc3ludGhldGljIFJlYWN0IEV2ZW50IChvciBhIGZha2Ugb25lKSxcbiAgICAgIC8vIHNvIHdlIGhhbmRsZSBsaWtlIHdlIHdvdWxkIGEgbm9ybWFsIEhUTUwgY2hhbmdlIGV2ZW50LlxuICAgICAgaWYgKCFpc1N0cmluZyhldmVudE9yVGV4dFZhbHVlKSkge1xuICAgICAgICAvLyBJZiB3ZSBjYW4sIHBlcnNpc3QgdGhlIGV2ZW50XG4gICAgICAgIC8vIEBzZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2V2ZW50cy5odG1sI2V2ZW50LXBvb2xpbmdcbiAgICAgICAgaWYgKChldmVudE9yVGV4dFZhbHVlIGFzIGFueSkucGVyc2lzdCkge1xuICAgICAgICAgIChldmVudE9yVGV4dFZhbHVlIGFzIFJlYWN0LkNoYW5nZUV2ZW50PGFueT4pLnBlcnNpc3QoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0YXJnZXQgPSBldmVudE9yVGV4dFZhbHVlLnRhcmdldFxuICAgICAgICAgID8gKGV2ZW50T3JUZXh0VmFsdWUgYXMgUmVhY3QuQ2hhbmdlRXZlbnQ8YW55PikudGFyZ2V0XG4gICAgICAgICAgOiAoZXZlbnRPclRleHRWYWx1ZSBhcyBSZWFjdC5DaGFuZ2VFdmVudDxhbnk+KS5jdXJyZW50VGFyZ2V0O1xuXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgaWQsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgY2hlY2tlZCxcbiAgICAgICAgICBvdXRlckhUTUwsXG4gICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICBtdWx0aXBsZSxcbiAgICAgICAgfSA9IHRhcmdldDtcblxuICAgICAgICBmaWVsZCA9IG1heWJlUGF0aCA/IG1heWJlUGF0aCA6IG5hbWUgPyBuYW1lIDogaWQ7XG4gICAgICAgIGlmICghZmllbGQgJiYgX19ERVZfXykge1xuICAgICAgICAgIHdhcm5BYm91dE1pc3NpbmdJZGVudGlmaWVyKHtcbiAgICAgICAgICAgIGh0bWxDb250ZW50OiBvdXRlckhUTUwsXG4gICAgICAgICAgICBkb2N1bWVudGF0aW9uQW5jaG9yTGluazogJ2hhbmRsZWNoYW5nZS1lLXJlYWN0Y2hhbmdlZXZlbnRhbnktLXZvaWQnLFxuICAgICAgICAgICAgaGFuZGxlck5hbWU6ICdoYW5kbGVDaGFuZ2UnLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZhbCA9IC9udW1iZXJ8cmFuZ2UvLnRlc3QodHlwZSlcbiAgICAgICAgICA/ICgocGFyc2VkID0gcGFyc2VGbG9hdCh2YWx1ZSkpLCBpc05hTihwYXJzZWQpID8gJycgOiBwYXJzZWQpXG4gICAgICAgICAgOiAvY2hlY2tib3gvLnRlc3QodHlwZSkgLy8gY2hlY2tib3hlc1xuICAgICAgICAgID8gZ2V0VmFsdWVGb3JDaGVja2JveChnZXRJbihzdGF0ZS52YWx1ZXMsIGZpZWxkISksIGNoZWNrZWQsIHZhbHVlKVxuICAgICAgICAgIDogb3B0aW9ucyAmJiBtdWx0aXBsZSAvLyA8c2VsZWN0IG11bHRpcGxlPlxuICAgICAgICAgID8gZ2V0U2VsZWN0ZWRWYWx1ZXMob3B0aW9ucylcbiAgICAgICAgICA6IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgLy8gU2V0IGZvcm0gZmllbGRzIGJ5IG5hbWVcbiAgICAgICAgc2V0RmllbGRWYWx1ZShmaWVsZCwgdmFsKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtzZXRGaWVsZFZhbHVlLCBzdGF0ZS52YWx1ZXNdXG4gICk7XG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gdXNlRXZlbnRDYWxsYmFjazxGb3JtaWtIYW5kbGVyc1snaGFuZGxlQ2hhbmdlJ10+KFxuICAgIChcbiAgICAgIGV2ZW50T3JQYXRoOiBzdHJpbmcgfCBSZWFjdC5DaGFuZ2VFdmVudDxhbnk+XG4gICAgKTogdm9pZCB8ICgoZXZlbnRPclRleHRWYWx1ZTogc3RyaW5nIHwgUmVhY3QuQ2hhbmdlRXZlbnQ8YW55PikgPT4gdm9pZCkgPT4ge1xuICAgICAgaWYgKGlzU3RyaW5nKGV2ZW50T3JQYXRoKSkge1xuICAgICAgICByZXR1cm4gZXZlbnQgPT4gZXhlY3V0ZUNoYW5nZShldmVudCwgZXZlbnRPclBhdGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhlY3V0ZUNoYW5nZShldmVudE9yUGF0aCk7XG4gICAgICB9XG4gICAgfVxuICApO1xuXG4gIGNvbnN0IHNldEZpZWxkVG91Y2hlZCA9IHVzZUV2ZW50Q2FsbGJhY2soXG4gICAgKGZpZWxkOiBzdHJpbmcsIHRvdWNoZWQ6IGJvb2xlYW4gPSB0cnVlLCBzaG91bGRWYWxpZGF0ZT86IGJvb2xlYW4pID0+IHtcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1NFVF9GSUVMRF9UT1VDSEVEJyxcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgIGZpZWxkLFxuICAgICAgICAgIHZhbHVlOiB0b3VjaGVkLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBjb25zdCB3aWxsVmFsaWRhdGUgPVxuICAgICAgICBzaG91bGRWYWxpZGF0ZSA9PT0gdW5kZWZpbmVkID8gdmFsaWRhdGVPbkJsdXIgOiBzaG91bGRWYWxpZGF0ZTtcbiAgICAgIHJldHVybiB3aWxsVmFsaWRhdGVcbiAgICAgICAgPyB2YWxpZGF0ZUZvcm1XaXRoSGlnaFByaW9yaXR5KHN0YXRlLnZhbHVlcylcbiAgICAgICAgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICk7XG5cbiAgY29uc3QgZXhlY3V0ZUJsdXIgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoZTogYW55LCBwYXRoPzogc3RyaW5nKSA9PiB7XG4gICAgICBpZiAoZS5wZXJzaXN0KSB7XG4gICAgICAgIGUucGVyc2lzdCgpO1xuICAgICAgfVxuICAgICAgY29uc3QgeyBuYW1lLCBpZCwgb3V0ZXJIVE1MIH0gPSBlLnRhcmdldDtcbiAgICAgIGNvbnN0IGZpZWxkID0gcGF0aCA/IHBhdGggOiBuYW1lID8gbmFtZSA6IGlkO1xuXG4gICAgICBpZiAoIWZpZWxkICYmIF9fREVWX18pIHtcbiAgICAgICAgd2FybkFib3V0TWlzc2luZ0lkZW50aWZpZXIoe1xuICAgICAgICAgIGh0bWxDb250ZW50OiBvdXRlckhUTUwsXG4gICAgICAgICAgZG9jdW1lbnRhdGlvbkFuY2hvckxpbms6ICdoYW5kbGVibHVyLWUtYW55LS12b2lkJyxcbiAgICAgICAgICBoYW5kbGVyTmFtZTogJ2hhbmRsZUJsdXInLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgc2V0RmllbGRUb3VjaGVkKGZpZWxkLCB0cnVlKTtcbiAgICB9LFxuICAgIFtzZXRGaWVsZFRvdWNoZWRdXG4gICk7XG5cbiAgY29uc3QgaGFuZGxlQmx1ciA9IHVzZUV2ZW50Q2FsbGJhY2s8Rm9ybWlrSGFuZGxlcnNbJ2hhbmRsZUJsdXInXT4oXG4gICAgKGV2ZW50T3JTdHJpbmc6IGFueSk6IHZvaWQgfCAoKGU6IGFueSkgPT4gdm9pZCkgPT4ge1xuICAgICAgaWYgKGlzU3RyaW5nKGV2ZW50T3JTdHJpbmcpKSB7XG4gICAgICAgIHJldHVybiBldmVudCA9PiBleGVjdXRlQmx1cihldmVudCwgZXZlbnRPclN0cmluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleGVjdXRlQmx1cihldmVudE9yU3RyaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG5cbiAgY29uc3Qgc2V0Rm9ybWlrU3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoXG4gICAgICBzdGF0ZU9yQ2I6XG4gICAgICAgIHwgRm9ybWlrU3RhdGU8VmFsdWVzPlxuICAgICAgICB8ICgoc3RhdGU6IEZvcm1pa1N0YXRlPFZhbHVlcz4pID0+IEZvcm1pa1N0YXRlPFZhbHVlcz4pXG4gICAgKTogdm9pZCA9PiB7XG4gICAgICBpZiAoaXNGdW5jdGlvbihzdGF0ZU9yQ2IpKSB7XG4gICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9GT1JNSUtfU1RBVEUnLCBwYXlsb2FkOiBzdGF0ZU9yQ2IgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfRk9STUlLX1NUQVRFJywgcGF5bG9hZDogKCkgPT4gc3RhdGVPckNiIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgW11cbiAgKTtcblxuICBjb25zdCBzZXRTdGF0dXMgPSBSZWFjdC51c2VDYWxsYmFjaygoc3RhdHVzOiBhbnkpID0+IHtcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfU1RBVFVTJywgcGF5bG9hZDogc3RhdHVzIH0pO1xuICB9LCBbXSk7XG5cbiAgY29uc3Qgc2V0U3VibWl0dGluZyA9IFJlYWN0LnVzZUNhbGxiYWNrKChpc1N1Ym1pdHRpbmc6IGJvb2xlYW4pID0+IHtcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfSVNTVUJNSVRUSU5HJywgcGF5bG9hZDogaXNTdWJtaXR0aW5nIH0pO1xuICB9LCBbXSk7XG5cbiAgY29uc3Qgc3VibWl0Rm9ybSA9IHVzZUV2ZW50Q2FsbGJhY2soKCkgPT4ge1xuICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NVQk1JVF9BVFRFTVBUJyB9KTtcbiAgICByZXR1cm4gdmFsaWRhdGVGb3JtV2l0aEhpZ2hQcmlvcml0eSgpLnRoZW4oXG4gICAgICAoY29tYmluZWRFcnJvcnM6IEZvcm1pa0Vycm9yczxWYWx1ZXM+KSA9PiB7XG4gICAgICAgIC8vIEluIGNhc2UgYW4gZXJyb3Igd2FzIHRocm93biBhbmQgcGFzc2VkIHRvIHRoZSByZXNvbHZlZCBQcm9taXNlLFxuICAgICAgICAvLyBgY29tYmluZWRFcnJvcnNgIGNhbiBiZSBhbiBpbnN0YW5jZSBvZiBhbiBFcnJvci4gV2UgbmVlZCB0byBjaGVja1xuICAgICAgICAvLyB0aGF0IGFuZCBhYm9ydCB0aGUgc3VibWl0LlxuICAgICAgICAvLyBJZiB3ZSBkb24ndCBkbyB0aGF0LCBjYWxsaW5nIGBPYmplY3Qua2V5cyhuZXcgRXJyb3IoKSlgIHlpZWxkcyBhblxuICAgICAgICAvLyBlbXB0eSBhcnJheSwgd2hpY2ggY2F1c2VzIHRoZSB2YWxpZGF0aW9uIHRvIHBhc3MgYW5kIHRoZSBmb3JtXG4gICAgICAgIC8vIHRvIGJlIHN1Ym1pdHRlZC5cblxuICAgICAgICBjb25zdCBpc0luc3RhbmNlT2ZFcnJvciA9IGNvbWJpbmVkRXJyb3JzIGluc3RhbmNlb2YgRXJyb3I7XG4gICAgICAgIGNvbnN0IGlzQWN0dWFsbHlWYWxpZCA9XG4gICAgICAgICAgIWlzSW5zdGFuY2VPZkVycm9yICYmIE9iamVjdC5rZXlzKGNvbWJpbmVkRXJyb3JzKS5sZW5ndGggPT09IDA7XG4gICAgICAgIGlmIChpc0FjdHVhbGx5VmFsaWQpIHtcbiAgICAgICAgICAvLyBQcm9jZWVkIHdpdGggc3VibWl0Li4uXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBUbyByZXNwZWN0IHN5bmMgc3VibWl0IGZucywgd2UgY2FuJ3Qgc2ltcGx5IHdyYXAgZXhlY3V0ZVN1Ym1pdCBpbiBhIHByb21pc2UgYW5kXG4gICAgICAgICAgLy8gX2Fsd2F5c18gZGlzcGF0Y2ggU1VCTUlUX1NVQ0NFU1MgYmVjYXVzZSBpc1N1Ym1pdHRpbmcgd291bGQgdGhlbiBhbHdheXMgYmUgZmFsc2UuXG4gICAgICAgICAgLy8gVGhpcyB3b3VsZCBiZSBmaW5lIGluIHNpbXBsZSBjYXNlcywgYnV0IG1ha2UgaXQgaW1wb3NzaWJsZSB0byBkaXNhYmxlIHN1Ym1pdFxuICAgICAgICAgIC8vIGJ1dHRvbnMgd2hlcmUgcGVvcGxlIHVzZSBjYWxsYmFja3Mgb3IgcHJvbWlzZXMgYXMgc2lkZSBlZmZlY3RzICh3aGljaCBpcyBiYXNpY2FsbHlcbiAgICAgICAgICAvLyBhbGwgb2YgdjEgRm9ybWlrIGNvZGUpLiBJbnN0ZWFkLCByZWNhbGwgdGhhdCB3ZSBhcmUgaW5zaWRlIG9mIGEgcHJvbWlzZSBjaGFpbiBhbHJlYWR5LFxuICAgICAgICAgIC8vICBzbyB3ZSBjYW4gdHJ5L2NhdGNoIGV4ZWN1dGVTdWJtaXQoKSwgaWYgaXQgcmV0dXJucyB1bmRlZmluZWQsIHRoZW4ganVzdCBiYWlsLlxuICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBlcnJvcnMsIHRocm93IGVtLiBPdGhlcndpc2UsIHdyYXAgZXhlY3V0ZVN1Ym1pdCBpbiBhIHByb21pc2UgYW5kIGhhbmRsZVxuICAgICAgICAgIC8vIGNsZWFudXAgb2YgaXNTdWJtaXR0aW5nIG9uIGJlaGFsZiBvZiB0aGUgY29uc3VtZXIuXG4gICAgICAgICAgbGV0IHByb21pc2VPclVuZGVmaW5lZDtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJvbWlzZU9yVW5kZWZpbmVkID0gZXhlY3V0ZVN1Ym1pdCgpO1xuICAgICAgICAgICAgLy8gQmFpbCBpZiBpdCdzIHN5bmMsIGNvbnN1bWVyIGlzIHJlc3BvbnNpYmxlIGZvciBjbGVhbmluZyB1cFxuICAgICAgICAgICAgLy8gdmlhIHNldFN1Ym1pdHRpbmcoZmFsc2UpXG4gICAgICAgICAgICBpZiAocHJvbWlzZU9yVW5kZWZpbmVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHByb21pc2VPclVuZGVmaW5lZClcbiAgICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgIGlmICghIWlzTW91bnRlZC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU1VCTUlUX1NVQ0NFU1MnIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKF9lcnJvcnMgPT4ge1xuICAgICAgICAgICAgICBpZiAoISFpc01vdW50ZWQuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NVQk1JVF9GQUlMVVJFJyB9KTtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgbGVnaXQgZXJyb3IgcmVqZWN0ZWQgYnkgdGhlIG9uU3VibWl0IGZuXG4gICAgICAgICAgICAgICAgLy8gc28gd2UgZG9uJ3Qgd2FudCB0byBicmVhayB0aGUgcHJvbWlzZSBjaGFpblxuICAgICAgICAgICAgICAgIHRocm93IF9lcnJvcnM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKCEhaXNNb3VudGVkLmN1cnJlbnQpIHtcbiAgICAgICAgICAvLyBeXl4gTWFrZSBzdXJlIEZvcm1payBpcyBzdGlsbCBtb3VudGVkIGJlZm9yZSB1cGRhdGluZyBzdGF0ZVxuICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NVQk1JVF9GQUlMVVJFJyB9KTtcbiAgICAgICAgICAvLyB0aHJvdyBjb21iaW5lZEVycm9ycztcbiAgICAgICAgICBpZiAoaXNJbnN0YW5jZU9mRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IGNvbWJpbmVkRXJyb3JzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgKTtcbiAgfSk7XG5cbiAgY29uc3QgaGFuZGxlU3VibWl0ID0gdXNlRXZlbnRDYWxsYmFjayhcbiAgICAoZT86IFJlYWN0LkZvcm1FdmVudDxIVE1MRm9ybUVsZW1lbnQ+KSA9PiB7XG4gICAgICBpZiAoZSAmJiBlLnByZXZlbnREZWZhdWx0ICYmIGlzRnVuY3Rpb24oZS5wcmV2ZW50RGVmYXVsdCkpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZSAmJiBlLnN0b3BQcm9wYWdhdGlvbiAmJiBpc0Z1bmN0aW9uKGUuc3RvcFByb3BhZ2F0aW9uKSkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuXG4gICAgICAvLyBXYXJuIGlmIGZvcm0gc3VibWlzc2lvbiBpcyB0cmlnZ2VyZWQgYnkgYSA8YnV0dG9uPiB3aXRob3V0IGFcbiAgICAgIC8vIHNwZWNpZmllZCBgdHlwZWAgYXR0cmlidXRlIGR1cmluZyBkZXZlbG9wbWVudC4gVGhpcyBtaXRpZ2F0ZXNcbiAgICAgIC8vIGEgY29tbW9uIGdvdGNoYSBpbiBmb3JtcyB3aXRoIGJvdGggcmVzZXQgYW5kIHN1Ym1pdCBidXR0b25zLFxuICAgICAgLy8gd2hlcmUgdGhlIGRldiBmb3JnZXRzIHRvIGFkZCB0eXBlPVwiYnV0dG9uXCIgdG8gdGhlIHJlc2V0IGJ1dHRvbi5cbiAgICAgIGlmIChfX0RFVl9fICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gU2FmZWx5IGdldCB0aGUgYWN0aXZlIGVsZW1lbnQgKHdvcmtzIHdpdGggSUUpXG4gICAgICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSBnZXRBY3RpdmVFbGVtZW50KCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBhY3RpdmVFbGVtZW50ICE9PSBudWxsICYmXG4gICAgICAgICAgYWN0aXZlRWxlbWVudCBpbnN0YW5jZW9mIEhUTUxCdXR0b25FbGVtZW50XG4gICAgICAgICkge1xuICAgICAgICAgIGludmFyaWFudChcbiAgICAgICAgICAgIGFjdGl2ZUVsZW1lbnQuYXR0cmlidXRlcyAmJlxuICAgICAgICAgICAgICBhY3RpdmVFbGVtZW50LmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCd0eXBlJyksXG4gICAgICAgICAgICAnWW91IHN1Ym1pdHRlZCBhIEZvcm1payBmb3JtIHVzaW5nIGEgYnV0dG9uIHdpdGggYW4gdW5zcGVjaWZpZWQgYHR5cGVgIGF0dHJpYnV0ZS4gIE1vc3QgYnJvd3NlcnMgZGVmYXVsdCBidXR0b24gZWxlbWVudHMgdG8gYHR5cGU9XCJzdWJtaXRcImAuIElmIHRoaXMgaXMgbm90IGEgc3VibWl0IGJ1dHRvbiwgcGxlYXNlIGFkZCBgdHlwZT1cImJ1dHRvblwiYC4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdWJtaXRGb3JtKCkuY2F0Y2gocmVhc29uID0+IHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBXYXJuaW5nOiBBbiB1bmhhbmRsZWQgZXJyb3Igd2FzIGNhdWdodCBmcm9tIHN1Ym1pdEZvcm0oKWAsXG4gICAgICAgICAgcmVhc29uXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9XG4gICk7XG5cbiAgY29uc3QgaW1wZXJhdGl2ZU1ldGhvZHM6IEZvcm1pa0hlbHBlcnM8VmFsdWVzPiA9IHtcbiAgICByZXNldEZvcm0sXG4gICAgdmFsaWRhdGVGb3JtOiB2YWxpZGF0ZUZvcm1XaXRoSGlnaFByaW9yaXR5LFxuICAgIHZhbGlkYXRlRmllbGQsXG4gICAgc2V0RXJyb3JzLFxuICAgIHNldEZpZWxkRXJyb3IsXG4gICAgc2V0RmllbGRUb3VjaGVkLFxuICAgIHNldEZpZWxkVmFsdWUsXG4gICAgc2V0U3RhdHVzLFxuICAgIHNldFN1Ym1pdHRpbmcsXG4gICAgc2V0VG91Y2hlZCxcbiAgICBzZXRWYWx1ZXMsXG4gICAgc2V0Rm9ybWlrU3RhdGUsXG4gICAgc3VibWl0Rm9ybSxcbiAgfTtcblxuICBjb25zdCBleGVjdXRlU3VibWl0ID0gdXNlRXZlbnRDYWxsYmFjaygoKSA9PiB7XG4gICAgcmV0dXJuIG9uU3VibWl0KHN0YXRlLnZhbHVlcywgaW1wZXJhdGl2ZU1ldGhvZHMpO1xuICB9KTtcblxuICBjb25zdCBoYW5kbGVSZXNldCA9IHVzZUV2ZW50Q2FsbGJhY2soZSA9PiB7XG4gICAgaWYgKGUgJiYgZS5wcmV2ZW50RGVmYXVsdCAmJiBpc0Z1bmN0aW9uKGUucHJldmVudERlZmF1bHQpKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKGUgJiYgZS5zdG9wUHJvcGFnYXRpb24gJiYgaXNGdW5jdGlvbihlLnN0b3BQcm9wYWdhdGlvbikpIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG4gICAgcmVzZXRGb3JtKCk7XG4gIH0pO1xuXG4gIGNvbnN0IGdldEZpZWxkTWV0YSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChuYW1lOiBzdHJpbmcpOiBGaWVsZE1ldGFQcm9wczxhbnk+ID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiBnZXRJbihzdGF0ZS52YWx1ZXMsIG5hbWUpLFxuICAgICAgICBlcnJvcjogZ2V0SW4oc3RhdGUuZXJyb3JzLCBuYW1lKSxcbiAgICAgICAgdG91Y2hlZDogISFnZXRJbihzdGF0ZS50b3VjaGVkLCBuYW1lKSxcbiAgICAgICAgaW5pdGlhbFZhbHVlOiBnZXRJbihpbml0aWFsVmFsdWVzLmN1cnJlbnQsIG5hbWUpLFxuICAgICAgICBpbml0aWFsVG91Y2hlZDogISFnZXRJbihpbml0aWFsVG91Y2hlZC5jdXJyZW50LCBuYW1lKSxcbiAgICAgICAgaW5pdGlhbEVycm9yOiBnZXRJbihpbml0aWFsRXJyb3JzLmN1cnJlbnQsIG5hbWUpLFxuICAgICAgfTtcbiAgICB9LFxuICAgIFtzdGF0ZS5lcnJvcnMsIHN0YXRlLnRvdWNoZWQsIHN0YXRlLnZhbHVlc11cbiAgKTtcblxuICBjb25zdCBnZXRGaWVsZEhlbHBlcnMgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAobmFtZTogc3RyaW5nKTogRmllbGRIZWxwZXJQcm9wczxhbnk+ID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNldFZhbHVlOiAodmFsdWU6IGFueSwgc2hvdWxkVmFsaWRhdGU/OiBib29sZWFuKSA9PlxuICAgICAgICAgIHNldEZpZWxkVmFsdWUobmFtZSwgdmFsdWUsIHNob3VsZFZhbGlkYXRlKSxcbiAgICAgICAgc2V0VG91Y2hlZDogKHZhbHVlOiBib29sZWFuLCBzaG91bGRWYWxpZGF0ZT86IGJvb2xlYW4pID0+XG4gICAgICAgICAgc2V0RmllbGRUb3VjaGVkKG5hbWUsIHZhbHVlLCBzaG91bGRWYWxpZGF0ZSksXG4gICAgICAgIHNldEVycm9yOiAodmFsdWU6IGFueSkgPT4gc2V0RmllbGRFcnJvcihuYW1lLCB2YWx1ZSksXG4gICAgICB9O1xuICAgIH0sXG4gICAgW3NldEZpZWxkVmFsdWUsIHNldEZpZWxkVG91Y2hlZCwgc2V0RmllbGRFcnJvcl1cbiAgKTtcblxuICBjb25zdCBnZXRGaWVsZFByb3BzID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKG5hbWVPck9wdGlvbnMpOiBGaWVsZElucHV0UHJvcHM8YW55PiA9PiB7XG4gICAgICBjb25zdCBpc0FuT2JqZWN0ID0gaXNPYmplY3QobmFtZU9yT3B0aW9ucyk7XG4gICAgICBjb25zdCBuYW1lID0gaXNBbk9iamVjdCA/IG5hbWVPck9wdGlvbnMubmFtZSA6IG5hbWVPck9wdGlvbnM7XG4gICAgICBjb25zdCB2YWx1ZVN0YXRlID0gZ2V0SW4oc3RhdGUudmFsdWVzLCBuYW1lKTtcblxuICAgICAgY29uc3QgZmllbGQ6IEZpZWxkSW5wdXRQcm9wczxhbnk+ID0ge1xuICAgICAgICBuYW1lLFxuICAgICAgICB2YWx1ZTogdmFsdWVTdGF0ZSxcbiAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICAgICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgICAgfTtcbiAgICAgIGlmIChpc0FuT2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZVByb3AsIC8vIHZhbHVlIGlzIHNwZWNpYWwgZm9yIGNoZWNrYm94ZXNcbiAgICAgICAgICBhczogaXMsXG4gICAgICAgICAgbXVsdGlwbGUsXG4gICAgICAgIH0gPSBuYW1lT3JPcHRpb25zO1xuXG4gICAgICAgIGlmICh0eXBlID09PSAnY2hlY2tib3gnKSB7XG4gICAgICAgICAgaWYgKHZhbHVlUHJvcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmaWVsZC5jaGVja2VkID0gISF2YWx1ZVN0YXRlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmaWVsZC5jaGVja2VkID0gISEoXG4gICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodmFsdWVTdGF0ZSkgJiYgfnZhbHVlU3RhdGUuaW5kZXhPZih2YWx1ZVByb3ApXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZmllbGQudmFsdWUgPSB2YWx1ZVByb3A7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdyYWRpbycpIHtcbiAgICAgICAgICBmaWVsZC5jaGVja2VkID0gdmFsdWVTdGF0ZSA9PT0gdmFsdWVQcm9wO1xuICAgICAgICAgIGZpZWxkLnZhbHVlID0gdmFsdWVQcm9wO1xuICAgICAgICB9IGVsc2UgaWYgKGlzID09PSAnc2VsZWN0JyAmJiBtdWx0aXBsZSkge1xuICAgICAgICAgIGZpZWxkLnZhbHVlID0gZmllbGQudmFsdWUgfHwgW107XG4gICAgICAgICAgZmllbGQubXVsdGlwbGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmllbGQ7XG4gICAgfSxcbiAgICBbaGFuZGxlQmx1ciwgaGFuZGxlQ2hhbmdlLCBzdGF0ZS52YWx1ZXNdXG4gICk7XG5cbiAgY29uc3QgZGlydHkgPSBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+ICFpc0VxdWFsKGluaXRpYWxWYWx1ZXMuY3VycmVudCwgc3RhdGUudmFsdWVzKSxcbiAgICBbaW5pdGlhbFZhbHVlcy5jdXJyZW50LCBzdGF0ZS52YWx1ZXNdXG4gICk7XG5cbiAgY29uc3QgaXNWYWxpZCA9IFJlYWN0LnVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIHR5cGVvZiBpc0luaXRpYWxWYWxpZCAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgPyBkaXJ0eVxuICAgICAgICAgID8gc3RhdGUuZXJyb3JzICYmIE9iamVjdC5rZXlzKHN0YXRlLmVycm9ycykubGVuZ3RoID09PSAwXG4gICAgICAgICAgOiBpc0luaXRpYWxWYWxpZCAhPT0gZmFsc2UgJiYgaXNGdW5jdGlvbihpc0luaXRpYWxWYWxpZClcbiAgICAgICAgICA/IChpc0luaXRpYWxWYWxpZCBhcyAocHJvcHM6IEZvcm1pa0NvbmZpZzxWYWx1ZXM+KSA9PiBib29sZWFuKShwcm9wcylcbiAgICAgICAgICA6IChpc0luaXRpYWxWYWxpZCBhcyBib29sZWFuKVxuICAgICAgICA6IHN0YXRlLmVycm9ycyAmJiBPYmplY3Qua2V5cyhzdGF0ZS5lcnJvcnMpLmxlbmd0aCA9PT0gMCxcbiAgICBbaXNJbml0aWFsVmFsaWQsIGRpcnR5LCBzdGF0ZS5lcnJvcnMsIHByb3BzXVxuICApO1xuXG4gIGNvbnN0IGN0eCA9IHtcbiAgICAuLi5zdGF0ZSxcbiAgICBpbml0aWFsVmFsdWVzOiBpbml0aWFsVmFsdWVzLmN1cnJlbnQsXG4gICAgaW5pdGlhbEVycm9yczogaW5pdGlhbEVycm9ycy5jdXJyZW50LFxuICAgIGluaXRpYWxUb3VjaGVkOiBpbml0aWFsVG91Y2hlZC5jdXJyZW50LFxuICAgIGluaXRpYWxTdGF0dXM6IGluaXRpYWxTdGF0dXMuY3VycmVudCxcbiAgICBoYW5kbGVCbHVyLFxuICAgIGhhbmRsZUNoYW5nZSxcbiAgICBoYW5kbGVSZXNldCxcbiAgICBoYW5kbGVTdWJtaXQsXG4gICAgcmVzZXRGb3JtLFxuICAgIHNldEVycm9ycyxcbiAgICBzZXRGb3JtaWtTdGF0ZSxcbiAgICBzZXRGaWVsZFRvdWNoZWQsXG4gICAgc2V0RmllbGRWYWx1ZSxcbiAgICBzZXRGaWVsZEVycm9yLFxuICAgIHNldFN0YXR1cyxcbiAgICBzZXRTdWJtaXR0aW5nLFxuICAgIHNldFRvdWNoZWQsXG4gICAgc2V0VmFsdWVzLFxuICAgIHN1Ym1pdEZvcm0sXG4gICAgdmFsaWRhdGVGb3JtOiB2YWxpZGF0ZUZvcm1XaXRoSGlnaFByaW9yaXR5LFxuICAgIHZhbGlkYXRlRmllbGQsXG4gICAgaXNWYWxpZCxcbiAgICBkaXJ0eSxcbiAgICB1bnJlZ2lzdGVyRmllbGQsXG4gICAgcmVnaXN0ZXJGaWVsZCxcbiAgICBnZXRGaWVsZFByb3BzLFxuICAgIGdldEZpZWxkTWV0YSxcbiAgICBnZXRGaWVsZEhlbHBlcnMsXG4gICAgdmFsaWRhdGVPbkJsdXIsXG4gICAgdmFsaWRhdGVPbkNoYW5nZSxcbiAgICB2YWxpZGF0ZU9uTW91bnQsXG4gIH07XG5cbiAgcmV0dXJuIGN0eDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEZvcm1pazxcbiAgVmFsdWVzIGV4dGVuZHMgRm9ybWlrVmFsdWVzID0gRm9ybWlrVmFsdWVzLFxuICBFeHRyYVByb3BzID0ge31cbj4ocHJvcHM6IEZvcm1pa0NvbmZpZzxWYWx1ZXM+ICYgRXh0cmFQcm9wcykge1xuICBjb25zdCBmb3JtaWtiYWcgPSB1c2VGb3JtaWs8VmFsdWVzPihwcm9wcyk7XG4gIGNvbnN0IHsgY29tcG9uZW50LCBjaGlsZHJlbiwgcmVuZGVyLCBpbm5lclJlZiB9ID0gcHJvcHM7XG5cbiAgLy8gVGhpcyBhbGxvd3MgZm9sa3MgdG8gcGFzcyBhIHJlZiB0byA8Rm9ybWlrIC8+XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoaW5uZXJSZWYsICgpID0+IGZvcm1pa2JhZyk7XG5cbiAgaWYgKF9fREVWX18pIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICAhcHJvcHMucmVuZGVyLFxuICAgICAgICBgPEZvcm1payByZW5kZXI+IGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgRm9ybWlrLiBQbGVhc2UgdXNlIGEgY2hpbGQgY2FsbGJhY2sgZnVuY3Rpb24gaW5zdGVhZC4gVG8gZ2V0IHJpZCBvZiB0aGlzIHdhcm5pbmcsIHJlcGxhY2UgPEZvcm1payByZW5kZXI9eyhwcm9wcykgPT4gLi4ufSAvPiB3aXRoIDxGb3JtaWs+eyhwcm9wcykgPT4gLi4ufTwvRm9ybWlrPmBcbiAgICAgICk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICB9LCBbXSk7XG4gIH1cbiAgcmV0dXJuIChcbiAgICA8Rm9ybWlrUHJvdmlkZXIgdmFsdWU9e2Zvcm1pa2JhZ30+XG4gICAgICB7Y29tcG9uZW50XG4gICAgICAgID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQgYXMgYW55LCBmb3JtaWtiYWcpXG4gICAgICAgIDogcmVuZGVyXG4gICAgICAgID8gcmVuZGVyKGZvcm1pa2JhZylcbiAgICAgICAgOiBjaGlsZHJlbiAvLyBjaGlsZHJlbiBjb21lIGxhc3QsIGFsd2F5cyBjYWxsZWRcbiAgICAgICAgPyBpc0Z1bmN0aW9uKGNoaWxkcmVuKVxuICAgICAgICAgID8gKGNoaWxkcmVuIGFzIChiYWc6IEZvcm1pa1Byb3BzPFZhbHVlcz4pID0+IFJlYWN0LlJlYWN0Tm9kZSkoXG4gICAgICAgICAgICAgIGZvcm1pa2JhZyBhcyBGb3JtaWtQcm9wczxWYWx1ZXM+XG4gICAgICAgICAgICApXG4gICAgICAgICAgOiAhaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKVxuICAgICAgICAgID8gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbilcbiAgICAgICAgICA6IG51bGxcbiAgICAgICAgOiBudWxsfVxuICAgIDwvRm9ybWlrUHJvdmlkZXI+XG4gICk7XG59XG5cbmZ1bmN0aW9uIHdhcm5BYm91dE1pc3NpbmdJZGVudGlmaWVyKHtcbiAgaHRtbENvbnRlbnQsXG4gIGRvY3VtZW50YXRpb25BbmNob3JMaW5rLFxuICBoYW5kbGVyTmFtZSxcbn06IHtcbiAgaHRtbENvbnRlbnQ6IHN0cmluZztcbiAgZG9jdW1lbnRhdGlvbkFuY2hvckxpbms6IHN0cmluZztcbiAgaGFuZGxlck5hbWU6IHN0cmluZztcbn0pIHtcbiAgY29uc29sZS53YXJuKFxuICAgIGBXYXJuaW5nOiBGb3JtaWsgY2FsbGVkIFxcYCR7aGFuZGxlck5hbWV9XFxgLCBidXQgeW91IGZvcmdvdCB0byBwYXNzIGFuIFxcYGlkXFxgIG9yIFxcYG5hbWVcXGAgYXR0cmlidXRlIHRvIHlvdXIgaW5wdXQ6XG4gICAgJHtodG1sQ29udGVudH1cbiAgICBGb3JtaWsgY2Fubm90IGRldGVybWluZSB3aGljaCB2YWx1ZSB0byB1cGRhdGUuIEZvciBtb3JlIGluZm8gc2VlIGh0dHBzOi8vZm9ybWlrLm9yZy9kb2NzL2FwaS9mb3JtaWsjJHtkb2N1bWVudGF0aW9uQW5jaG9yTGlua31cbiAgYFxuICApO1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBZdXAgVmFsaWRhdGlvbkVycm9yIHRvIGEgbW9yZSB1c2FibGUgb2JqZWN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB5dXBUb0Zvcm1FcnJvcnM8VmFsdWVzPih5dXBFcnJvcjogYW55KTogRm9ybWlrRXJyb3JzPFZhbHVlcz4ge1xuICBsZXQgZXJyb3JzOiBGb3JtaWtFcnJvcnM8VmFsdWVzPiA9IHt9O1xuICBpZiAoeXVwRXJyb3IuaW5uZXIpIHtcbiAgICBpZiAoeXVwRXJyb3IuaW5uZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gc2V0SW4oZXJyb3JzLCB5dXBFcnJvci5wYXRoLCB5dXBFcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gICAgZm9yIChsZXQgZXJyIG9mIHl1cEVycm9yLmlubmVyKSB7XG4gICAgICBpZiAoIWdldEluKGVycm9ycywgZXJyLnBhdGgpKSB7XG4gICAgICAgIGVycm9ycyA9IHNldEluKGVycm9ycywgZXJyLnBhdGgsIGVyci5tZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGVycm9ycztcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZSBhIHl1cCBzY2hlbWEuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVl1cFNjaGVtYTxUIGV4dGVuZHMgRm9ybWlrVmFsdWVzPihcbiAgdmFsdWVzOiBULFxuICBzY2hlbWE6IGFueSxcbiAgc3luYzogYm9vbGVhbiA9IGZhbHNlLFxuICBjb250ZXh0OiBhbnkgPSB7fVxuKTogUHJvbWlzZTxQYXJ0aWFsPFQ+PiB7XG4gIGNvbnN0IHZhbGlkYXRlRGF0YTogRm9ybWlrVmFsdWVzID0gcHJlcGFyZURhdGFGb3JWYWxpZGF0aW9uKHZhbHVlcyk7XG4gIHJldHVybiBzY2hlbWFbc3luYyA/ICd2YWxpZGF0ZVN5bmMnIDogJ3ZhbGlkYXRlJ10odmFsaWRhdGVEYXRhLCB7XG4gICAgYWJvcnRFYXJseTogZmFsc2UsXG4gICAgY29udGV4dDogY29udGV4dCxcbiAgfSk7XG59XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgcHJlcGFyZSB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlRGF0YUZvclZhbGlkYXRpb248VCBleHRlbmRzIEZvcm1pa1ZhbHVlcz4oXG4gIHZhbHVlczogVFxuKTogRm9ybWlrVmFsdWVzIHtcbiAgbGV0IGRhdGE6IEZvcm1pa1ZhbHVlcyA9IEFycmF5LmlzQXJyYXkodmFsdWVzKSA/IFtdIDoge307XG4gIGZvciAobGV0IGsgaW4gdmFsdWVzKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZXMsIGspKSB7XG4gICAgICBjb25zdCBrZXkgPSBTdHJpbmcoayk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZXNba2V5XSkgPT09IHRydWUpIHtcbiAgICAgICAgZGF0YVtrZXldID0gdmFsdWVzW2tleV0ubWFwKCh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpID09PSB0cnVlIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJlcGFyZURhdGFGb3JWYWxpZGF0aW9uKHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlICE9PSAnJyA/IHZhbHVlIDogdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsdWVzW2tleV0pKSB7XG4gICAgICAgIGRhdGFba2V5XSA9IHByZXBhcmVEYXRhRm9yVmFsaWRhdGlvbih2YWx1ZXNba2V5XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZXNba2V5XSAhPT0gJycgPyB2YWx1ZXNba2V5XSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogZGVlcG1lcmdlIGFycmF5IG1lcmdpbmcgYWxnb3JpdGhtXG4gKiBodHRwczovL2dpdGh1Yi5jb20vS3lsZUFNYXRoZXdzL2RlZXBtZXJnZSNjb21iaW5lLWFycmF5XG4gKi9cbmZ1bmN0aW9uIGFycmF5TWVyZ2UodGFyZ2V0OiBhbnlbXSwgc291cmNlOiBhbnlbXSwgb3B0aW9uczogYW55KTogYW55W10ge1xuICBjb25zdCBkZXN0aW5hdGlvbiA9IHRhcmdldC5zbGljZSgpO1xuXG4gIHNvdXJjZS5mb3JFYWNoKGZ1bmN0aW9uIG1lcmdlKGU6IGFueSwgaTogbnVtYmVyKSB7XG4gICAgaWYgKHR5cGVvZiBkZXN0aW5hdGlvbltpXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IGNsb25lUmVxdWVzdGVkID0gb3B0aW9ucy5jbG9uZSAhPT0gZmFsc2U7XG4gICAgICBjb25zdCBzaG91bGRDbG9uZSA9IGNsb25lUmVxdWVzdGVkICYmIG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QoZSk7XG4gICAgICBkZXN0aW5hdGlvbltpXSA9IHNob3VsZENsb25lXG4gICAgICAgID8gZGVlcG1lcmdlKEFycmF5LmlzQXJyYXkoZSkgPyBbXSA6IHt9LCBlLCBvcHRpb25zKVxuICAgICAgICA6IGU7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KGUpKSB7XG4gICAgICBkZXN0aW5hdGlvbltpXSA9IGRlZXBtZXJnZSh0YXJnZXRbaV0sIGUsIG9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAodGFyZ2V0LmluZGV4T2YoZSkgPT09IC0xKSB7XG4gICAgICBkZXN0aW5hdGlvbi5wdXNoKGUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkZXN0aW5hdGlvbjtcbn1cblxuLyoqIFJldHVybiBtdWx0aSBzZWxlY3QgdmFsdWVzIGJhc2VkIG9uIGFuIGFycmF5IG9mIG9wdGlvbnMgKi9cbmZ1bmN0aW9uIGdldFNlbGVjdGVkVmFsdWVzKG9wdGlvbnM6IGFueVtdKSB7XG4gIHJldHVybiBBcnJheS5mcm9tKG9wdGlvbnMpXG4gICAgLmZpbHRlcihlbCA9PiBlbC5zZWxlY3RlZClcbiAgICAubWFwKGVsID0+IGVsLnZhbHVlKTtcbn1cblxuLyoqIFJldHVybiB0aGUgbmV4dCB2YWx1ZSBmb3IgYSBjaGVja2JveCAqL1xuZnVuY3Rpb24gZ2V0VmFsdWVGb3JDaGVja2JveChcbiAgY3VycmVudFZhbHVlOiBzdHJpbmcgfCBhbnlbXSxcbiAgY2hlY2tlZDogYm9vbGVhbixcbiAgdmFsdWVQcm9wOiBhbnlcbikge1xuICAvLyBJZiB0aGUgY3VycmVudCB2YWx1ZSB3YXMgYSBib29sZWFuLCByZXR1cm4gYSBib29sZWFuXG4gIGlmICh0eXBlb2YgY3VycmVudFZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gQm9vbGVhbihjaGVja2VkKTtcbiAgfVxuXG4gIC8vIElmIHRoZSBjdXJyZW50VmFsdWUgd2FzIG5vdCBhIGJvb2xlYW4gd2Ugd2FudCB0byByZXR1cm4gYW4gYXJyYXlcbiAgbGV0IGN1cnJlbnRBcnJheU9mVmFsdWVzID0gW107XG4gIGxldCBpc1ZhbHVlSW5BcnJheSA9IGZhbHNlO1xuICBsZXQgaW5kZXggPSAtMTtcblxuICBpZiAoIUFycmF5LmlzQXJyYXkoY3VycmVudFZhbHVlKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcbiAgICBpZiAoIXZhbHVlUHJvcCB8fCB2YWx1ZVByb3AgPT0gJ3RydWUnIHx8IHZhbHVlUHJvcCA9PSAnZmFsc2UnKSB7XG4gICAgICByZXR1cm4gQm9vbGVhbihjaGVja2VkKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgdGhlIGN1cnJlbnQgdmFsdWUgaXMgYWxyZWFkeSBhbiBhcnJheSwgdXNlIGl0XG4gICAgY3VycmVudEFycmF5T2ZWYWx1ZXMgPSBjdXJyZW50VmFsdWU7XG4gICAgaW5kZXggPSBjdXJyZW50VmFsdWUuaW5kZXhPZih2YWx1ZVByb3ApO1xuICAgIGlzVmFsdWVJbkFycmF5ID0gaW5kZXggPj0gMDtcbiAgfVxuXG4gIC8vIElmIHRoZSBjaGVja2JveCB3YXMgY2hlY2tlZCBhbmQgdGhlIHZhbHVlIGlzIG5vdCBhbHJlYWR5IHByZXNlbnQgaW4gdGhlIGFyYXkgd2Ugd2FudCB0byBhZGQgdGhlIG5ldyB2YWx1ZSB0byB0aGUgYXJyYXkgb2YgdmFsdWVzXG4gIGlmIChjaGVja2VkICYmIHZhbHVlUHJvcCAmJiAhaXNWYWx1ZUluQXJyYXkpIHtcbiAgICByZXR1cm4gY3VycmVudEFycmF5T2ZWYWx1ZXMuY29uY2F0KHZhbHVlUHJvcCk7XG4gIH1cblxuICAvLyBJZiB0aGUgY2hlY2tib3ggd2FzIHVuY2hlY2tlZCBhbmQgdGhlIHZhbHVlIGlzIG5vdCBpbiB0aGUgYXJyYXksIHNpbXBseSByZXR1cm4gdGhlIGFscmVhZHkgZXhpc3RpbmcgYXJyYXkgb2YgdmFsdWVzXG4gIGlmICghaXNWYWx1ZUluQXJyYXkpIHtcbiAgICByZXR1cm4gY3VycmVudEFycmF5T2ZWYWx1ZXM7XG4gIH1cblxuICAvLyBJZiB0aGUgY2hlY2tib3ggd2FzIHVuY2hlY2tlZCBhbmQgdGhlIHZhbHVlIGlzIGluIHRoZSBhcnJheSwgcmVtb3ZlIHRoZSB2YWx1ZSBhbmQgcmV0dXJuIHRoZSBhcnJheVxuICByZXR1cm4gY3VycmVudEFycmF5T2ZWYWx1ZXNcbiAgICAuc2xpY2UoMCwgaW5kZXgpXG4gICAgLmNvbmNhdChjdXJyZW50QXJyYXlPZlZhbHVlcy5zbGljZShpbmRleCArIDEpKTtcbn1cblxuLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuXG4vLyBAc2VlIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2dhZWFyb24vZTdkOTdjZGYzOGEyOTA3OTI0ZWExMmU0ZWJkZjNjODVcbmNvbnN0IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPVxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJlxuICB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICAgPyBSZWFjdC51c2VMYXlvdXRFZmZlY3RcbiAgICA6IFJlYWN0LnVzZUVmZmVjdDtcblxuZnVuY3Rpb24gdXNlRXZlbnRDYWxsYmFjazxUIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+KGZuOiBUKTogVCB7XG4gIGNvbnN0IHJlZjogYW55ID0gUmVhY3QudXNlUmVmKGZuKTtcblxuICAvLyB3ZSBjb3B5IGEgcmVmIHRvIHRoZSBjYWxsYmFjayBzY29wZWQgdG8gdGhlIGN1cnJlbnQgc3RhdGUvcHJvcHMgb24gZWFjaCByZW5kZXJcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgcmVmLmN1cnJlbnQgPSBmbjtcbiAgfSk7XG5cbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgICguLi5hcmdzOiBhbnlbXSkgPT4gcmVmLmN1cnJlbnQuYXBwbHkodm9pZCAwLCBhcmdzKSxcbiAgICBbXVxuICApIGFzIFQ7XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VGb3JtaWtDb250ZXh0IH0gZnJvbSAnLi9Gb3JtaWtDb250ZXh0JztcblxuZXhwb3J0IHR5cGUgRm9ybWlrRm9ybVByb3BzID0gUGljazxcbiAgUmVhY3QuRm9ybUhUTUxBdHRyaWJ1dGVzPEhUTUxGb3JtRWxlbWVudD4sXG4gIEV4Y2x1ZGU8XG4gICAga2V5b2YgUmVhY3QuRm9ybUhUTUxBdHRyaWJ1dGVzPEhUTUxGb3JtRWxlbWVudD4sXG4gICAgJ29uUmVzZXQnIHwgJ29uU3VibWl0J1xuICA+XG4+O1xuXG50eXBlIEZvcm1Qcm9wcyA9IFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjwnZm9ybSc+O1xuXG4vLyBAdG9kbyB0ZXN0c1xuZXhwb3J0IGNvbnN0IEZvcm0gPSBSZWFjdC5mb3J3YXJkUmVmPEhUTUxGb3JtRWxlbWVudCwgRm9ybVByb3BzPihcbiAgKHByb3BzOiBGb3JtaWtGb3JtUHJvcHMsIHJlZikgPT4ge1xuICAgIC8vIGlPUyBuZWVkcyBhbiBcImFjdGlvblwiIGF0dHJpYnV0ZSBmb3IgbmljZSBpbnB1dDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5NDg1MTYyLzQwNjcyNVxuICAgIC8vIFdlIGRlZmF1bHQgdGhlIGFjdGlvbiB0byBcIiNcIiBpbiBjYXNlIHRoZSBwcmV2ZW50RGVmYXVsdCBmYWlscyAoanVzdCB1cGRhdGVzIHRoZSBVUkwgaGFzaClcbiAgICBjb25zdCB7IGFjdGlvbiwgLi4ucmVzdCB9ID0gcHJvcHM7XG4gICAgY29uc3QgX2FjdGlvbiA9IGFjdGlvbiA/PyAnIyc7XG4gICAgY29uc3QgeyBoYW5kbGVSZXNldCwgaGFuZGxlU3VibWl0IH0gPSB1c2VGb3JtaWtDb250ZXh0KCk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxmb3JtXG4gICAgICAgIG9uU3VibWl0PXtoYW5kbGVTdWJtaXR9XG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgICBvblJlc2V0PXtoYW5kbGVSZXNldH1cbiAgICAgICAgYWN0aW9uPXtfYWN0aW9ufVxuICAgICAgICB7Li4ucmVzdH1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuKTtcblxuRm9ybS5kaXNwbGF5TmFtZSA9ICdGb3JtJztcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbG9uZURlZXAgZnJvbSAnbG9kYXNoL2Nsb25lRGVlcCc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAnLi9jb25uZWN0JztcbmltcG9ydCB7XG4gIEZvcm1pa0NvbnRleHRUeXBlLFxuICBGb3JtaWtTdGF0ZSxcbiAgU2hhcmVkUmVuZGVyUHJvcHMsXG4gIEZvcm1pa1Byb3BzLFxufSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7XG4gIGdldEluLFxuICBpc0VtcHR5Q2hpbGRyZW4sXG4gIGlzRnVuY3Rpb24sXG4gIHNldEluLFxuICBpc0VtcHR5QXJyYXksXG59IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IGlzRXF1YWwgZnJvbSAncmVhY3QtZmFzdC1jb21wYXJlJztcblxuZXhwb3J0IHR5cGUgRmllbGRBcnJheVJlbmRlclByb3BzID0gQXJyYXlIZWxwZXJzICYge1xuICBmb3JtOiBGb3JtaWtQcm9wczxhbnk+O1xuICBuYW1lOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBGaWVsZEFycmF5Q29uZmlnID0ge1xuICAvKiogUmVhbGx5IHRoZSBwYXRoIHRvIHRoZSBhcnJheSBmaWVsZCB0byBiZSB1cGRhdGVkICovXG4gIG5hbWU6IHN0cmluZztcbiAgLyoqIFNob3VsZCBmaWVsZCBhcnJheSB2YWxpZGF0ZSB0aGUgZm9ybSBBRlRFUiBhcnJheSB1cGRhdGVzL2NoYW5nZXM/ICovXG4gIHZhbGlkYXRlT25DaGFuZ2U/OiBib29sZWFuO1xufSAmIFNoYXJlZFJlbmRlclByb3BzPEZpZWxkQXJyYXlSZW5kZXJQcm9wcz47XG5leHBvcnQgaW50ZXJmYWNlIEFycmF5SGVscGVycyB7XG4gIC8qKiBJbXBlcmF0aXZlbHkgYWRkIGEgdmFsdWUgdG8gdGhlIGVuZCBvZiBhbiBhcnJheSAqL1xuICBwdXNoOiAob2JqOiBhbnkpID0+IHZvaWQ7XG4gIC8qKiBDdXJyaWVkIGZuIHRvIGFkZCBhIHZhbHVlIHRvIHRoZSBlbmQgb2YgYW4gYXJyYXkgKi9cbiAgaGFuZGxlUHVzaDogKG9iajogYW55KSA9PiAoKSA9PiB2b2lkO1xuICAvKiogSW1wZXJhdGl2ZWx5IHN3YXAgdHdvIHZhbHVlcyBpbiBhbiBhcnJheSAqL1xuICBzd2FwOiAoaW5kZXhBOiBudW1iZXIsIGluZGV4QjogbnVtYmVyKSA9PiB2b2lkO1xuICAvKiogQ3VycmllZCBmbiB0byBzd2FwIHR3byB2YWx1ZXMgaW4gYW4gYXJyYXkgKi9cbiAgaGFuZGxlU3dhcDogKGluZGV4QTogbnVtYmVyLCBpbmRleEI6IG51bWJlcikgPT4gKCkgPT4gdm9pZDtcbiAgLyoqIEltcGVyYXRpdmVseSBtb3ZlIGFuIGVsZW1lbnQgaW4gYW4gYXJyYXkgdG8gYW5vdGhlciBpbmRleCAqL1xuICBtb3ZlOiAoZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKSA9PiB2b2lkO1xuICAvKiogSW1wZXJhdGl2ZWx5IG1vdmUgYW4gZWxlbWVudCBpbiBhbiBhcnJheSB0byBhbm90aGVyIGluZGV4ICovXG4gIGhhbmRsZU1vdmU6IChmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpID0+ICgpID0+IHZvaWQ7XG4gIC8qKiBJbXBlcmF0aXZlbHkgaW5zZXJ0IGFuIGVsZW1lbnQgYXQgYSBnaXZlbiBpbmRleCBpbnRvIHRoZSBhcnJheSAqL1xuICBpbnNlcnQ6IChpbmRleDogbnVtYmVyLCB2YWx1ZTogYW55KSA9PiB2b2lkO1xuICAvKiogQ3VycmllZCBmbiB0byBpbnNlcnQgYW4gZWxlbWVudCBhdCBhIGdpdmVuIGluZGV4IGludG8gdGhlIGFycmF5ICovXG4gIGhhbmRsZUluc2VydDogKGluZGV4OiBudW1iZXIsIHZhbHVlOiBhbnkpID0+ICgpID0+IHZvaWQ7XG4gIC8qKiBJbXBlcmF0aXZlbHkgcmVwbGFjZSBhIHZhbHVlIGF0IGFuIGluZGV4IG9mIGFuIGFycmF5ICAqL1xuICByZXBsYWNlOiAoaW5kZXg6IG51bWJlciwgdmFsdWU6IGFueSkgPT4gdm9pZDtcbiAgLyoqIEN1cnJpZWQgZm4gdG8gcmVwbGFjZSBhbiBlbGVtZW50IGF0IGEgZ2l2ZW4gaW5kZXggaW50byB0aGUgYXJyYXkgKi9cbiAgaGFuZGxlUmVwbGFjZTogKGluZGV4OiBudW1iZXIsIHZhbHVlOiBhbnkpID0+ICgpID0+IHZvaWQ7XG4gIC8qKiBJbXBlcmF0aXZlbHkgYWRkIGFuIGVsZW1lbnQgdG8gdGhlIGJlZ2lubmluZyBvZiBhbiBhcnJheSBhbmQgcmV0dXJuIGl0cyBsZW5ndGggKi9cbiAgdW5zaGlmdDogKHZhbHVlOiBhbnkpID0+IG51bWJlcjtcbiAgLyoqIEN1cnJpZWQgZm4gdG8gYWRkIGFuIGVsZW1lbnQgdG8gdGhlIGJlZ2lubmluZyBvZiBhbiBhcnJheSAqL1xuICBoYW5kbGVVbnNoaWZ0OiAodmFsdWU6IGFueSkgPT4gKCkgPT4gdm9pZDtcbiAgLyoqIEN1cnJpZWQgZm4gdG8gcmVtb3ZlIGFuIGVsZW1lbnQgYXQgYW4gaW5kZXggb2YgYW4gYXJyYXkgKi9cbiAgaGFuZGxlUmVtb3ZlOiAoaW5kZXg6IG51bWJlcikgPT4gKCkgPT4gdm9pZDtcbiAgLyoqIEN1cnJpZWQgZm4gdG8gcmVtb3ZlIGEgdmFsdWUgZnJvbSB0aGUgZW5kIG9mIHRoZSBhcnJheSAqL1xuICBoYW5kbGVQb3A6ICgpID0+ICgpID0+IHZvaWQ7XG4gIC8qKiBJbXBlcmF0aXZlbHkgcmVtb3ZlIGFuZCBlbGVtZW50IGF0IGFuIGluZGV4IG9mIGFuIGFycmF5ICovXG4gIHJlbW92ZTxUPihpbmRleDogbnVtYmVyKTogVCB8IHVuZGVmaW5lZDtcbiAgLyoqIEltcGVyYXRpdmVseSByZW1vdmUgYW5kIHJldHVybiB2YWx1ZSBmcm9tIHRoZSBlbmQgb2YgdGhlIGFycmF5ICovXG4gIHBvcDxUPigpOiBUIHwgdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFNvbWUgYXJyYXkgaGVscGVycyFcbiAqL1xuZXhwb3J0IGNvbnN0IG1vdmUgPSAoYXJyYXk6IGFueVtdLCBmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpID0+IHtcbiAgY29uc3QgY29weSA9IGNvcHlBcnJheUxpa2UoYXJyYXkpO1xuICBjb25zdCB2YWx1ZSA9IGNvcHlbZnJvbV07XG4gIGNvcHkuc3BsaWNlKGZyb20sIDEpO1xuICBjb3B5LnNwbGljZSh0bywgMCwgdmFsdWUpO1xuICByZXR1cm4gY29weTtcbn07XG5cbmV4cG9ydCBjb25zdCBzd2FwID0gKFxuICBhcnJheUxpa2U6IEFycmF5TGlrZTxhbnk+LFxuICBpbmRleEE6IG51bWJlcixcbiAgaW5kZXhCOiBudW1iZXJcbikgPT4ge1xuICBjb25zdCBjb3B5ID0gY29weUFycmF5TGlrZShhcnJheUxpa2UpO1xuICBjb25zdCBhID0gY29weVtpbmRleEFdO1xuICBjb3B5W2luZGV4QV0gPSBjb3B5W2luZGV4Ql07XG4gIGNvcHlbaW5kZXhCXSA9IGE7XG4gIHJldHVybiBjb3B5O1xufTtcblxuZXhwb3J0IGNvbnN0IGluc2VydCA9IChcbiAgYXJyYXlMaWtlOiBBcnJheUxpa2U8YW55PixcbiAgaW5kZXg6IG51bWJlcixcbiAgdmFsdWU6IGFueVxuKSA9PiB7XG4gIGNvbnN0IGNvcHkgPSBjb3B5QXJyYXlMaWtlKGFycmF5TGlrZSk7XG4gIGNvcHkuc3BsaWNlKGluZGV4LCAwLCB2YWx1ZSk7XG4gIHJldHVybiBjb3B5O1xufTtcblxuZXhwb3J0IGNvbnN0IHJlcGxhY2UgPSAoXG4gIGFycmF5TGlrZTogQXJyYXlMaWtlPGFueT4sXG4gIGluZGV4OiBudW1iZXIsXG4gIHZhbHVlOiBhbnlcbikgPT4ge1xuICBjb25zdCBjb3B5ID0gY29weUFycmF5TGlrZShhcnJheUxpa2UpO1xuICBjb3B5W2luZGV4XSA9IHZhbHVlO1xuICByZXR1cm4gY29weTtcbn07XG5cbmNvbnN0IGNvcHlBcnJheUxpa2UgPSAoYXJyYXlMaWtlOiBBcnJheUxpa2U8YW55PikgPT4ge1xuICBpZiAoIWFycmF5TGlrZSkge1xuICAgIHJldHVybiBbXTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFycmF5TGlrZSkpIHtcbiAgICByZXR1cm4gWy4uLmFycmF5TGlrZV07XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgbWF4SW5kZXggPSBPYmplY3Qua2V5cyhhcnJheUxpa2UpXG4gICAgICAubWFwKGtleSA9PiBwYXJzZUludChrZXkpKVxuICAgICAgLnJlZHVjZSgobWF4LCBlbCkgPT4gKGVsID4gbWF4ID8gZWwgOiBtYXgpLCAwKTtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh7IC4uLmFycmF5TGlrZSwgbGVuZ3RoOiBtYXhJbmRleCArIDEgfSk7XG4gIH1cbn07XG5cbmNsYXNzIEZpZWxkQXJyYXlJbm5lcjxWYWx1ZXMgPSB7fT4gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8XG4gIEZpZWxkQXJyYXlDb25maWcgJiB7IGZvcm1pazogRm9ybWlrQ29udGV4dFR5cGU8VmFsdWVzPiB9LFxuICB7fVxuPiB7XG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgdmFsaWRhdGVPbkNoYW5nZTogdHJ1ZSxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogRmllbGRBcnJheUNvbmZpZyAmIHsgZm9ybWlrOiBGb3JtaWtDb250ZXh0VHlwZTxWYWx1ZXM+IH0pIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgLy8gV2UgbmVlZCBUeXBlU2NyaXB0IGdlbmVyaWNzIG9uIHRoZXNlLCBzbyB3ZSdsbCBiaW5kIHRoZW0gaW4gdGhlIGNvbnN0cnVjdG9yXG4gICAgLy8gQHRvZG8gRml4IFRTIDMuMi4xXG4gICAgdGhpcy5yZW1vdmUgPSB0aGlzLnJlbW92ZS5iaW5kKHRoaXMpIGFzIGFueTtcbiAgICB0aGlzLnBvcCA9IHRoaXMucG9wLmJpbmQodGhpcykgYXMgYW55O1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKFxuICAgIHByZXZQcm9wczogRmllbGRBcnJheUNvbmZpZyAmIHsgZm9ybWlrOiBGb3JtaWtDb250ZXh0VHlwZTxWYWx1ZXM+IH1cbiAgKSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5wcm9wcy52YWxpZGF0ZU9uQ2hhbmdlICYmXG4gICAgICB0aGlzLnByb3BzLmZvcm1pay52YWxpZGF0ZU9uQ2hhbmdlICYmXG4gICAgICAhaXNFcXVhbChcbiAgICAgICAgZ2V0SW4ocHJldlByb3BzLmZvcm1pay52YWx1ZXMsIHByZXZQcm9wcy5uYW1lKSxcbiAgICAgICAgZ2V0SW4odGhpcy5wcm9wcy5mb3JtaWsudmFsdWVzLCB0aGlzLnByb3BzLm5hbWUpXG4gICAgICApXG4gICAgKSB7XG4gICAgICB0aGlzLnByb3BzLmZvcm1pay52YWxpZGF0ZUZvcm0odGhpcy5wcm9wcy5mb3JtaWsudmFsdWVzKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVBcnJheUZpZWxkID0gKFxuICAgIGZuOiBGdW5jdGlvbixcbiAgICBhbHRlclRvdWNoZWQ6IGJvb2xlYW4gfCBGdW5jdGlvbixcbiAgICBhbHRlckVycm9yczogYm9vbGVhbiB8IEZ1bmN0aW9uXG4gICkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG5hbWUsXG5cbiAgICAgIGZvcm1pazogeyBzZXRGb3JtaWtTdGF0ZSB9LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIHNldEZvcm1pa1N0YXRlKChwcmV2U3RhdGU6IEZvcm1pa1N0YXRlPGFueT4pID0+IHtcbiAgICAgIGxldCB1cGRhdGVFcnJvcnMgPSB0eXBlb2YgYWx0ZXJFcnJvcnMgPT09ICdmdW5jdGlvbicgPyBhbHRlckVycm9ycyA6IGZuO1xuICAgICAgbGV0IHVwZGF0ZVRvdWNoZWQgPVxuICAgICAgICB0eXBlb2YgYWx0ZXJUb3VjaGVkID09PSAnZnVuY3Rpb24nID8gYWx0ZXJUb3VjaGVkIDogZm47XG5cbiAgICAgIC8vIHZhbHVlcyBmbiBzaG91bGQgYmUgZXhlY3V0ZWQgYmVmb3JlIHVwZGF0ZUVycm9ycyBhbmQgdXBkYXRlVG91Y2hlZCxcbiAgICAgIC8vIG90aGVyd2lzZSBpdCBjYXVzZXMgYW4gZXJyb3Igd2l0aCB1bnNoaWZ0LlxuICAgICAgbGV0IHZhbHVlcyA9IHNldEluKFxuICAgICAgICBwcmV2U3RhdGUudmFsdWVzLFxuICAgICAgICBuYW1lLFxuICAgICAgICBmbihnZXRJbihwcmV2U3RhdGUudmFsdWVzLCBuYW1lKSlcbiAgICAgICk7XG5cbiAgICAgIGxldCBmaWVsZEVycm9yID0gYWx0ZXJFcnJvcnNcbiAgICAgICAgPyB1cGRhdGVFcnJvcnMoZ2V0SW4ocHJldlN0YXRlLmVycm9ycywgbmFtZSkpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgbGV0IGZpZWxkVG91Y2hlZCA9IGFsdGVyVG91Y2hlZFxuICAgICAgICA/IHVwZGF0ZVRvdWNoZWQoZ2V0SW4ocHJldlN0YXRlLnRvdWNoZWQsIG5hbWUpKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGlzRW1wdHlBcnJheShmaWVsZEVycm9yKSkge1xuICAgICAgICBmaWVsZEVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKGlzRW1wdHlBcnJheShmaWVsZFRvdWNoZWQpKSB7XG4gICAgICAgIGZpZWxkVG91Y2hlZCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucHJldlN0YXRlLFxuICAgICAgICB2YWx1ZXMsXG4gICAgICAgIGVycm9yczogYWx0ZXJFcnJvcnNcbiAgICAgICAgICA/IHNldEluKHByZXZTdGF0ZS5lcnJvcnMsIG5hbWUsIGZpZWxkRXJyb3IpXG4gICAgICAgICAgOiBwcmV2U3RhdGUuZXJyb3JzLFxuICAgICAgICB0b3VjaGVkOiBhbHRlclRvdWNoZWRcbiAgICAgICAgICA/IHNldEluKHByZXZTdGF0ZS50b3VjaGVkLCBuYW1lLCBmaWVsZFRvdWNoZWQpXG4gICAgICAgICAgOiBwcmV2U3RhdGUudG91Y2hlZCxcbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG5cbiAgcHVzaCA9ICh2YWx1ZTogYW55KSA9PlxuICAgIHRoaXMudXBkYXRlQXJyYXlGaWVsZChcbiAgICAgIChhcnJheUxpa2U6IEFycmF5TGlrZTxhbnk+KSA9PiBbXG4gICAgICAgIC4uLmNvcHlBcnJheUxpa2UoYXJyYXlMaWtlKSxcbiAgICAgICAgY2xvbmVEZWVwKHZhbHVlKSxcbiAgICAgIF0sXG4gICAgICBmYWxzZSxcbiAgICAgIGZhbHNlXG4gICAgKTtcblxuICBoYW5kbGVQdXNoID0gKHZhbHVlOiBhbnkpID0+ICgpID0+IHRoaXMucHVzaCh2YWx1ZSk7XG5cbiAgc3dhcCA9IChpbmRleEE6IG51bWJlciwgaW5kZXhCOiBudW1iZXIpID0+XG4gICAgdGhpcy51cGRhdGVBcnJheUZpZWxkKFxuICAgICAgKGFycmF5OiBhbnlbXSkgPT4gc3dhcChhcnJheSwgaW5kZXhBLCBpbmRleEIpLFxuICAgICAgdHJ1ZSxcbiAgICAgIHRydWVcbiAgICApO1xuXG4gIGhhbmRsZVN3YXAgPSAoaW5kZXhBOiBudW1iZXIsIGluZGV4QjogbnVtYmVyKSA9PiAoKSA9PlxuICAgIHRoaXMuc3dhcChpbmRleEEsIGluZGV4Qik7XG5cbiAgbW92ZSA9IChmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpID0+XG4gICAgdGhpcy51cGRhdGVBcnJheUZpZWxkKChhcnJheTogYW55W10pID0+IG1vdmUoYXJyYXksIGZyb20sIHRvKSwgdHJ1ZSwgdHJ1ZSk7XG5cbiAgaGFuZGxlTW92ZSA9IChmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpID0+ICgpID0+IHRoaXMubW92ZShmcm9tLCB0byk7XG5cbiAgaW5zZXJ0ID0gKGluZGV4OiBudW1iZXIsIHZhbHVlOiBhbnkpID0+XG4gICAgdGhpcy51cGRhdGVBcnJheUZpZWxkKFxuICAgICAgKGFycmF5OiBhbnlbXSkgPT4gaW5zZXJ0KGFycmF5LCBpbmRleCwgdmFsdWUpLFxuICAgICAgKGFycmF5OiBhbnlbXSkgPT4gaW5zZXJ0KGFycmF5LCBpbmRleCwgbnVsbCksXG4gICAgICAoYXJyYXk6IGFueVtdKSA9PiBpbnNlcnQoYXJyYXksIGluZGV4LCBudWxsKVxuICAgICk7XG5cbiAgaGFuZGxlSW5zZXJ0ID0gKGluZGV4OiBudW1iZXIsIHZhbHVlOiBhbnkpID0+ICgpID0+IHRoaXMuaW5zZXJ0KGluZGV4LCB2YWx1ZSk7XG5cbiAgcmVwbGFjZSA9IChpbmRleDogbnVtYmVyLCB2YWx1ZTogYW55KSA9PlxuICAgIHRoaXMudXBkYXRlQXJyYXlGaWVsZChcbiAgICAgIChhcnJheTogYW55W10pID0+IHJlcGxhY2UoYXJyYXksIGluZGV4LCB2YWx1ZSksXG4gICAgICBmYWxzZSxcbiAgICAgIGZhbHNlXG4gICAgKTtcblxuICBoYW5kbGVSZXBsYWNlID0gKGluZGV4OiBudW1iZXIsIHZhbHVlOiBhbnkpID0+ICgpID0+XG4gICAgdGhpcy5yZXBsYWNlKGluZGV4LCB2YWx1ZSk7XG5cbiAgdW5zaGlmdCA9ICh2YWx1ZTogYW55KSA9PiB7XG4gICAgbGV0IGxlbmd0aCA9IC0xO1xuICAgIHRoaXMudXBkYXRlQXJyYXlGaWVsZChcbiAgICAgIChhcnJheTogYW55W10pID0+IHtcbiAgICAgICAgY29uc3QgYXJyID0gYXJyYXkgPyBbdmFsdWUsIC4uLmFycmF5XSA6IFt2YWx1ZV07XG4gICAgICAgIGlmIChsZW5ndGggPCAwKSB7XG4gICAgICAgICAgbGVuZ3RoID0gYXJyLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfSxcbiAgICAgIChhcnJheTogYW55W10pID0+IHtcbiAgICAgICAgY29uc3QgYXJyID0gYXJyYXkgPyBbbnVsbCwgLi4uYXJyYXldIDogW251bGxdO1xuICAgICAgICBpZiAobGVuZ3RoIDwgMCkge1xuICAgICAgICAgIGxlbmd0aCA9IGFyci5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgIH0sXG4gICAgICAoYXJyYXk6IGFueVtdKSA9PiB7XG4gICAgICAgIGNvbnN0IGFyciA9IGFycmF5ID8gW251bGwsIC4uLmFycmF5XSA6IFtudWxsXTtcbiAgICAgICAgaWYgKGxlbmd0aCA8IDApIHtcbiAgICAgICAgICBsZW5ndGggPSBhcnIubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9XG4gICAgKTtcbiAgICByZXR1cm4gbGVuZ3RoO1xuICB9O1xuXG4gIGhhbmRsZVVuc2hpZnQgPSAodmFsdWU6IGFueSkgPT4gKCkgPT4gdGhpcy51bnNoaWZ0KHZhbHVlKTtcblxuICByZW1vdmU8VD4oaW5kZXg6IG51bWJlcik6IFQge1xuICAgIC8vIFdlIG5lZWQgdG8gbWFrZSBzdXJlIHdlIGFsc28gcmVtb3ZlIHJlbGV2YW50IHBpZWNlcyBvZiBgdG91Y2hlZGAgYW5kIGBlcnJvcnNgXG4gICAgbGV0IHJlc3VsdDogYW55O1xuICAgIHRoaXMudXBkYXRlQXJyYXlGaWVsZChcbiAgICAgIC8vIHNvIHRoaXMgZ2V0cyBjYWxsIDMgdGltZXNcbiAgICAgIChhcnJheT86IGFueVtdKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvcHkgPSBhcnJheSA/IGNvcHlBcnJheUxpa2UoYXJyYXkpIDogW107XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgcmVzdWx0ID0gY29weVtpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oY29weS5zcGxpY2UpKSB7XG4gICAgICAgICAgY29weS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgICAgfSxcbiAgICAgIHRydWUsXG4gICAgICB0cnVlXG4gICAgKTtcblxuICAgIHJldHVybiByZXN1bHQgYXMgVDtcbiAgfVxuXG4gIGhhbmRsZVJlbW92ZSA9IChpbmRleDogbnVtYmVyKSA9PiAoKSA9PiB0aGlzLnJlbW92ZTxhbnk+KGluZGV4KTtcblxuICBwb3A8VD4oKTogVCB7XG4gICAgLy8gUmVtb3ZlIHJlbGV2YW50IHBpZWNlcyBvZiBgdG91Y2hlZGAgYW5kIGBlcnJvcnNgIHRvbyFcbiAgICBsZXQgcmVzdWx0OiBhbnk7XG4gICAgdGhpcy51cGRhdGVBcnJheUZpZWxkKFxuICAgICAgLy8gc28gdGhpcyBnZXRzIGNhbGwgMyB0aW1lc1xuICAgICAgKGFycmF5OiBhbnlbXSkgPT4ge1xuICAgICAgICBjb25zdCB0bXAgPSBhcnJheTtcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHQgPSB0bXAgJiYgdG1wLnBvcCAmJiB0bXAucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRtcDtcbiAgICAgIH0sXG4gICAgICB0cnVlLFxuICAgICAgdHJ1ZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzdWx0IGFzIFQ7XG4gIH1cblxuICBoYW5kbGVQb3AgPSAoKSA9PiAoKSA9PiB0aGlzLnBvcDxhbnk+KCk7XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGFycmF5SGVscGVyczogQXJyYXlIZWxwZXJzID0ge1xuICAgICAgcHVzaDogdGhpcy5wdXNoLFxuICAgICAgcG9wOiB0aGlzLnBvcCxcbiAgICAgIHN3YXA6IHRoaXMuc3dhcCxcbiAgICAgIG1vdmU6IHRoaXMubW92ZSxcbiAgICAgIGluc2VydDogdGhpcy5pbnNlcnQsXG4gICAgICByZXBsYWNlOiB0aGlzLnJlcGxhY2UsXG4gICAgICB1bnNoaWZ0OiB0aGlzLnVuc2hpZnQsXG4gICAgICByZW1vdmU6IHRoaXMucmVtb3ZlLFxuICAgICAgaGFuZGxlUHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgaGFuZGxlUG9wOiB0aGlzLmhhbmRsZVBvcCxcbiAgICAgIGhhbmRsZVN3YXA6IHRoaXMuaGFuZGxlU3dhcCxcbiAgICAgIGhhbmRsZU1vdmU6IHRoaXMuaGFuZGxlTW92ZSxcbiAgICAgIGhhbmRsZUluc2VydDogdGhpcy5oYW5kbGVJbnNlcnQsXG4gICAgICBoYW5kbGVSZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBoYW5kbGVVbnNoaWZ0OiB0aGlzLmhhbmRsZVVuc2hpZnQsXG4gICAgICBoYW5kbGVSZW1vdmU6IHRoaXMuaGFuZGxlUmVtb3ZlLFxuICAgIH07XG5cbiAgICBjb25zdCB7XG4gICAgICBjb21wb25lbnQsXG4gICAgICByZW5kZXIsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIG5hbWUsXG4gICAgICBmb3JtaWs6IHtcbiAgICAgICAgdmFsaWRhdGU6IF92YWxpZGF0ZSxcbiAgICAgICAgdmFsaWRhdGlvblNjaGVtYTogX3ZhbGlkYXRpb25TY2hlbWEsXG4gICAgICAgIC4uLnJlc3RPZkZvcm1pa1xuICAgICAgfSxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHByb3BzOiBGaWVsZEFycmF5UmVuZGVyUHJvcHMgPSB7XG4gICAgICAuLi5hcnJheUhlbHBlcnMsXG4gICAgICBmb3JtOiByZXN0T2ZGb3JtaWssXG4gICAgICBuYW1lLFxuICAgIH07XG5cbiAgICByZXR1cm4gY29tcG9uZW50XG4gICAgICA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50IGFzIGFueSwgcHJvcHMpXG4gICAgICA6IHJlbmRlclxuICAgICAgPyAocmVuZGVyIGFzIGFueSkocHJvcHMpXG4gICAgICA6IGNoaWxkcmVuIC8vIGNoaWxkcmVuIGNvbWUgbGFzdCwgYWx3YXlzIGNhbGxlZFxuICAgICAgPyB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyAoY2hpbGRyZW4gYXMgYW55KShwcm9wcylcbiAgICAgICAgOiAhaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKVxuICAgICAgICA/IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pXG4gICAgICAgIDogbnVsbFxuICAgICAgOiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBGaWVsZEFycmF5ID0gY29ubmVjdDxGaWVsZEFycmF5Q29uZmlnLCBhbnk+KEZpZWxkQXJyYXlJbm5lcik7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGb3JtaWtDb250ZXh0VHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgZ2V0SW4sIGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICcuL2Nvbm5lY3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yTWVzc2FnZVByb3BzIHtcbiAgbmFtZTogc3RyaW5nO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGNvbXBvbmVudD86IHN0cmluZyB8IFJlYWN0LkNvbXBvbmVudFR5cGU7XG4gIGNoaWxkcmVuPzogKGVycm9yTWVzc2FnZTogc3RyaW5nKSA9PiBSZWFjdC5SZWFjdE5vZGU7XG4gIHJlbmRlcj86IChlcnJvck1lc3NhZ2U6IHN0cmluZykgPT4gUmVhY3QuUmVhY3ROb2RlO1xufVxuXG5jbGFzcyBFcnJvck1lc3NhZ2VJbXBsIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFxuICBFcnJvck1lc3NhZ2VQcm9wcyAmIHsgZm9ybWlrOiBGb3JtaWtDb250ZXh0VHlwZTxhbnk+IH1cbj4ge1xuICBzaG91bGRDb21wb25lbnRVcGRhdGUoXG4gICAgcHJvcHM6IEVycm9yTWVzc2FnZVByb3BzICYgeyBmb3JtaWs6IEZvcm1pa0NvbnRleHRUeXBlPGFueT4gfVxuICApIHtcbiAgICBpZiAoXG4gICAgICBnZXRJbih0aGlzLnByb3BzLmZvcm1pay5lcnJvcnMsIHRoaXMucHJvcHMubmFtZSkgIT09XG4gICAgICAgIGdldEluKHByb3BzLmZvcm1pay5lcnJvcnMsIHRoaXMucHJvcHMubmFtZSkgfHxcbiAgICAgIGdldEluKHRoaXMucHJvcHMuZm9ybWlrLnRvdWNoZWQsIHRoaXMucHJvcHMubmFtZSkgIT09XG4gICAgICAgIGdldEluKHByb3BzLmZvcm1pay50b3VjaGVkLCB0aGlzLnByb3BzLm5hbWUpIHx8XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLnByb3BzKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKHByb3BzKS5sZW5ndGhcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCB7IGNvbXBvbmVudCwgZm9ybWlrLCByZW5kZXIsIGNoaWxkcmVuLCBuYW1lLCAuLi5yZXN0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgdG91Y2ggPSBnZXRJbihmb3JtaWsudG91Y2hlZCwgbmFtZSk7XG4gICAgY29uc3QgZXJyb3IgPSBnZXRJbihmb3JtaWsuZXJyb3JzLCBuYW1lKTtcblxuICAgIHJldHVybiAhIXRvdWNoICYmICEhZXJyb3JcbiAgICAgID8gcmVuZGVyXG4gICAgICAgID8gaXNGdW5jdGlvbihyZW5kZXIpXG4gICAgICAgICAgPyByZW5kZXIoZXJyb3IpXG4gICAgICAgICAgOiBudWxsXG4gICAgICAgIDogY2hpbGRyZW5cbiAgICAgICAgPyBpc0Z1bmN0aW9uKGNoaWxkcmVuKVxuICAgICAgICAgID8gY2hpbGRyZW4oZXJyb3IpXG4gICAgICAgICAgOiBudWxsXG4gICAgICAgIDogY29tcG9uZW50XG4gICAgICAgID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHJlc3QgYXMgYW55LCBlcnJvcilcbiAgICAgICAgOiBlcnJvclxuICAgICAgOiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBFcnJvck1lc3NhZ2UgPSBjb25uZWN0PFxuICBFcnJvck1lc3NhZ2VQcm9wcyxcbiAgRXJyb3JNZXNzYWdlUHJvcHMgJiB7IGZvcm1pazogRm9ybWlrQ29udGV4dFR5cGU8YW55PiB9XG4+KEVycm9yTWVzc2FnZUltcGwpO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge1xuICBGb3JtaWtQcm9wcyxcbiAgR2VuZXJpY0ZpZWxkSFRNTEF0dHJpYnV0ZXMsXG4gIEZvcm1pa0NvbnRleHRUeXBlLFxuICBGaWVsZE1ldGFQcm9wcyxcbiAgRmllbGRJbnB1dFByb3BzLFxufSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCB7IGdldEluLCBpc0VtcHR5Q2hpbGRyZW4sIGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IEZpZWxkQ29uZmlnIH0gZnJvbSAnLi9GaWVsZCc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAnLi9jb25uZWN0JztcblxudHlwZSAkRml4TWUgPSBhbnk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmFzdEZpZWxkUHJvcHM8ViA9IGFueT4ge1xuICBmaWVsZDogRmllbGRJbnB1dFByb3BzPFY+O1xuICBtZXRhOiBGaWVsZE1ldGFQcm9wczxWPjtcbiAgZm9ybTogRm9ybWlrUHJvcHM8Vj47IC8vIGlmIHBwbCB3YW50IHRvIHJlc3RyaWN0IHRoaXMgZm9yIGEgZ2l2ZW4gZm9ybSwgbGV0IHRoZW0uXG59XG5cbmV4cG9ydCB0eXBlIEZhc3RGaWVsZENvbmZpZzxUPiA9IEZpZWxkQ29uZmlnICYge1xuICAvKiogT3ZlcnJpZGUgRmFzdEZpZWxkJ3MgZGVmYXVsdCBzaG91bGRDb21wb25lbnRVcGRhdGUgKi9cbiAgc2hvdWxkVXBkYXRlPzogKFxuICAgIG5leHRQcm9wczogVCAmIEdlbmVyaWNGaWVsZEhUTUxBdHRyaWJ1dGVzLFxuICAgIHByb3BzOiB7fVxuICApID0+IGJvb2xlYW47XG59O1xuXG5leHBvcnQgdHlwZSBGYXN0RmllbGRBdHRyaWJ1dGVzPFQ+ID0gR2VuZXJpY0ZpZWxkSFRNTEF0dHJpYnV0ZXMgJlxuICBGYXN0RmllbGRDb25maWc8VD4gJlxuICBUO1xuXG50eXBlIEZhc3RGaWVsZElubmVyUHJvcHM8VmFsdWVzID0ge30sIFByb3BzID0ge30+ID0gRmFzdEZpZWxkQXR0cmlidXRlczxcbiAgUHJvcHNcbj4gJiB7IGZvcm1pazogRm9ybWlrQ29udGV4dFR5cGU8VmFsdWVzPiB9O1xuXG4vKipcbiAqIEN1c3RvbSBGaWVsZCBjb21wb25lbnQgZm9yIHF1aWNrbHkgaG9va2luZyBpbnRvIEZvcm1pa1xuICogY29udGV4dCBhbmQgd2lyaW5nIHVwIGZvcm1zLlxuICovXG5jbGFzcyBGYXN0RmllbGRJbm5lcjxWYWx1ZXMgPSB7fSwgUHJvcHMgPSB7fT4gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8XG4gIEZhc3RGaWVsZElubmVyUHJvcHM8VmFsdWVzLCBQcm9wcz4sXG4gIHt9XG4+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IEZhc3RGaWVsZElubmVyUHJvcHM8VmFsdWVzLCBQcm9wcz4pIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgY29uc3QgeyByZW5kZXIsIGNoaWxkcmVuLCBjb21wb25lbnQsIGFzOiBpcywgbmFtZSB9ID0gcHJvcHM7XG4gICAgaW52YXJpYW50KFxuICAgICAgIXJlbmRlcixcbiAgICAgIGA8RmFzdEZpZWxkIHJlbmRlcj4gaGFzIGJlZW4gZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBhIGNoaWxkIGNhbGxiYWNrIGZ1bmN0aW9uIGluc3RlYWQ6IDxGYXN0RmllbGQgbmFtZT17JHtuYW1lfX0+e3Byb3BzID0+IC4uLn08L0Zhc3RGaWVsZD4gaW5zdGVhZC5gXG4gICAgKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICAhKGNvbXBvbmVudCAmJiByZW5kZXIpLFxuICAgICAgJ1lvdSBzaG91bGQgbm90IHVzZSA8RmFzdEZpZWxkIGNvbXBvbmVudD4gYW5kIDxGYXN0RmllbGQgcmVuZGVyPiBpbiB0aGUgc2FtZSA8RmFzdEZpZWxkPiBjb21wb25lbnQ7IDxGYXN0RmllbGQgY29tcG9uZW50PiB3aWxsIGJlIGlnbm9yZWQnXG4gICAgKTtcblxuICAgIGludmFyaWFudChcbiAgICAgICEoaXMgJiYgY2hpbGRyZW4gJiYgaXNGdW5jdGlvbihjaGlsZHJlbikpLFxuICAgICAgJ1lvdSBzaG91bGQgbm90IHVzZSA8RmFzdEZpZWxkIGFzPiBhbmQgPEZhc3RGaWVsZCBjaGlsZHJlbj4gYXMgYSBmdW5jdGlvbiBpbiB0aGUgc2FtZSA8RmFzdEZpZWxkPiBjb21wb25lbnQ7IDxGYXN0RmllbGQgYXM+IHdpbGwgYmUgaWdub3JlZC4nXG4gICAgKTtcblxuICAgIGludmFyaWFudChcbiAgICAgICEoY29tcG9uZW50ICYmIGNoaWxkcmVuICYmIGlzRnVuY3Rpb24oY2hpbGRyZW4pKSxcbiAgICAgICdZb3Ugc2hvdWxkIG5vdCB1c2UgPEZhc3RGaWVsZCBjb21wb25lbnQ+IGFuZCA8RmFzdEZpZWxkIGNoaWxkcmVuPiBhcyBhIGZ1bmN0aW9uIGluIHRoZSBzYW1lIDxGYXN0RmllbGQ+IGNvbXBvbmVudDsgPEZhc3RGaWVsZCBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZC4nXG4gICAgKTtcblxuICAgIGludmFyaWFudChcbiAgICAgICEocmVuZGVyICYmIGNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pKSxcbiAgICAgICdZb3Ugc2hvdWxkIG5vdCB1c2UgPEZhc3RGaWVsZCByZW5kZXI+IGFuZCA8RmFzdEZpZWxkIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSA8RmFzdEZpZWxkPiBjb21wb25lbnQ7IDxGYXN0RmllbGQgY2hpbGRyZW4+IHdpbGwgYmUgaWdub3JlZCdcbiAgICApO1xuICB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKHByb3BzOiBGYXN0RmllbGRJbm5lclByb3BzPFZhbHVlcywgUHJvcHM+KSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvdWxkVXBkYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5zaG91bGRVcGRhdGUocHJvcHMsIHRoaXMucHJvcHMpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBwcm9wcy5uYW1lICE9PSB0aGlzLnByb3BzLm5hbWUgfHxcbiAgICAgIGdldEluKHByb3BzLmZvcm1pay52YWx1ZXMsIHRoaXMucHJvcHMubmFtZSkgIT09XG4gICAgICAgIGdldEluKHRoaXMucHJvcHMuZm9ybWlrLnZhbHVlcywgdGhpcy5wcm9wcy5uYW1lKSB8fFxuICAgICAgZ2V0SW4ocHJvcHMuZm9ybWlrLmVycm9ycywgdGhpcy5wcm9wcy5uYW1lKSAhPT1cbiAgICAgICAgZ2V0SW4odGhpcy5wcm9wcy5mb3JtaWsuZXJyb3JzLCB0aGlzLnByb3BzLm5hbWUpIHx8XG4gICAgICBnZXRJbihwcm9wcy5mb3JtaWsudG91Y2hlZCwgdGhpcy5wcm9wcy5uYW1lKSAhPT1cbiAgICAgICAgZ2V0SW4odGhpcy5wcm9wcy5mb3JtaWsudG91Y2hlZCwgdGhpcy5wcm9wcy5uYW1lKSB8fFxuICAgICAgT2JqZWN0LmtleXModGhpcy5wcm9wcykubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhwcm9wcykubGVuZ3RoIHx8XG4gICAgICBwcm9wcy5mb3JtaWsuaXNTdWJtaXR0aW5nICE9PSB0aGlzLnByb3BzLmZvcm1pay5pc1N1Ym1pdHRpbmdcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgLy8gUmVnaXN0ZXIgdGhlIEZpZWxkIHdpdGggdGhlIHBhcmVudCBGb3JtaWsuIFBhcmVudCB3aWxsIGN5Y2xlIHRocm91Z2hcbiAgICAvLyByZWdpc3RlcmVkIEZpZWxkJ3MgdmFsaWRhdGUgZm5zIHJpZ2h0IHByaW9yIHRvIHN1Ym1pdFxuICAgIHRoaXMucHJvcHMuZm9ybWlrLnJlZ2lzdGVyRmllbGQodGhpcy5wcm9wcy5uYW1lLCB7XG4gICAgICB2YWxpZGF0ZTogdGhpcy5wcm9wcy52YWxpZGF0ZSxcbiAgICB9KTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHM6IEZhc3RGaWVsZEF0dHJpYnV0ZXM8UHJvcHM+KSB7XG4gICAgaWYgKHRoaXMucHJvcHMubmFtZSAhPT0gcHJldlByb3BzLm5hbWUpIHtcbiAgICAgIHRoaXMucHJvcHMuZm9ybWlrLnVucmVnaXN0ZXJGaWVsZChwcmV2UHJvcHMubmFtZSk7XG4gICAgICB0aGlzLnByb3BzLmZvcm1pay5yZWdpc3RlckZpZWxkKHRoaXMucHJvcHMubmFtZSwge1xuICAgICAgICB2YWxpZGF0ZTogdGhpcy5wcm9wcy52YWxpZGF0ZSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLnZhbGlkYXRlICE9PSBwcmV2UHJvcHMudmFsaWRhdGUpIHtcbiAgICAgIHRoaXMucHJvcHMuZm9ybWlrLnJlZ2lzdGVyRmllbGQodGhpcy5wcm9wcy5uYW1lLCB7XG4gICAgICAgIHZhbGlkYXRlOiB0aGlzLnByb3BzLnZhbGlkYXRlLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5wcm9wcy5mb3JtaWsudW5yZWdpc3RlckZpZWxkKHRoaXMucHJvcHMubmFtZSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdmFsaWRhdGUsXG4gICAgICBuYW1lLFxuICAgICAgcmVuZGVyLFxuICAgICAgYXM6IGlzLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjb21wb25lbnQsXG4gICAgICBzaG91bGRVcGRhdGUsXG4gICAgICBmb3JtaWssXG4gICAgICAuLi5wcm9wc1xuICAgIH0gPSB0aGlzLnByb3BzIGFzIEZhc3RGaWVsZElubmVyUHJvcHM8VmFsdWVzLCBQcm9wcz47XG5cbiAgICBjb25zdCB7XG4gICAgICB2YWxpZGF0ZTogX3ZhbGlkYXRlLFxuICAgICAgdmFsaWRhdGlvblNjaGVtYTogX3ZhbGlkYXRpb25TY2hlbWEsXG4gICAgICAuLi5yZXN0T2ZGb3JtaWtcbiAgICB9ID0gZm9ybWlrO1xuICAgIGNvbnN0IGZpZWxkID0gZm9ybWlrLmdldEZpZWxkUHJvcHMoeyBuYW1lLCAuLi5wcm9wcyB9KTtcbiAgICBjb25zdCBtZXRhID0ge1xuICAgICAgdmFsdWU6IGdldEluKGZvcm1pay52YWx1ZXMsIG5hbWUpLFxuICAgICAgZXJyb3I6IGdldEluKGZvcm1pay5lcnJvcnMsIG5hbWUpLFxuICAgICAgdG91Y2hlZDogISFnZXRJbihmb3JtaWsudG91Y2hlZCwgbmFtZSksXG4gICAgICBpbml0aWFsVmFsdWU6IGdldEluKGZvcm1pay5pbml0aWFsVmFsdWVzLCBuYW1lKSxcbiAgICAgIGluaXRpYWxUb3VjaGVkOiAhIWdldEluKGZvcm1pay5pbml0aWFsVG91Y2hlZCwgbmFtZSksXG4gICAgICBpbml0aWFsRXJyb3I6IGdldEluKGZvcm1pay5pbml0aWFsRXJyb3JzLCBuYW1lKSxcbiAgICB9O1xuXG4gICAgY29uc3QgYmFnID0geyBmaWVsZCwgbWV0YSwgZm9ybTogcmVzdE9mRm9ybWlrIH07XG5cbiAgICBpZiAocmVuZGVyKSB7XG4gICAgICByZXR1cm4gKHJlbmRlciBhcyBhbnkpKGJhZyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRnVuY3Rpb24oY2hpbGRyZW4pKSB7XG4gICAgICByZXR1cm4gKGNoaWxkcmVuIGFzIChwcm9wczogRmFzdEZpZWxkUHJvcHM8YW55PikgPT4gUmVhY3QuUmVhY3ROb2RlKShiYWcpO1xuICAgIH1cblxuICAgIGlmIChjb21wb25lbnQpIHtcbiAgICAgIC8vIFRoaXMgYmVoYXZpb3IgaXMgYmFja3dhcmRzIGNvbXBhdCB3aXRoIGVhcmxpZXIgRm9ybWlrIDAuOSB0byAxLnhcbiAgICAgIGlmICh0eXBlb2YgY29tcG9uZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zdCB7IGlubmVyUmVmLCAuLi5yZXN0IH0gPSBwcm9wcztcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgY29tcG9uZW50LFxuICAgICAgICAgIHsgcmVmOiBpbm5lclJlZiwgLi4uZmllbGQsIC4uLihyZXN0IGFzICRGaXhNZSkgfSxcbiAgICAgICAgICBjaGlsZHJlblxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgLy8gV2UgZG9uJ3QgcGFzcyBgbWV0YWAgZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBjb21wb25lbnQgYXMgUmVhY3QuQ29tcG9uZW50Q2xhc3M8JEZpeE1lPixcbiAgICAgICAgeyBmaWVsZCwgZm9ybTogZm9ybWlrLCAuLi5wcm9wcyB9LFxuICAgICAgICBjaGlsZHJlblxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBkZWZhdWx0IHRvIGlucHV0IGhlcmUgc28gd2UgY2FuIGNoZWNrIGZvciBib3RoIGBhc2AgYW5kIGBjaGlsZHJlbmAgYWJvdmVcbiAgICBjb25zdCBhc0VsZW1lbnQgPSBpcyB8fCAnaW5wdXQnO1xuXG4gICAgaWYgKHR5cGVvZiBhc0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCB7IGlubmVyUmVmLCAuLi5yZXN0IH0gPSBwcm9wcztcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBhc0VsZW1lbnQsXG4gICAgICAgIHsgcmVmOiBpbm5lclJlZiwgLi4uZmllbGQsIC4uLihyZXN0IGFzICRGaXhNZSkgfSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBhc0VsZW1lbnQgYXMgUmVhY3QuQ29tcG9uZW50Q2xhc3MsXG4gICAgICB7IC4uLmZpZWxkLCAuLi5wcm9wcyB9LFxuICAgICAgY2hpbGRyZW5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBGYXN0RmllbGQgPSBjb25uZWN0PEZhc3RGaWVsZEF0dHJpYnV0ZXM8YW55PiwgYW55PihGYXN0RmllbGRJbm5lcik7XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xyXG5cclxuZXhwb3J0IGVudW0gSW5wdXRUeXBlIHtcclxuICAnYnV0dG9uJyxcclxuICAnY2hlY2tib3gnLFxyXG4gICdjb2xvcicsXHJcbiAgJ2RhdGUnLFxyXG4gICdkYXRldGltZS1sb2NhbCcsXHJcbiAgJ2VtYWlsJyxcclxuICAnZmlsZScsXHJcbiAgJ2hpZGRlbicsXHJcbiAgJ2ltYWdlJyxcclxuICAnbW9udGgnLFxyXG4gICdudW1iZXInLFxyXG4gICdwYXNzd29yZCcsXHJcbiAgJ3JhZGlvJyxcclxuICAncmFuZ2UnLFxyXG4gICdyZXNldCcsXHJcbiAgJ3NlYXJjaCcsXHJcbiAgJ3N1Ym1pdCcsXHJcbiAgJ3RlbCcsXHJcbiAgJ3RleHQnLFxyXG4gICd0aW1lJyxcclxuICAndXJsJyxcclxuICAnd2VlaycsXHJcbn1cclxuXHJcbmludGVyZmFjZSBJSW5wdXRQcm9wcyB7XHJcbiAgdHlwZToga2V5b2YgdHlwZW9mIElucHV0VHlwZVxyXG4gIHBsYWNlaG9sZGVyOiBzdHJpbmdcclxuICBkaXNhYmxlZDogYm9vbGVhblxyXG4gIGNvbG9yOiBzdHJpbmdcclxuICB3aWR0aDogc3RyaW5nXHJcbn1cclxuXHJcbnR5cGUgSW5wdXRUeXBlVCA9IFJlYWRvbmx5PFBhcnRpYWw8SUlucHV0UHJvcHM+PlxyXG5cclxuY29uc3QgSW5wdXQgPSBzdHlsZWQuaW5wdXQ8SW5wdXRUeXBlVD5gXHJcbiAgbWluLXdpZHRoOiBmaXQtY29udGVudDtcclxuICAmOm5vdChpbnB1dFt0eXBlPSdjaGVja2JveCddKSB7XHJcbiAgICB3aWR0aDogJHtwcm9wcyA9PiBwcm9wcy53aWR0aCB8fCAnMTAwJSd9XHJcbiAgfVxyXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTIsIDI1MiwgMjUyKTtcclxuICBjb2xvcjogJHsoeyBjb2xvciB9KSA9PiBjb2xvciB8fCAncmdiKDExOCwgMTI0LCAxMjQpJ307XHJcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiKDEyNSwgMTI1LCAxMjgpO1xyXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcclxuXHJcbiAgZm9udC1zaXplOiAxNHB4O1xyXG4gIHBhZGRpbmc6IDAuM2VtIDAuNWVtO1xyXG4gIGxpbmUtaGVpZ2h0OiAxLjVlbTtcclxuICBvdXRsaW5lOiBub25lO1xyXG4gIHJlc2l6ZTogbm9uZTtcclxuYFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSW5wdXRcclxuIiwiaW1wb3J0IHsgdXNlRm9ybWlrIH0gZnJvbSAnZm9ybWlrJ1xyXG5pbXBvcnQgeyBGQywgUmVhY3RFdmVudEhhbmRsZXIgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcclxuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9jb21tb24vQnV0dG9uJ1xyXG5pbXBvcnQgRGl2IGZyb20gJy4uL2NvbW1vbi9EaXYnXHJcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9jb21tb24vSW5wdXQnXHJcbmltcG9ydCB7IENvbnRlbnRQcm9wc1QgfSBmcm9tICcuL0NvbnRlbnQnXHJcblxyXG5pbnRlcmZhY2UgSVByb3BzIHtcclxuICBnZXRBbGxCb29rczogQ29udGVudFByb3BzVFsnZ2V0QWxsQm9va3MnXVxyXG59XHJcblxyXG5jb25zdCBGbGV4U2VhcmNoRm9ybSA9IHN0eWxlZC5mb3JtYFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgd2lkdGg6IDUwJTtcclxuICBtaW4td2lkdGg6IDMwMHB4O1xyXG4gIG1hcmdpbjogMXJlbSBhdXRvO1xyXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuYFxyXG5cclxubGV0IHRpbWVvdXRJZDogUmV0dXJuVHlwZTx0eXBlb2Ygc2V0VGltZW91dD5cclxuXHJcbmNvbnN0IFNlYXJjaEZvcm06IEZDPElQcm9wcz4gPSAoeyBnZXRBbGxCb29rcyB9KSA9PiB7XHJcbiAgY29uc3QgZm9ybWlrID0gdXNlRm9ybWlrKHtcclxuICAgIGluaXRpYWxWYWx1ZXM6IHsgc2VhcmNoOiAnJyB9LFxyXG4gICAgb25TdWJtaXQ6ICh2YWx1ZXMpID0+IHtcclxuICAgICAgZ2V0QWxsQm9va3ModmFsdWVzLnNlYXJjaClcclxuICAgIH1cclxuICB9KVxyXG5cclxuICBjb25zdCBoYW5kbGVDaGFuZ2U6IFJlYWN0RXZlbnRIYW5kbGVyPEhUTUxJbnB1dEVsZW1lbnQ+ID0gKGUpID0+IHtcclxuICAgIGZvcm1pay5oYW5kbGVDaGFuZ2UoZSlcclxuXHJcbiAgICBjbGVhclRpbWVvdXQodGltZW91dElkKVxyXG4gICAgY29uc3Qgc2VhcmNoID0gZS5jdXJyZW50VGFyZ2V0LnZhbHVlXHJcbiAgICBpZiAoc2VhcmNoKSB7XHJcbiAgICAgIHRpbWVvdXRJZCA9IHRocm90dGxlKCgpID0+IGdldEFsbEJvb2tzKHNlYXJjaCksIDEwMDApXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEZsZXhTZWFyY2hGb3JtIG9uU3VibWl0PXtmb3JtaWsuaGFuZGxlU3VibWl0fT5cclxuICAgICAgPERpdiB3aWR0aD1cIjEwMCVcIj5cclxuICAgICAgICA8SW5wdXQgdHlwZT1cInNlYXJjaFwiIG5hbWU9XCJzZWFyY2hcIiB2YWx1ZT17Zm9ybWlrLnZhbHVlcy5zZWFyY2h9IG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9IC8+XHJcbiAgICAgIDwvRGl2PlxyXG4gICAgPC9GbGV4U2VhcmNoRm9ybT5cclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlYXJjaEZvcm1cclxuXHJcbnR5cGUgRGVjb3JhdGVkRm4gPSAoKSA9PiB2b2lkXHJcblxyXG5mdW5jdGlvbiB0aHJvdHRsZShmbjogRGVjb3JhdGVkRm4sIG1zOiBudW1iZXIpOiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRUaW1lb3V0PiB7XHJcbiAgcmV0dXJuIHNldFRpbWVvdXQoKCkgPT4gZm4oKSwgbXMpXHJcbn1cclxuIiwiaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcclxuaW1wb3J0IERpdiBmcm9tICcuL0RpdidcclxuXHJcbmludGVyZmFjZSBJRmxleCB7XHJcbiAgd3JhcDogc3RyaW5nXHJcbiAgZGlyOiBzdHJpbmdcclxuICBqc3RmU2VsZjogc3RyaW5nXHJcbiAganN0ZkNudDogc3RyaW5nXHJcbiAgYWxnbkl0ZW1zOiBzdHJpbmdcclxufVxyXG5cclxudHlwZSBGbGV4VCA9IFJlYWRvbmx5PFBhcnRpYWw8SUZsZXg+PlxyXG5cclxuY29uc3QgRmxleENvbnRhaW5lciA9IHN0eWxlZChEaXYpPEZsZXhUPmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtd3JhcDogJHtwcm9wcyA9PiBwcm9wcy53cmFwIHx8ICdub3dyYXAnfTtcclxuICBmbGV4LWRpcmVjdGlvbjogJHtwcm9wcyA9PiBwcm9wcy5kaXIgfHwgJ3Jvdyd9O1xyXG4gIGp1c3RpZnktc2VsZjogJHtwcm9wcyA9PiBwcm9wcy5qc3RmU2VsZiB8fCAnZmxleC1zdGFydCd9O1xyXG4gIGp1c3RpZnktY29udGVudDogJHtwcm9wcyA9PiBwcm9wcy5qc3RmQ250IHx8ICdzdHJldGNoJ307XHJcbiAgYWxpZ24taXRlbXM6ICR7cHJvcHMgPT4gcHJvcHMuYWxnbkl0ZW1zIHx8ICdzdHJldGNoJ307XHJcbmBcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEZsZXhDb250YWluZXJcclxuIiwiaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcclxuXHJcbmludGVyZmFjZSBJUHJvcHMge1xyXG4gIGZsZXg6IHN0cmluZ1xyXG59XHJcblxyXG50eXBlIFByb3BzVCA9IFJlYWRvbmx5PFBhcnRpYWw8SVByb3BzPj5cclxuXHJcbmNvbnN0IEJ1dHRvbiA9IHN0eWxlZC5idXR0b248UHJvcHNUPmBcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1LCAyNTUsIDI1NSk7XHJcbiAgY29sb3I6IHJnYigzOSwgNDEsIDQxKTtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgbWluLXdpZHRoOiBmaXQtY29udGVudDtcclxuICBib3JkZXI6IDFweCBzb2xpZCByZ2IoMTQ4LCAxNDgsIDE1MCk7XHJcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gIGZvbnQtc2l6ZTogMC44ZW07XHJcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XHJcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XHJcblxyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxuICBwYWRkaW5nOiAwLjNlbSAwLjVlbTtcclxuICBsaW5lLWhlaWdodDogMS41ZW07XHJcbiAgb3V0bGluZTogbm9uZTtcclxuICByZXNpemU6IG5vbmU7XHJcblxyXG4gIGZsZXg6ICR7KHByb3BzKSA9PiBwcm9wcy5mbGV4IHx8ICdhdXRvJ307XHJcblxyXG4gICY6ZGlzYWJsZWQge1xyXG4gICAgb3BhY2l0eTogMC40O1xyXG4gICAgY3Vyc29yOiBkZWZhdWx0O1xyXG4gIH1cclxuYFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uXHJcbiIsImltcG9ydCBCdXR0b24gZnJvbSAnQC9jb21wb25lbnRzL2NvbW1vbi9CdXR0b24nXHJcbmltcG9ydCB7IHVzZUZvcm1payB9IGZyb20gJ2Zvcm1paydcclxuaW1wb3J0IFByZWxvYWRlciBmcm9tICcuLi9QcmVsb2FkZXInXHJcbmltcG9ydCBEaXYgZnJvbSAnLi4vRGl2J1xyXG5pbXBvcnQgRmxleENvbnRhaW5lciBmcm9tICcuLi9GbGV4Q29udGFpbmVyJ1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xyXG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vSW5wdXQnXHJcbmltcG9ydCB7IEZDLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcclxuXHJcblxyXG5jb25zdCBjbGFzc05hbWUgPSAncGFnZXMtbGlzdF9fc2VsZWN0ZWQtcGFnZSdcclxuXHJcbmNvbnN0IEZsZXhXcmFwcGVyID0gc3R5bGVkKEZsZXhDb250YWluZXIpLmF0dHJzKHsgY2xhc3NOYW1lIH0pYFxyXG4gIHdpZHRoOiBmaXQtY29udGVudDtcclxuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xyXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIG1hcmdpbjogMC41cmVtIGF1dG87XHJcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgc3BhbiB7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgfVxyXG4gIHNwYW4uJHtjbGFzc05hbWV9IHtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIH1cclxuYFxyXG5cclxuaW50ZXJmYWNlIElQYWdlc0xpc3RQcm9wcyB7XHJcbiAgcGFnZXNDb3VudDogbnVtYmVyXHJcbiAgc2VsZWN0ZWRQYWdlOiBudW1iZXJcclxuICBpc0ZldGNoaW5nPzogYm9vbGVhblxyXG4gIG9uUGFnZUNsaWNrOiAocGFnZTogbnVtYmVyKSA9PiB2b2lkXHJcbn1cclxuXHJcbmNvbnN0IFBhZ2VzTGlzdDogRkM8SVBhZ2VzTGlzdFByb3BzPiA9IChwcm9wcykgPT4ge1xyXG4gIGNvbnN0IHsgcGFnZXNDb3VudCwgc2VsZWN0ZWRQYWdlLCBpc0ZldGNoaW5nID0gZmFsc2UgfSA9IHByb3BzXHJcbiAgY29uc3QgeyBvblBhZ2VDbGljayB9ID0gcHJvcHNcclxuXHJcbiAgY29uc3QgaGFuZGxlU3VibWl0ID0gKGpzb25PYmo6IElTZWFyY2hEYXRhKSA9PiB7XHJcbiAgICBvblBhZ2VDbGljayhOdW1iZXIoanNvbk9iai5wYWdlKSlcclxuICB9XHJcblxyXG4gIGxldCBwYWdlc0FyciA9IFtcclxuICAgIHNlbGVjdGVkUGFnZSA9PT0gMyA/IDEgOiBudWxsLFxyXG4gICAgc2VsZWN0ZWRQYWdlIC0gMSA+IDAgPyBzZWxlY3RlZFBhZ2UgLSAxIDogbnVsbCxcclxuICAgIHNlbGVjdGVkUGFnZSxcclxuICAgIHNlbGVjdGVkUGFnZSArIDEgPD0gcGFnZXNDb3VudCA/IHNlbGVjdGVkUGFnZSArIDEgOiBudWxsLFxyXG4gICAgc2VsZWN0ZWRQYWdlID09PSBwYWdlc0NvdW50IC0gMiA/IHBhZ2VzQ291bnQgOiBudWxsXHJcbiAgXVxyXG4gIHBhZ2VzQXJyID0gcGFnZXNBcnIuZmlsdGVyKChwYWdlKSA9PiAhIXBhZ2UpXHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8RmxleFdyYXBwZXI+XHJcbiAgICAgIHtzZWxlY3RlZFBhZ2UgPj0gNCA/IChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgPHNwYW4gcm9sZT1cImJ1dHRvblwiIHRhYkluZGV4PXswfSBvbkNsaWNrPXsoKSA9PiBvblBhZ2VDbGljaygxKX0+XHJcbiAgICAgICAgICAgIDFcclxuICAgICAgICAgIDwvc3Bhbj57JyAnfVxyXG4gICAgICAgICAgPHNwYW4+Li4uPC9zcGFuPlxyXG4gICAgICAgIDwvPlxyXG4gICAgICApIDogKFxyXG4gICAgICAgICcnXHJcbiAgICAgICl9XHJcbiAgICAgIHtwYWdlc0Fyci5tYXAoKHApID0+IHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiXHJcbiAgICAgICAgICAgIHRhYkluZGV4PXswfVxyXG4gICAgICAgICAgICBrZXk9e3B9XHJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uUGFnZUNsaWNrKHApfVxyXG4gICAgICAgICAgICBjbGFzc05hbWU9e3NlbGVjdGVkUGFnZSA9PT0gcCA/IGNsYXNzTmFtZSA6IHVuZGVmaW5lZH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge3B9XHJcbiAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgKVxyXG4gICAgICB9KX1cclxuICAgICAge3NlbGVjdGVkUGFnZSA8PSBwYWdlc0NvdW50IC0gMyA/IChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgPHNwYW4+Li4uPC9zcGFuPlxyXG4gICAgICAgICAgPHNwYW4gcm9sZT1cImJ1dHRvblwiIHRhYkluZGV4PXswfSBvbkNsaWNrPXsoKSA9PiBvblBhZ2VDbGljayhwYWdlc0NvdW50KX0+XHJcbiAgICAgICAgICAgIHtwYWdlc0NvdW50fVxyXG4gICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgIDwvPlxyXG4gICAgICApIDogKFxyXG4gICAgICAgICcnXHJcbiAgICAgICl9XHJcbiAgICAgIDxQYWdlU2VhcmNoRm9ybSBvblN1Ym1pdD17aGFuZGxlU3VibWl0fSAvPlxyXG4gICAgICA8UHJlbG9hZGVyIGlzRmV0Y2hpbmc9e2lzRmV0Y2hpbmd9IC8+XHJcbiAgICA8L0ZsZXhXcmFwcGVyPlxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGFnZXNMaXN0XHJcblxyXG5jb25zdCBGbGV4Rm9ybSA9IHN0eWxlZC5mb3JtYFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gIHdpZHRoOiA2MCU7XHJcbmBcclxuXHJcbmludGVyZmFjZSBJU2VhcmNoRGF0YSB7XHJcbiAgcGFnZTogc3RyaW5nXHJcbn1cclxuXHJcbmludGVyZmFjZSBJUGFnZXNTZWFyY2hGb3JtUHJvcHMge1xyXG4gIG9uU3VibWl0OiAodmFsdWVzOiBJU2VhcmNoRGF0YSkgPT4gdm9pZFxyXG59XHJcblxyXG5jb25zdCBQYWdlU2VhcmNoRm9ybTogRkM8SVBhZ2VzU2VhcmNoRm9ybVByb3BzPiA9ICh7IG9uU3VibWl0IH0pID0+IHtcclxuICBjb25zdCBmb3JtaWsgPSB1c2VGb3JtaWsoe1xyXG4gICAgaW5pdGlhbFZhbHVlczoge1xyXG4gICAgICBwYWdlOiAnJ1xyXG4gICAgfSxcclxuICAgIG9uU3VibWl0OiAodmFsdWVzKSA9PiB7XHJcbiAgICAgIG9uU3VibWl0KHZhbHVlcylcclxuICAgICAgZm9ybWlrLnJlc2V0Rm9ybSgpXHJcbiAgICAgIGZvcm1pay5zZXRGaWVsZFRvdWNoZWQoJ3BhZ2UnLCB0cnVlLCB0cnVlKVxyXG4gICAgfSxcclxuICAgIHZhbGlkYXRlOiAodmFsdWVzKSA9PiB7XHJcbiAgICAgIGNvbnN0IGVycm9ycyA9IHt9IGFzIElTZWFyY2hEYXRhXHJcbiAgICAgIGlmKCF2YWx1ZXMucGFnZSkge1xyXG4gICAgICAgIGVycm9ycy5wYWdlID0gJ1JlcXVpcmVkJ1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKC9eW14wLTldLy50ZXN0KHZhbHVlcy5wYWdlKSkge1xyXG4gICAgICAgIGVycm9ycy5wYWdlID0gJ1VzZSBvbmx5IG51bWJlcnMgMC05J1xyXG4gICAgICB9IGVsc2UgaWYgKHZhbHVlcy5wYWdlID09PSAnMCcpIHtcclxuICAgICAgICBlcnJvcnMucGFnZSA9ICdQYWdlIDAgYXJlIG5vdCB2YWxpZCdcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZXJyb3JzXHJcbiAgICB9XHJcbiAgfSlcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGZvcm1pay5zZXRGaWVsZFRvdWNoZWQoJ3BhZ2UnLCB0cnVlLCB0cnVlKVxyXG4gIH0sIFtdKVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEZsZXhGb3JtIG9uU3VibWl0PXtmb3JtaWsuaGFuZGxlU3VibWl0fT5cclxuICAgICAgPERpdiB3aWR0aD1cIjcwJVwiPlxyXG4gICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgbmFtZT1cInBhZ2VcIlxyXG4gICAgICAgICAgdHlwZT1cInNlYXJjaFwiXHJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIHBhZ2VcIlxyXG4gICAgICAgICAgdmFsdWU9e2Zvcm1pay52YWx1ZXMucGFnZX1cclxuICAgICAgICAgIG9uQ2hhbmdlPXtmb3JtaWsuaGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgb25CbHVyPXtmb3JtaWsuaGFuZGxlQmx1cn1cclxuICAgICAgICAvPlxyXG4gICAgICA8L0Rpdj5cclxuICAgICAgPERpdiB3aWR0aD1cIjI1JVwiPlxyXG4gICAgICAgIDxCdXR0b24gdHlwZT1cInN1Ym1pdFwiIGRpc2FibGVkPXshIWZvcm1pay5lcnJvcnMucGFnZX0+XHJcbiAgICAgICAgICBHbyFcclxuICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgPC9EaXY+XHJcbiAgICA8L0ZsZXhGb3JtPlxyXG4gIClcclxufVxyXG4iLCJpbXBvcnQgeyBGQywgTW91c2VFdmVudEhhbmRsZXIgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHN0eWxlZCwgeyBjc3MsIGtleWZyYW1lcyB9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xyXG5pbXBvcnQgRGl2IGZyb20gJy4uL0RpdidcclxuaW1wb3J0IEZsZXhDb250YWluZXIgZnJvbSAnLi4vRmxleENvbnRhaW5lcidcclxuXHJcbmNvbnN0IFNoYWRvd0RpdiA9IHN0eWxlZC5kaXY8eyBpc1Nob3duOiBib29sZWFuIH0+YFxyXG4gICR7cHJvcHMgPT5cclxuICAgIHByb3BzLmlzU2hvd24gJiZcclxuICAgIGNzc2BcclxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpO1xyXG4gICAgICB3aWR0aDogMTAwdnc7XHJcbiAgICAgIGhlaWdodDogMTAwdmg7XHJcbiAgICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgICAgdG9wOiAwO1xyXG4gICAgICBsZWZ0OiAwO1xyXG4gICAgICB6LWluZGV4OiAxO1xyXG4gICAgYH1cclxuYFxyXG5cclxuLypcclxuICAgIE51bGxDb250YWluZXIg0L3Rg9C20LXQvSDQtNC70Y8g0YLQvtCz0L4sINGH0YLQvtCx0YsgLi4uRmxleENvbnRhaW5lciDQvNC+0LbQvdC+INCx0YvQu9C+INC/0L7Qt9C40YbQuNC+0L3QuNGA0L7QstCw0YLRjCByZWxhdGl2ZVxyXG4gICAg0L/RgNC4INGN0YLQvtC8INC90LUg0LLQu9C40Y/RjyDQvdCwINGN0LvQtdC80LXQvdGC0YssINC+0LrRgNGD0LbQsNGO0YnQuNC1IFZpZXdQYW5lbFxyXG4qL1xyXG5jb25zdCBOdWxsQ29udGFpbmVyID0gc3R5bGVkLmRpdjx7IGhpZGU6IGJvb2xlYW47IGlzU2hvd246IGJvb2xlYW4gfT5gXHJcbiAgJHtwcm9wcyA9PlxyXG4gICAgcHJvcHMuaGlkZSAmJlxyXG4gICAgY3NzYFxyXG4gICAgICB3aWR0aDogMDtcclxuICAgICAgaGVpZ2h0OiAwO1xyXG4gICAgICB6LWluZGV4OiAxMDtcclxuICAgICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICBgfVxyXG4gIGRpc3BsYXk6ICR7cHJvcHMgPT4gKHByb3BzLmlzU2hvd24gPyAnYmxvY2snIDogJ25vbmUnKX07XHJcbmBcclxuXHJcbmNvbnN0IFZpZXdBcmVhID0gc3R5bGVkKERpdik8eyBmaXhlZDogYm9vbGVhbiB9PmBcclxuICB3aWR0aDogOTAwcHg7XHJcbiAgaGVpZ2h0OiA3MDBweDtcclxuICB6LWluZGV4OiAxMDtcclxuICAke3Byb3BzID0+XHJcbiAgICBwcm9wcy5maXhlZFxyXG4gICAgICA/IGNzc2BcclxuICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgICAgICAgIGxlZnQ6IDA7XHJcbiAgICAgICAgICB0b3A6IDA7XHJcbiAgICAgICAgICBib3R0b206IDA7XHJcbiAgICAgICAgICByaWdodDogMDtcclxuICAgICAgICAgIG1hcmdpbjogYXV0bztcclxuICAgICAgICBgXHJcbiAgICAgIDogY3NzYFxyXG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgICAgbGVmdDogMDtcclxuICAgICAgICAgIHRvcDogMDtcclxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIDQwJSk7XHJcbiAgICAgICAgYH1cclxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDI0cHgpIHtcclxuICAgIHdpZHRoOiA3MDBweDtcclxuICAgIGhlaWdodDogNzAwcHg7XHJcbiAgfVxyXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICB3aWR0aDogNTAwcHg7XHJcbiAgICBoZWlnaHQ6IDY1MHB4O1xyXG4gIH1cclxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1NjhweCkge1xyXG4gICAgd2lkdGg6IDMyMHB4O1xyXG4gICAgbWF4LXdpZHRoOiAxMDB2dztcclxuICAgIGhlaWdodDogNzEwcHg7XHJcbiAgfVxyXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDMyMHB4KSB7XHJcbiAgICB3aWR0aDogMjgwcHg7XHJcbiAgICBoZWlnaHQ6IDUwMHB4O1xyXG4gIH1cclxuYFxyXG5cclxuY29uc3QgaG9pc3RBbmltYXRpb24gPSBrZXlmcmFtZXNgXHJcbiAgZnJvbSB7IFxyXG4gICAgdHJhbnNmb3JtOiBzY2FsZTNkKC41LCAuNSwgLjUpO1xyXG4gIH1cclxuICB0byB7IFxyXG4gICAgdHJhbnNmb3JtOiBzY2FsZTNkKDEsMSwxKTtcclxuICB9XHJcbmBcclxuXHJcbmNvbnN0IENvbnRlbnRBcmVhID0gc3R5bGVkKEZsZXhDb250YWluZXIpYFxyXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG4gIG1pbi1oZWlnaHQ6IG1heC1jb250ZW50O1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICB0b3A6IDA7XHJcbiAgei1pbmRleDogMTA7XHJcbiAgYW5pbWF0aW9uOiAke2hvaXN0QW5pbWF0aW9ufSAwLjVzIDE7XHJcbiAgYW5pbWF0aW9uLWRlbGF5OiAwLjU7XHJcbmBcclxuXHJcbmNvbnN0IExlZnRMZWFmQ29udGFpbmVyID0gc3R5bGVkKERpdilgXHJcbiAgd2lkdGg6IDV2dztcclxuICBtaW4td2lkdGg6IDIuNXJlbTtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNik7XHJcbiAgJjpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNCk7XHJcbiAgfVxyXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDU2OHB4KSB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xyXG4gICAgJjpob3ZlciB7XHJcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4yKTtcclxuICAgIH1cclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogMDtcclxuICAgIGxlZnQ6IDA7XHJcbiAgfVxyXG5gXHJcbmNvbnN0IFJpZ2h0TGVhZkNvbnRhaW5lciA9IHN0eWxlZChEaXYpYFxyXG4gIHdpZHRoOiA1dnc7XHJcbiAgbWluLXdpZHRoOiAyLjVyZW07XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjYpO1xyXG4gICY6aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjQpO1xyXG4gIH1cclxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1NjhweCkge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwKTtcclxuICAgICY6aG92ZXIge1xyXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMik7XHJcbiAgICB9XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDA7XHJcbiAgICByaWdodDogMDtcclxuICB9XHJcbmBcclxuXHJcbmludGVyZmFjZSBJVmlld1BhbmVsUHJvcHMge1xyXG4gIGlzU2hvd246IGJvb2xlYW5cclxuICBjb250ZW50OiBKU1guRWxlbWVudFxyXG4gIG11bHRpcGxlPzogYm9vbGVhblxyXG4gIGZpeGVkPzogYm9vbGVhblxyXG4gIG9uTmV4dD86IE1vdXNlRXZlbnRIYW5kbGVyPEhUTUxEaXZFbGVtZW50PlxyXG4gIG9uUHJldj86IE1vdXNlRXZlbnRIYW5kbGVyPEhUTUxEaXZFbGVtZW50PlxyXG4gIG9uQ2xvc2U6IE1vdXNlRXZlbnRIYW5kbGVyPEhUTUxEaXZFbGVtZW50PlxyXG59XHJcblxyXG5jb25zdCBWaWV3UGFuZWw6IEZDPElWaWV3UGFuZWxQcm9wcz4gPSAoe1xyXG4gIGlzU2hvd24sXHJcbiAgY29udGVudCxcclxuICBtdWx0aXBsZSA9IGZhbHNlLFxyXG4gIG9uTmV4dCxcclxuICBvblByZXYsXHJcbiAgb25DbG9zZSxcclxuICBmaXhlZCA9IGZhbHNlXHJcbn0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgICAgPFNoYWRvd0RpdiBvbkNsaWNrPXtvbkNsb3NlfSBpc1Nob3duPXtpc1Nob3dufSAvPlxyXG4gICAgICA8TnVsbENvbnRhaW5lciBoaWRlPXshZml4ZWR9IGlzU2hvd249e2lzU2hvd259PlxyXG4gICAgICAgIDxWaWV3QXJlYSBmaXhlZD17Zml4ZWR9PlxyXG4gICAgICAgICAgPENvbnRlbnRBcmVhIGpzdGZDbnQ9J3NwYWNlLWJldHdlZW4nIGFsZ25JdGVtcz0nY2VudGVyJz5cclxuICAgICAgICAgICAge211bHRpcGxlICYmIDxMZWZ0TGVhZkNvbnRhaW5lciBvbkNsaWNrPXtvblByZXZ9IC8+fVxyXG4gICAgICAgICAgICA8RGl2Pntjb250ZW50fTwvRGl2PlxyXG4gICAgICAgICAgICB7bXVsdGlwbGUgJiYgPFJpZ2h0TGVhZkNvbnRhaW5lciBvbkNsaWNrPXtvbk5leHR9IC8+fVxyXG4gICAgICAgICAgPC9Db250ZW50QXJlYT5cclxuICAgICAgICA8L1ZpZXdBcmVhPlxyXG4gICAgICA8L051bGxDb250YWluZXI+XHJcbiAgICA8Lz5cclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFZpZXdQYW5lbFxyXG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xyXG5cclxuaW50ZXJmYWNlIElJbWFnZSB7XHJcbiAgbWF4V2lkdGg6IHN0cmluZ1xyXG4gIHdpZHRoOiBzdHJpbmdcclxuICBtYXhIZWlnaHQ6IHN0cmluZ1xyXG4gIGhlaWdodDogc3RyaW5nXHJcbiAgZGlzcGxheTogc3RyaW5nXHJcbiAgbWFyZ2luOiBzdHJpbmdcclxuICBwYWRkaW5nOiBzdHJpbmdcclxufVxyXG5cclxudHlwZSBJbWFnZVQgPSBSZWFkb25seTxQYXJ0aWFsPElJbWFnZT4+XHJcblxyXG5jb25zdCBJbWFnZSA9IHN0eWxlZC5pbWc8SW1hZ2VUPmBcclxuICBtYXgtd2lkdGg6ICR7cHJvcHMgPT4gcHJvcHMubWF4V2lkdGggfHwgJzEwMCUnfTtcclxuICB3aWR0aDogJHtwcm9wcyA9PiBwcm9wcy53aWR0aCB8fCAnYXV0byd9O1xyXG4gIG1heC1oZWlnaHQ6ICR7cHJvcHMgPT4gcHJvcHMubWF4SGVpZ2h0IHx8ICcxMDAlJ307XHJcbiAgaGVpZ2h0OiAke3Byb3BzID0+IHByb3BzLmhlaWdodCB8fCAnYXV0byd9O1xyXG4gIGRpc3BsYXk6ICR7cHJvcHMgPT4gcHJvcHMuZGlzcGxheSB8fCAnaW5saW5lJ307XHJcbiAgbWFyZ2luOiAke3Byb3BzID0+IHByb3BzLm1hcmdpbiB8fCAwfTtcclxuICBwYWRkaW5nOiAke3Byb3BzID0+IHByb3BzLnBhZGRpbmcgfHwgMH07XHJcbmBcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEltYWdlXHJcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XHJcblxyXG5pbnRlcmZhY2UgSVByb3BzIHtcclxuICBmb250V2VpZ2h0OiBzdHJpbmdcclxuICBjb2xvcjogc3RyaW5nXHJcbiAgZm9udFNpemU6IHN0cmluZ1xyXG4gIGZvbnRGYW1pbHk6IHN0cmluZ1xyXG59XHJcblxyXG50eXBlIFByb3BzVCA9IFBhcnRpYWw8UmVhZG9ubHk8SVByb3BzPj5cclxuXHJcbmNvbnN0IFNwYW4gPSBzdHlsZWQuc3BhbjxQcm9wc1Q+YFxyXG4gIGZvbnQtd2VpZ2h0OiAkeyhwcm9wcykgPT4gcHJvcHMuZm9udFdlaWdodCB8fCAnbm9ybWFsJ307XHJcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMuY29sb3IgfHwgJ2luaXRpYWwnfTtcclxuICBmb250LXNpemU6ICR7cHJvcHMgPT4gcHJvcHMuZm9udFNpemUgfHwgJzFyZW0nfTtcclxuICBmb250LWZhbWlseTogJHtwcm9wcyA9PiBwcm9wcy5mb250RmFtaWx5IHx8ICdzYW5zLXNlcmlmJ307XHJcbmBcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNwYW4iLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYmY5YzRkY2VjOGQ1YWQ1OGNmY2Y0OTU3ZTRhYjUwMzMuanBnXCI7IiwiaW1wb3J0IHsgSXRlbVR5cGVPZiB9IGZyb20gJ0AvdHlwZXMvY29tbW9uLXR5cGVzJ1xyXG5pbXBvcnQgeyBGQywgUmVhY3RFdmVudEhhbmRsZXIsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXHJcbmltcG9ydCBEaXYgZnJvbSAnLi4vY29tbW9uL0RpdidcclxuaW1wb3J0IEltYWdlIGZyb20gJy4uL2NvbW1vbi9JbWFnZSdcclxuaW1wb3J0IFNwYW4gZnJvbSAnLi4vY29tbW9uL1NwYW4nXHJcbmltcG9ydCB7IENvbnRlbnRQcm9wc1QgfSBmcm9tICcuL0NvbnRlbnQnXHJcbmltcG9ydCBkZWZhdWx0Q292ZXIgZnJvbSAnQC9pbWFnZXMvZGVmYXVsdC1jb3Zlci5qcGcnXHJcblxyXG5pbnRlcmZhY2UgSUJvb2tTbmlwcGV0UHJvcHMge1xyXG4gIGJvb2tJbmZvOiBJdGVtVHlwZU9mPENvbnRlbnRQcm9wc1RbJ2l0ZW1zT25QYWdlJ10+XHJcbiAgb25DbGljazogKCkgPT4gdm9pZFxyXG59XHJcblxyXG5jb25zdCBCb29rU25pcHBldFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxyXG4gIHdpZHRoOiAyNTBweDtcclxuICBoZWlnaHQ6IDMyMHB4O1xyXG4gIG1hcmdpbjogMXJlbTtcclxuICBwYWRkaW5nOiAxcmVtO1xyXG4gIGJvcmRlcjogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xyXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XHJcbiAgaW1nIHtcclxuICAgIHVzZXItc2VsZWN0OiBub25lO1xyXG4gIH1cclxuICAmOmhvdmVyIHtcclxuICAgIGJvcmRlci1jb2xvcjogI2FhYTlhOTtcclxuICB9XHJcbiAgZGl2IHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHBhZGRpbmc6IDAuMnJlbTtcclxuICB9XHJcbiAgb3ZlcmZsb3cteTogc2Nyb2xsO1xyXG4gIDo6LXdlYmtpdC1zY3JvbGxiYXIge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICB9XHJcbiAgKiB7XHJcbiAgICBjb2xvcjogIzVmNWY1ZjtcclxuICB9XHJcbmBcclxuXHJcbmNvbnN0IEJvb2tTbmlwcGV0OiBGQzxJQm9va1NuaXBwZXRQcm9wcz4gPSAocHJvcHMpID0+IHtcclxuICBjb25zdCBbc3JjU3RhdGUsIHNldFNyY1N0YXRlXSA9IHVzZVN0YXRlKCcnKVxyXG4gIGNvbnN0IGltYWdlU3JjID0gc3JjU3RhdGUgfHwgcHJvcHMuYm9va0luZm8/Lm1lZGl1bUNvdmVyXHJcbiAgY29uc3QgY2hlY2tTaXplOiBSZWFjdEV2ZW50SGFuZGxlcjxIVE1MSW1hZ2VFbGVtZW50PiA9IChlKSA9PiB7XHJcbiAgICBpZiAoZS5jdXJyZW50VGFyZ2V0Lm5hdHVyYWxXaWR0aCA8IDEwKSB7XHJcbiAgICAgIHNldFNyY1N0YXRlKGRlZmF1bHRDb3ZlcilcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIChcclxuICAgIDxCb29rU25pcHBldFdyYXBwZXIgb25DbGljaz17cHJvcHMub25DbGlja30+XHJcbiAgICAgIDxEaXYgaGVpZ2h0PVwiZml0LWNvbnRlbnRcIiB3aWR0aD1cImZpdC1jb250ZW50XCIgbWFyZ2luPVwiMCBhdXRvXCI+XHJcbiAgICAgICAgPEltYWdlIG9uTG9hZD17Y2hlY2tTaXplfSBoZWlnaHQ9XCIxODNweFwiIG1heFdpZHRoPVwiMTgwcHhcIiBzcmM9e2ltYWdlU3JjfSBhbHQ9XCJcIiAvPlxyXG4gICAgICA8L0Rpdj5cclxuICAgICAgPERpdiBoZWlnaHQ9XCJmaXQtY29udGVudFwiPlxyXG4gICAgICAgIDxTcGFuIGZvbnRTaXplPVwiMS4ycmVtXCIgZm9udFdlaWdodD1cIjUwMFwiPlxyXG4gICAgICAgICAge3Byb3BzLmJvb2tJbmZvPy5hdXRob3J9XHJcbiAgICAgICAgPC9TcGFuPlxyXG4gICAgICA8L0Rpdj5cclxuICAgICAgPERpdiBoZWlnaHQ9XCJmaXQtY29udGVudFwiPlxyXG4gICAgICAgIDxTcGFuIGZvbnRGYW1pbHk9XCJzZXJpZlwiIGZvbnRTaXplPVwiMS4xcmVtXCI+XHJcbiAgICAgICAgICB7cHJvcHMuYm9va0luZm8/LnRpdGxlfVxyXG4gICAgICAgIDwvU3Bhbj5cclxuICAgICAgPC9EaXY+XHJcbiAgICA8L0Jvb2tTbmlwcGV0V3JhcHBlcj5cclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJvb2tTbmlwcGV0XHJcbiIsImltcG9ydCB7IEl0ZW1UeXBlT2YgfSBmcm9tICdAL3R5cGVzL2NvbW1vbi10eXBlcydcclxuaW1wb3J0IHsgRkMsIFJlYWN0RXZlbnRIYW5kbGVyLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xyXG5pbXBvcnQgRGl2IGZyb20gJy4uL2NvbW1vbi9EaXYnXHJcbmltcG9ydCBGbGV4Q29udGFpbmVyIGZyb20gJy4uL2NvbW1vbi9GbGV4Q29udGFpbmVyJ1xyXG5pbXBvcnQgSW1hZ2UgZnJvbSAnLi4vY29tbW9uL0ltYWdlJ1xyXG5pbXBvcnQgeyBDb250ZW50UHJvcHNUIH0gZnJvbSAnLi9Db250ZW50J1xyXG5pbXBvcnQgZGVmYXVsdENvdmVyIGZyb20gJ0AvaW1hZ2VzL2RlZmF1bHQtY292ZXIuanBnJ1xyXG5cclxuY29uc3QgSW5mb1BhbmVsV3JhcHBlciA9IHN0eWxlZC5kaXZgXHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgaGVpZ2h0OiAxMDAlO1xyXG4gIHBhZGRpbmc6IDJyZW07XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIHBhZGRpbmc6IDFyZW07XHJcbiAgfVxyXG5gXHJcblxyXG5jb25zdCBJbWFnZVdyYXBwZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGhlaWdodDogZml0LWNvbnRlbnQ7XHJcbiAgbWFyZ2luOiAxcmVtIGF1dG87XHJcbiAgd2lkdGg6IDQ1MHB4O1xyXG4gIGZsZXg6IDEgMCBhdXRvO1xyXG4gIGltZyB7XHJcbiAgICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG4gICAgLyogbWF4LWhlaWdodDogNjUwcHg7ICovXHJcbiAgfVxyXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG4gICAgd2lkdGg6IDMwMHB4O1xyXG4gICAgaW1nIHtcclxuICAgICAgbWF4LXdpZHRoOiAzMDBweDtcclxuICAgICAgLyogbWF4LWhlaWdodDogNjUwcHg7ICovXHJcbiAgICB9XHJcbiAgfVxyXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICB3aWR0aDogZml0LWNvbnRlbnQ7XHJcbiAgICBpbWcge1xyXG4gICAgICBtYXgtd2lkdGg6IDQwMHB4O1xyXG4gICAgICBtYXgtaGVpZ2h0OiAzNTBweDtcclxuICAgIH1cclxuICB9XHJcbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTY4cHgpIHtcclxuICAgIHdpZHRoOiBmaXQtY29udGVudDtcclxuICAgIGltZyB7XHJcbiAgICAgIG1heC13aWR0aDogMzAwcHg7XHJcbiAgICAgIC8qIG1heC1oZWlnaHQ6IDUxMHB4OyAqL1xyXG4gICAgfVxyXG4gIH1cclxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzMjBweCkge1xyXG4gICAgd2lkdGg6IGZpdC1jb250ZW50O1xyXG4gICAgaW1nIHtcclxuICAgICAgbWF4LXdpZHRoOiAyNTBweDtcclxuICAgICAgbWF4LWhlaWdodDogMzAwcHg7XHJcbiAgICAgIGhlaWdodDogMzIwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG5gXHJcblxyXG5jb25zdCBGbGV4SW5mbyA9IHN0eWxlZChGbGV4Q29udGFpbmVyKWBcclxuICBwYWRkaW5nOiAxcmVtIDA7XHJcbiAgcGFkZGluZy1sZWZ0OiAxcmVtO1xyXG4gIGhlaWdodDogZml0LWNvbnRlbnQ7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgb3ZlcmZsb3c6IGF1dG87XHJcbmBcclxuXHJcbmNvbnN0IEZsZXhJbmZvQ2VsbCA9IHN0eWxlZChGbGV4Q29udGFpbmVyKWBcclxuICB3aWR0aDogMTAwJTtcclxuICBmbGV4LXdyYXA6IG5vd3JhcDtcclxuICBjb2x1bW4tZ2FwOiAwLjVyZW07XHJcbiAgbWFyZ2luOiAwLjVyZW0gMDtcclxuYFxyXG5cclxuaW50ZXJmYWNlIElJbmZvUGFuZVByb3BzIHtcclxuICBlZGl0aW9uOiBJdGVtVHlwZU9mPENvbnRlbnRQcm9wc1RbJ2l0ZW1zT25QYWdlJ10+XHJcbn1cclxuXHJcbmNvbnN0IEluZm9QYW5lOiBGQzxJSW5mb1BhbmVQcm9wcz4gPSAoeyBlZGl0aW9uIH0pID0+IHtcclxuICBjb25zdCBbc3JjU3RhdGUsIHNldFNyY1N0YXRlXSA9IHVzZVN0YXRlKCcnKVxyXG4gIGNvbnN0IGltYWdlU3JjID0gc3JjU3RhdGUgfHwgZWRpdGlvbj8ubGFyZ2VDb3ZlclxyXG4gIGNvbnN0IGNoZWNrU2l6ZTogUmVhY3RFdmVudEhhbmRsZXI8SFRNTEltYWdlRWxlbWVudD4gPSAoZSkgPT4ge1xyXG4gICAgaWYgKGUuY3VycmVudFRhcmdldC5uYXR1cmFsV2lkdGggPCAxMCkge1xyXG4gICAgICBzZXRTcmNTdGF0ZShkZWZhdWx0Q292ZXIpXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiAoXHJcbiAgICA8SW5mb1BhbmVsV3JhcHBlcj5cclxuICAgICAgPEltYWdlV3JhcHBlcj5cclxuICAgICAgICA8SW1hZ2Ugb25Mb2FkPXtjaGVja1NpemV9IHNyYz17aW1hZ2VTcmN9IGFsdD1cIlwiIC8+XHJcbiAgICAgIDwvSW1hZ2VXcmFwcGVyPlxyXG4gICAgICA8RmxleEluZm8+XHJcbiAgICAgICAgPEZsZXhJbmZvQ2VsbD5cclxuICAgICAgICAgIDxEaXYgd2lkdGg9XCI0cmVtXCI+QXV0aG9yOjwvRGl2PlxyXG4gICAgICAgICAgPGRpdj57ZWRpdGlvbj8uYXV0aG9yfTwvZGl2PlxyXG4gICAgICAgIDwvRmxleEluZm9DZWxsPlxyXG4gICAgICAgIDxGbGV4SW5mb0NlbGw+XHJcbiAgICAgICAgICA8RGl2IHdpZHRoPVwiNHJlbVwiPlRpdGxlOjwvRGl2PlxyXG4gICAgICAgICAgPGRpdj57ZWRpdGlvbj8udGl0bGV9PC9kaXY+XHJcbiAgICAgICAgPC9GbGV4SW5mb0NlbGw+XHJcbiAgICAgICAgPEZsZXhJbmZvQ2VsbD5cclxuICAgICAgICAgIDxEaXYgd2lkdGg9XCI0cmVtXCI+UGFnZXM6PC9EaXY+XHJcbiAgICAgICAgICA8ZGl2PntlZGl0aW9uPy5udW1iZXJfb2ZfcGFnZXN9PC9kaXY+XHJcbiAgICAgICAgPC9GbGV4SW5mb0NlbGw+XHJcbiAgICAgICAgPEZsZXhJbmZvQ2VsbD5cclxuICAgICAgICAgIDxEaXYgd2lkdGg9XCI0cmVtXCI+UHVibGlzaGVyOjwvRGl2PlxyXG4gICAgICAgICAgPGRpdj57ZWRpdGlvbj8ucHVibGlzaGVyc308L2Rpdj5cclxuICAgICAgICA8L0ZsZXhJbmZvQ2VsbD5cclxuICAgICAgICA8RmxleEluZm9DZWxsPlxyXG4gICAgICAgICAgPERpdiB3aWR0aD1cIjRyZW1cIj5QdWJsaXNoIGRhdGU6PC9EaXY+XHJcbiAgICAgICAgICA8ZGl2PntlZGl0aW9uPy5wdWJsaXNoX2RhdGV9PC9kaXY+XHJcbiAgICAgICAgPC9GbGV4SW5mb0NlbGw+XHJcbiAgICAgICAgPEZsZXhJbmZvQ2VsbD5cclxuICAgICAgICAgIDxEaXYgd2lkdGg9XCI0cmVtXCI+SVNCTjo8L0Rpdj5cclxuICAgICAgICAgIDxkaXY+e2VkaXRpb24/LmlzYm59PC9kaXY+XHJcbiAgICAgICAgPC9GbGV4SW5mb0NlbGw+XHJcbiAgICAgIDwvRmxleEluZm8+XHJcbiAgICA8L0luZm9QYW5lbFdyYXBwZXI+XHJcbiAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBJbmZvUGFuZVxyXG4iLCJpbXBvcnQgeyBJRWRpdGlvbkluZm8gfSBmcm9tICdAL3JlZHV4L2FwcC1yZWR1Y2VyJ1xyXG5pbXBvcnQgeyBGQywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcclxuaW1wb3J0IEZsZXhDb250YWluZXIgZnJvbSAnLi4vY29tbW9uL0ZsZXhDb250YWluZXInXHJcbmltcG9ydCBQYWdlc0xpc3QgZnJvbSAnLi4vY29tbW9uL1BhZ2VzTGlzdC9QYWdlc0xpc3QnXHJcbmltcG9ydCBWaWV3UGFuZWwgZnJvbSAnLi4vY29tbW9uL1ZpZXdQYW5lbC9WaWV3UGFuZWwnXHJcbmltcG9ydCBCb29rU25pcHBldCBmcm9tICcuL0Jvb2tTbmlwcGV0J1xyXG5pbXBvcnQgeyBDb250ZW50UHJvcHNUIH0gZnJvbSAnLi9Db250ZW50J1xyXG5pbXBvcnQgSW5mb1BhbmUgZnJvbSAnLi9JbmZvUGFuZSdcclxuXHJcbmludGVyZmFjZSBJT3duUHJvcHMge1xyXG4gIHBhZ2VTaXplOiBDb250ZW50UHJvcHNUWydwYWdlU2l6ZSddXHJcbiAgcGFnZXNOdW06IENvbnRlbnRQcm9wc1RbJ3BhZ2VzTnVtJ11cclxuICBjdXJyZW50UGFnZTogQ29udGVudFByb3BzVFsnY3VycmVudFBhZ2UnXVxyXG4gIGl0ZW1zT25QYWdlOiBDb250ZW50UHJvcHNUWydpdGVtc09uUGFnZSddXHJcbiAgb25QYWdlQ2xpY2s6IChwYWdlOiBudW1iZXIpID0+IHZvaWRcclxuICBsYXN0UXVlcnk6IENvbnRlbnRQcm9wc1RbJ2xhc3RRdWVyeSddXHJcbiAgc2VhcmNoQ291bnQ6IENvbnRlbnRQcm9wc1RbJ3NlYXJjaENvdW50J11cclxufVxyXG5cclxuY29uc3QgRmxleFNlYXJjaExpc3QgPSBzdHlsZWQoRmxleENvbnRhaW5lcilgXHJcbiAgaGVpZ2h0OiBmaXQtY29udGVudDtcclxuICBmbGV4LXdyYXA6IHdyYXA7XHJcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XHJcbmBcclxuXHJcbmNvbnN0IENlbnRlcmluZ0RpdiA9IHN0eWxlZC5kaXZgXHJcbiAgd2lkdGg6IGZpdC1jb250ZW50O1xyXG4gIGhlaWdodDogZml0LWNvbnRlbnQ7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIHRvcDogNTAlO1xyXG4gIGxlZnQ6IDUwJTtcclxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcclxuICBmb250LXNpemU6IDJyZW07XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG5gXHJcblxyXG5mdW5jdGlvbiBib29rc05vdEZvdW5kIChpdGVtczogQ29udGVudFByb3BzVFsnaXRlbXNPblBhZ2UnXSwgc2VhcmNoQ291bnQ6IG51bWJlcikge1xyXG4gIHJldHVybiAhaXRlbXMubGVuZ3RoICYmIHNlYXJjaENvdW50XHJcbn1cclxuXHJcbmNvbnN0IFNlYXJjaExpc3Q6IEZDPElPd25Qcm9wcz4gPSBwcm9wcyA9PiB7XHJcbiAgY29uc3QgeyBpdGVtc09uUGFnZSwgcGFnZXNOdW0sIGN1cnJlbnRQYWdlLCBvblBhZ2VDbGljaywgc2VhcmNoQ291bnQsIGxhc3RRdWVyeSB9ID0gcHJvcHNcclxuICBjb25zdCBbdmlld01vZGUsIHNldFZpZXdNb2RlXSA9IHVzZVN0YXRlKGZhbHNlKVxyXG4gIGNvbnN0IFt2aWV3Q29udGVudCwgc2V0Vmlld0NvbnRlbnRdID0gdXNlU3RhdGUobnVsbCBhcyBJRWRpdGlvbkluZm8pXHJcbiAgY29uc3QgY2xvc2VWaWV3UGFuZWwgPSAoKSA9PiBzZXRWaWV3TW9kZShmYWxzZSlcclxuXHJcbiAgY29uc3QgZ2V0TmV4dCA9IChpdGVtOiBJRWRpdGlvbkluZm8pOiBJRWRpdGlvbkluZm8gPT4ge1xyXG4gICAgY29uc3QgbmV4dElkeCA9IGl0ZW1zT25QYWdlLmluZGV4T2YoaXRlbSkgKyAxXHJcbiAgICByZXR1cm4gbmV4dElkeCA9PT0gaXRlbXNPblBhZ2UubGVuZ3RoIC0gMSA/IGl0ZW1zT25QYWdlWzBdIDogaXRlbXNPblBhZ2VbbmV4dElkeF1cclxuICB9XHJcbiAgY29uc3QgZ2V0UHJldiA9IChpdGVtOiBJRWRpdGlvbkluZm8pOiBJRWRpdGlvbkluZm8gPT4ge1xyXG4gICAgY29uc3QgbmV4dElkeCA9IGl0ZW1zT25QYWdlLmluZGV4T2YoaXRlbSkgLSAxXHJcbiAgICByZXR1cm4gbmV4dElkeCA9PT0gLTEgPyBpdGVtc09uUGFnZVtpdGVtc09uUGFnZS5sZW5ndGggLSAxXSA6IGl0ZW1zT25QYWdlW25leHRJZHhdXHJcbiAgfVxyXG4gIGNvbnN0IG9uTmV4dENsaWNrID0gKCkgPT4gc2V0Vmlld0NvbnRlbnQoZ2V0TmV4dCh2aWV3Q29udGVudCkpXHJcbiAgY29uc3Qgb25QcmV2Q2xpY2sgPSAoKSA9PiBzZXRWaWV3Q29udGVudChnZXRQcmV2KHZpZXdDb250ZW50KSlcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAgIHtpdGVtc09uUGFnZS5sZW5ndGggIT09IDAgPyAoXHJcbiAgICAgICAgPFBhZ2VzTGlzdCBwYWdlc0NvdW50PXtwYWdlc051bX0gc2VsZWN0ZWRQYWdlPXtjdXJyZW50UGFnZX0gb25QYWdlQ2xpY2s9e29uUGFnZUNsaWNrfSAvPlxyXG4gICAgICApIDogbnVsbH1cclxuICAgICAge2Jvb2tzTm90Rm91bmQoaXRlbXNPblBhZ2UsIHNlYXJjaENvdW50KSA/IChcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tdW5lc2NhcGVkLWVudGl0aWVzXHJcbiAgICAgICAgPENlbnRlcmluZ0Rpdj5ObyBib29rcyBmb3VuZCBvbiBcIntsYXN0UXVlcnl9XCI8L0NlbnRlcmluZ0Rpdj5cclxuICAgICAgKSA6IChcclxuICAgICAgICA8RmxleFNlYXJjaExpc3Q+XHJcbiAgICAgICAgICB7aXRlbXNPblBhZ2UubWFwKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWl0ZW0pIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgIGNvbnN0IG9uU25pcHBldENsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHNldFZpZXdDb250ZW50KGl0ZW0pXHJcbiAgICAgICAgICAgICAgc2V0Vmlld01vZGUodHJ1ZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gPEJvb2tTbmlwcGV0IGtleT17aXRlbS5pc2JufSBib29rSW5mbz17aXRlbX0gb25DbGljaz17b25TbmlwcGV0Q2xpY2t9IC8+XHJcbiAgICAgICAgICB9KX1cclxuICAgICAgICA8L0ZsZXhTZWFyY2hMaXN0PlxyXG4gICAgICApfVxyXG4gICAgICB7aXRlbXNPblBhZ2UubGVuZ3RoICE9PSAwID8gKFxyXG4gICAgICAgIDxQYWdlc0xpc3QgcGFnZXNDb3VudD17cGFnZXNOdW19IHNlbGVjdGVkUGFnZT17Y3VycmVudFBhZ2V9IG9uUGFnZUNsaWNrPXtvblBhZ2VDbGlja30gLz5cclxuICAgICAgKSA6IG51bGx9XHJcbiAgICAgIDxWaWV3UGFuZWxcclxuICAgICAgICBjb250ZW50PXs8SW5mb1BhbmUgZWRpdGlvbj17dmlld0NvbnRlbnR9IC8+fVxyXG4gICAgICAgIGlzU2hvd249e3ZpZXdNb2RlfVxyXG4gICAgICAgIG9uQ2xvc2U9e2Nsb3NlVmlld1BhbmVsfVxyXG4gICAgICAgIGZpeGVkXHJcbiAgICAgICAgbXVsdGlwbGVcclxuICAgICAgICBvbk5leHQ9e29uTmV4dENsaWNrfVxyXG4gICAgICAgIG9uUHJldj17b25QcmV2Q2xpY2t9XHJcbiAgICAgIC8+XHJcbiAgICA8Lz5cclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlYXJjaExpc3RcclxuIiwiaW1wb3J0IHsgdGh1bmtDcmVhdG9yIH0gZnJvbSAnQC9yZWR1eC9hcHAtcmVkdWNlcidcclxuaW1wb3J0IHNlbGVjdG9yIGZyb20gJ0AvcmVkdXgvc2VsZWN0b3JzJ1xyXG5pbXBvcnQgeyBSb290U3RhdGVUIH0gZnJvbSAnQC9yZWR1eC9zdG9yZS1yZWR1eCdcclxuXHJcbmltcG9ydCB7IEZDIH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcclxuaW1wb3J0IFByZWxvYWRlciBmcm9tICcuLi9jb21tb24vUHJlbG9hZGVyJ1xyXG5pbXBvcnQgU2luZ2xlUGFuZSBmcm9tICcuLi9jb21tb24vU2luZ2xlUGFuZS9TaW5nbGVQYW5lJ1xyXG5pbXBvcnQgU2VhcmNoRm9ybSBmcm9tICcuL1NlYXJjaEZvcm0nXHJcbmltcG9ydCBTZWFyY2hMaXN0IGZyb20gJy4vU2VhcmNoTGlzdCdcclxuXHJcbmludGVyZmFjZSBJU3RhdGVQcm9wcyB7XHJcbiAgcGFnZVNpemU6IFJvb3RTdGF0ZVRbJ2FwcCddWydwYWdlU2l6ZSddXHJcbiAgcGFnZXNOdW06IFJvb3RTdGF0ZVRbJ2FwcCddWydwYWdlc051bSddXHJcbiAgY3VycmVudFBhZ2U6IFJvb3RTdGF0ZVRbJ2FwcCddWydjdXJyZW50UGFnZSddXHJcbiAgaXRlbXNPblBhZ2U6IFJvb3RTdGF0ZVRbJ2FwcCddWydpdGVtc09uUGFnZSddXHJcbiAgc2VhcmNoaW5nOiBSb290U3RhdGVUWydhcHAnXVsnc2VhcmNoaW5nJ11cclxuICBsYXN0UXVlcnk6IFJvb3RTdGF0ZVRbJ2FwcCddWydsYXN0UXVlcnknXVxyXG4gIHNlYXJjaENvdW50OiBSb290U3RhdGVUWydhcHAnXVsnc2VhcmNoQ291bnQnXVxyXG59XHJcblxyXG50eXBlIERpc3BhdGNoUHJvcHNUID0gdHlwZW9mIHRodW5rQ3JlYXRvclxyXG5cclxuZXhwb3J0IHR5cGUgQ29udGVudFByb3BzVCA9IElTdGF0ZVByb3BzICYgRGlzcGF0Y2hQcm9wc1RcclxuXHJcbmNvbnN0IENvbnRlbnRXcmFwcGVyID0gc3R5bGVkLmRpdmBcclxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gIGdyaWQtYXJlYTogY29udGVudDtcclxuICBjb2xvcjogcmdiKDcyLCA3OCwgNzgpO1xyXG4gIG1hcmdpbjogMXZoIDF2dztcclxuYFxyXG5cclxuY29uc3QgQ2VudGVyaW5nRGl2ID0gc3R5bGVkLmRpdmBcclxuICB3aWR0aDogZml0LWNvbnRlbnQ7XHJcbiAgaGVpZ2h0OiBmaXQtY29udGVudDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgdG9wOiA1MCU7XHJcbiAgbGVmdDogNTAlO1xyXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xyXG5gXHJcblxyXG5jb25zdCBDb250ZW50OiBGQzxDb250ZW50UHJvcHNUPiA9IChwcm9wcykgPT4ge1xyXG4gIGNvbnN0IHsgcGFnZVNpemUsIHBhZ2VzTnVtLCBjdXJyZW50UGFnZSwgaXRlbXNPblBhZ2UsIHNlYXJjaGluZywgc2VhcmNoQ291bnQsIGxhc3RRdWVyeSB9ID0gcHJvcHNcclxuICBjb25zdCB7IGdldEFsbEJvb2tzLCBnZXRJdGVtc09uUGFnZSB9ID0gcHJvcHNcclxuXHJcbiAgY29uc3Qgb25QYWdlQ2xpY2sgPSAocGFnZTogbnVtYmVyKSA9PiB7XHJcbiAgICBnZXRJdGVtc09uUGFnZShwYWdlKVxyXG4gIH1cclxuXHJcbiAgY29uc3Qgc2VhcmNoTGlzdE1ldGhvZHMgPSB7IG9uUGFnZUNsaWNrIH1cclxuICBjb25zdCBzZWFyY2hMaXN0U3RhdGUgPSB7IHBhZ2VTaXplLCBwYWdlc051bSwgY3VycmVudFBhZ2UsIGl0ZW1zT25QYWdlLCBzZWFyY2hDb3VudCwgbGFzdFF1ZXJ5IH1cclxuICByZXR1cm4gKFxyXG4gICAgPENvbnRlbnRXcmFwcGVyPlxyXG4gICAgICA8U2luZ2xlUGFuZT5cclxuICAgICAgICA8U2VhcmNoRm9ybSBnZXRBbGxCb29rcz17Z2V0QWxsQm9va3N9IC8+XHJcbiAgICAgICAgeyFzZWFyY2hpbmcgPyAoXHJcbiAgICAgICAgICA8U2VhcmNoTGlzdCB7Li4uc2VhcmNoTGlzdFN0YXRlfSB7Li4uc2VhcmNoTGlzdE1ldGhvZHN9IC8+XHJcbiAgICAgICAgKSA6IChcclxuICAgICAgICAgIDxDZW50ZXJpbmdEaXY+XHJcbiAgICAgICAgICAgIDxQcmVsb2FkZXIgaXNGZXRjaGluZyAvPlxyXG4gICAgICAgICAgPC9DZW50ZXJpbmdEaXY+XHJcbiAgICAgICAgKX1cclxuICAgICAgPC9TaW5nbGVQYW5lPlxyXG4gICAgPC9Db250ZW50V3JhcHBlcj5cclxuICApXHJcbn1cclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogUm9vdFN0YXRlVCk6IElTdGF0ZVByb3BzID0+ICh7XHJcbiAgcGFnZVNpemU6IHNlbGVjdG9yLmdldFBhZ2VTaXplKHN0YXRlKSxcclxuICBwYWdlc051bTogc2VsZWN0b3IuZ2V0UGFnZXNOdW0oc3RhdGUpLFxyXG4gIGN1cnJlbnRQYWdlOiBzZWxlY3Rvci5nZXRDdXJyZW50UGFnZShzdGF0ZSksXHJcbiAgaXRlbXNPblBhZ2U6IHNlbGVjdG9yLmdldEl0ZW1zT25QYWdlKHN0YXRlKSxcclxuICBzZWFyY2hpbmc6IHNlbGVjdG9yLmdldElzU2VhcmNoaW5nKHN0YXRlKSxcclxuICBsYXN0UXVlcnk6IHNlbGVjdG9yLmdldExhc3RRdWVyeShzdGF0ZSksXHJcbiAgc2VhcmNoQ291bnQ6IHNlbGVjdG9yLmdldFNlYXJjaENvdW50KHN0YXRlKVxyXG59KVxyXG5cclxuY29uc3QgZGlzcGF0Y2hUb1Byb3BzOiBEaXNwYXRjaFByb3BzVCA9IHtcclxuICAuLi50aHVua0NyZWF0b3JcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIGRpc3BhdGNoVG9Qcm9wcykoQ29udGVudClcclxuIiwiaW1wb3J0IHsgRkMgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcclxuaW1wb3J0IERpdiBmcm9tICcuLi9jb21tb24vRGl2J1xyXG5cclxuY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXZgXHJcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI0NSwgMjQ1LCAyNDUpO1xyXG4gIGdyaWQtYXJlYTogaGVhZGVyO1xyXG4gIGhlaWdodDogNnZoO1xyXG4gIGRpdiB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB0b3A6IDUwJTtcclxuICAgIGxlZnQ6IDUwJTtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xyXG4gIH1cclxuYFxyXG5cclxuXHJcbmNvbnN0IEhlYWRlcjogRkMgPSAoKSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxXcmFwcGVyPlxyXG4gICAgICA8RGl2IHdpZHRoPSdmaXQtY29udGVudCcgaGVpZ2h0PSdmaXQtY29udGVudCc+XHJcbiAgICAgICAgU0VBUkNIIEJPT0tTIFdJVEggRUFTRVxyXG4gICAgICA8L0Rpdj5cclxuICAgIDwvV3JhcHBlcj5cclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEhlYWRlclxyXG4iLCJpbXBvcnQgRm9vdGVyIGZyb20gXCIuL2NvbXBvbmVudHMvRm9vdGVyL0Zvb3RlclwiO1xyXG5pbXBvcnQgQ29udGVudCBmcm9tIFwiLi9jb21wb25lbnRzL0NvbnRlbnQvQ29udGVudFwiO1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xyXG5pbXBvcnQgSGVhZGVyIGZyb20gXCIuL2NvbXBvbmVudHMvSGVhZGVyL0hlYWRlclwiO1xyXG5pbXBvcnQgeyBGQyB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuY29uc3QgQXBwV3JhcHBlciA9IHN0eWxlZC5kaXZgXHJcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIzNiwgMjM2LCAyMzYpO1xyXG4gIHotaW5kZXg6IDEwMDtcclxuICBtaW4taGVpZ2h0OiAxMDAlO1xyXG4gIG1pbi13aWR0aDogMzAwcHg7XHJcbiAgZGlzcGxheTogZ3JpZDtcclxuICBncmlkLXRlbXBsYXRlLXJvd3M6IDZ2aCAxZnIgNnZoO1xyXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xyXG4gIGdyaWQtdGVtcGxhdGUtYXJlYXM6XHJcbiAgICBcImhlYWRlclwiXHJcbiAgICBcImNvbnRlbnRcIlxyXG4gICAgXCJmb290ZXJcIjtcclxuYDtcclxuXHJcbmNvbnN0IEFwcDogRkMgPSAoKSA9PiB7XHJcblxyXG4gIGNvbnNvbGUubG9nKCdBcHAgcmVuZGVyZWQnKVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEFwcFdyYXBwZXI+XHJcbiAgICAgIDxIZWFkZXIgLz5cclxuICAgICAgPENvbnRlbnQgLz5cclxuICAgICAgPEZvb3RlciAvPlxyXG4gICAgPC9BcHBXcmFwcGVyPlxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFwcDtcclxuIiwiaW1wb3J0IHsgaG90IH0gZnJvbSAncmVhY3QtaG90LWxvYWRlci9yb290J1xyXG5pbXBvcnQgeyBGQyB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJ1xyXG5pbXBvcnQgeyBIYXNoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcclxuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuaW1wb3J0IHsgY3JlYXRlR2xvYmFsU3R5bGUgfSBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcclxuaW1wb3J0IHt9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzL2Nzc3Byb3AnXHJcbmltcG9ydCBzdG9yZSBmcm9tICcuL3JlZHV4L3N0b3JlLXJlZHV4J1xyXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwJ1xyXG5cclxuY29uc3QgR2xvYmFsU3R5bGVzID0gY3JlYXRlR2xvYmFsU3R5bGVgXHJcbiAgICAqIHtcclxuICAgICAgICBtYXJnaW46IDA7XHJcbiAgICAgICAgcGFkZGluZzogMDtcclxuICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gICAgfVxyXG4gICAgYm9keSB7XHJcbiAgICAgICAgY29sb3I6IHJnYigxMjIsIDEzNCwgMTM0KTtcclxuICAgIH1cclxuICAgIGh0bWwsXHJcbiAgICBib2R5LFxyXG4gICAgI3Jvb3Qge1xyXG4gICAgICAgIGhlaWdodDogMTAwdmg7XHJcbiAgICB9XHJcbiAgICBhIHtcclxuICAgICAgY29sb3I6IHJnYigxMjIsIDEzNCwgMTM0KTtcclxuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gICAgfVxyXG4gICAgYS5hY3RpdmUge1xyXG4gICAgICBjb2xvcjogcmdiKDE0OCwgMTYwLCAxNjApO1xyXG4gICAgfVxyXG5gXHJcblxyXG5jb25zdCBSb290Q29udGFpbmVyID0gKCkgPT4gKFxyXG4gIDxIYXNoUm91dGVyIGhhc2hUeXBlPVwic2xhc2hcIj5cclxuICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxyXG4gICAgICA8QXBwIC8+XHJcbiAgICAgIDxHbG9iYWxTdHlsZXMgLz5cclxuICAgIDwvUHJvdmlkZXI+XHJcbiAgPC9IYXNoUm91dGVyPlxyXG4pXHJcblxyXG5jb25zdCByZW5kZXIgPSAoQ29tcG9uZW50OiBGQykgPT4ge1xyXG4gIGNvbnN0IEhvdFdyYXBwZXIgPSBob3QoQ29tcG9uZW50KVxyXG4gIFJlYWN0RE9NLnJlbmRlcig8SG90V3JhcHBlciAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSlcclxufVxyXG5cclxucmVuZGVyKFJvb3RDb250YWluZXIpXHJcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSB1c2VkICdtb2R1bGUnIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbl9fd2VicGFja19yZXF1aXJlX18oOTIxMyk7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMjU5Nyk7XG4iXSwic291cmNlUm9vdCI6IiJ9